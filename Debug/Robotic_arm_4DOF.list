
Robotic_arm_4DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008188  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083e4  080083e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080083e4  080083e4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083e4  080083e4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083e4  080083e4  000183e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083e8  080083e8  000183e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080083ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025d4  20000010  080083fc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025e4  080083fc  000225e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d37  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003954  00000000  00000000  00038d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  0003c6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f0  00000000  00000000  0003dc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8ee  00000000  00000000  0003f048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae1c  00000000  00000000  0005c936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b15f6  00000000  00000000  00077752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00128d48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d0  00000000  00000000  00128d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008300 	.word	0x08008300

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008300 	.word	0x08008300

080001d0 <at24c256b_page_write>:
 * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
 * @param GPIO_Pin_WP - pin on your MCU that is connected to WP pin AT24C256B
 */
void at24c256b_page_write(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, int8_t* pData, uint16_t Size, uint16_t address,
	                      GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_WP)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b088      	sub	sp, #32
 80001d4:	af04      	add	r7, sp, #16
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	607a      	str	r2, [r7, #4]
 80001da:	461a      	mov	r2, r3
 80001dc:	460b      	mov	r3, r1
 80001de:	817b      	strh	r3, [r7, #10]
 80001e0:	4613      	mov	r3, r2
 80001e2:	813b      	strh	r3, [r7, #8]
	write_protection(0, GPIOx, GPIO_Pin_WP);
 80001e4:	8c3b      	ldrh	r3, [r7, #32]
 80001e6:	461a      	mov	r2, r3
 80001e8:	69f9      	ldr	r1, [r7, #28]
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 f833 	bl	8000256 <write_protection>
	HAL_I2C_Mem_Write(hi2c, DevAddress, address, 2, pData, Size, 100);
 80001f0:	8b3a      	ldrh	r2, [r7, #24]
 80001f2:	8979      	ldrh	r1, [r7, #10]
 80001f4:	2364      	movs	r3, #100	; 0x64
 80001f6:	9302      	str	r3, [sp, #8]
 80001f8:	893b      	ldrh	r3, [r7, #8]
 80001fa:	9301      	str	r3, [sp, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	9300      	str	r3, [sp, #0]
 8000200:	2302      	movs	r3, #2
 8000202:	68f8      	ldr	r0, [r7, #12]
 8000204:	f002 f802 	bl	800220c <HAL_I2C_Mem_Write>
}
 8000208:	bf00      	nop
 800020a:	3710      	adds	r7, #16
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <at24c256b_sequential_read>:
 * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
 * @param GPIO_Pin_WP - pin on your MCU that is connected to WP pin AT24C256B
 */
void at24c256b_sequential_read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, int8_t* pData, uint16_t Size, uint16_t address,
		                 GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_WP)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b08a      	sub	sp, #40	; 0x28
 8000214:	af04      	add	r7, sp, #16
 8000216:	60f8      	str	r0, [r7, #12]
 8000218:	607a      	str	r2, [r7, #4]
 800021a:	461a      	mov	r2, r3
 800021c:	460b      	mov	r3, r1
 800021e:	817b      	strh	r3, [r7, #10]
 8000220:	4613      	mov	r3, r2
 8000222:	813b      	strh	r3, [r7, #8]
	write_protection(1, GPIOx, GPIO_Pin_WP);
 8000224:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000226:	461a      	mov	r2, r3
 8000228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800022a:	2001      	movs	r0, #1
 800022c:	f000 f813 	bl	8000256 <write_protection>
	HAL_StatusTypeDef result;
	result = HAL_I2C_Mem_Read(hi2c, DevAddress, address, 2, (uint8_t * )pData, Size, 100);
 8000230:	8c3a      	ldrh	r2, [r7, #32]
 8000232:	8979      	ldrh	r1, [r7, #10]
 8000234:	2364      	movs	r3, #100	; 0x64
 8000236:	9302      	str	r3, [sp, #8]
 8000238:	893b      	ldrh	r3, [r7, #8]
 800023a:	9301      	str	r3, [sp, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	9300      	str	r3, [sp, #0]
 8000240:	2302      	movs	r3, #2
 8000242:	68f8      	ldr	r0, [r7, #12]
 8000244:	f002 f8f6 	bl	8002434 <HAL_I2C_Mem_Read>
 8000248:	4603      	mov	r3, r0
 800024a:	75fb      	strb	r3, [r7, #23]
	__asm__ volatile("NOP");
 800024c:	bf00      	nop
}
 800024e:	bf00      	nop
 8000250:	3718      	adds	r7, #24
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}

08000256 <write_protection>:
 *         write protection is OFF
 * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
 * @param GPIO_Pin_WP - pin on your MCU that is connected to WP pin AT24C256B
 */
void write_protection(uint8_t wr_prot, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_WP)
{
 8000256:	b480      	push	{r7}
 8000258:	b083      	sub	sp, #12
 800025a:	af00      	add	r7, sp, #0
 800025c:	4603      	mov	r3, r0
 800025e:	6039      	str	r1, [r7, #0]
 8000260:	71fb      	strb	r3, [r7, #7]
 8000262:	4613      	mov	r3, r2
 8000264:	80bb      	strh	r3, [r7, #4]
	if(wr_prot == 1)
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d106      	bne.n	800027a <write_protection+0x24>
	{
		GPIOx->ODR |= GPIO_Pin_WP;
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	695a      	ldr	r2, [r3, #20]
 8000270:	88bb      	ldrh	r3, [r7, #4]
 8000272:	431a      	orrs	r2, r3
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	615a      	str	r2, [r3, #20]
	}
	else if(wr_prot == 0)
	{
		GPIOx->ODR &= ~GPIO_Pin_WP;
	}
}
 8000278:	e009      	b.n	800028e <write_protection+0x38>
	else if(wr_prot == 0)
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d106      	bne.n	800028e <write_protection+0x38>
		GPIOx->ODR &= ~GPIO_Pin_WP;
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	695b      	ldr	r3, [r3, #20]
 8000284:	88ba      	ldrh	r2, [r7, #4]
 8000286:	43d2      	mvns	r2, r2
 8000288:	401a      	ands	r2, r3
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	615a      	str	r2, [r3, #20]
}
 800028e:	bf00      	nop
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
	...

0800029c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80002ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <vApplicationGetIdleTaskMemory+0x30>)
 80002b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2240      	movs	r2, #64	; 0x40
 80002b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002ba:	bf00      	nop
 80002bc:	3714      	adds	r7, #20
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	2000002c 	.word	0x2000002c
 80002cc:	20000080 	.word	0x20000080

080002d0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	4a07      	ldr	r2, [pc, #28]	; (80002fc <vApplicationGetTimerTaskMemory+0x2c>)
 80002e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	4a06      	ldr	r2, [pc, #24]	; (8000300 <vApplicationGetTimerTaskMemory+0x30>)
 80002e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2240      	movs	r2, #64	; 0x40
 80002ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002ee:	bf00      	nop
 80002f0:	3714      	adds	r7, #20
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000180 	.word	0x20000180
 8000300:	200001d4 	.word	0x200001d4

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b5b0      	push	{r4, r5, r7, lr}
 8000306:	b098      	sub	sp, #96	; 0x60
 8000308:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	myEventGroup.flag1 = 0;
 800030a:	4a79      	ldr	r2, [pc, #484]	; (80004f0 <main+0x1ec>)
 800030c:	7813      	ldrb	r3, [r2, #0]
 800030e:	f36f 0300 	bfc	r3, #0, #1
 8000312:	7013      	strb	r3, [r2, #0]
	myEventGroup.flag2 = 0;
 8000314:	4a76      	ldr	r2, [pc, #472]	; (80004f0 <main+0x1ec>)
 8000316:	7813      	ldrb	r3, [r2, #0]
 8000318:	f36f 0341 	bfc	r3, #1, #1
 800031c:	7013      	strb	r3, [r2, #0]
	myEventGroup.flag3 = 0;
 800031e:	4a74      	ldr	r2, [pc, #464]	; (80004f0 <main+0x1ec>)
 8000320:	7813      	ldrb	r3, [r2, #0]
 8000322:	f36f 0382 	bfc	r3, #2, #1
 8000326:	7013      	strb	r3, [r2, #0]
	myEventGroup.flagBlockTaskServom = 0;
 8000328:	4a71      	ldr	r2, [pc, #452]	; (80004f0 <main+0x1ec>)
 800032a:	7813      	ldrb	r3, [r2, #0]
 800032c:	f36f 03c3 	bfc	r3, #3, #1
 8000330:	7013      	strb	r3, [r2, #0]

	buffer.sum = 0;
 8000332:	4b70      	ldr	r3, [pc, #448]	; (80004f4 <main+0x1f0>)
 8000334:	2200      	movs	r2, #0
 8000336:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800033a:	f000 ff7b 	bl	8001234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800033e:	f000 f8f7 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000342:	f000 fae9 	bl	8000918 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000346:	f000 fa15 	bl	8000774 <MX_TIM1_Init>
  MX_I2C1_Init();
 800034a:	f000 f9d3 	bl	80006f4 <MX_I2C1_Init>
  MX_ADC1_Init();
 800034e:	f000 f947 	bl	80005e0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000352:	2100      	movs	r1, #0
 8000354:	4868      	ldr	r0, [pc, #416]	; (80004f8 <main+0x1f4>)
 8000356:	f004 f9fb 	bl	8004750 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800035a:	2104      	movs	r1, #4
 800035c:	4866      	ldr	r0, [pc, #408]	; (80004f8 <main+0x1f4>)
 800035e:	f004 f9f7 	bl	8004750 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000362:	2108      	movs	r1, #8
 8000364:	4864      	ldr	r0, [pc, #400]	; (80004f8 <main+0x1f4>)
 8000366:	f004 f9f3 	bl	8004750 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800036a:	210c      	movs	r1, #12
 800036c:	4862      	ldr	r0, [pc, #392]	; (80004f8 <main+0x1f4>)
 800036e:	f004 f9ef 	bl	8004750 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 750;
 8000372:	4b62      	ldr	r3, [pc, #392]	; (80004fc <main+0x1f8>)
 8000374:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000378:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 300;
 800037a:	4b60      	ldr	r3, [pc, #384]	; (80004fc <main+0x1f8>)
 800037c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000380:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 1350;
 8000382:	4b5e      	ldr	r3, [pc, #376]	; (80004fc <main+0x1f8>)
 8000384:	f240 5246 	movw	r2, #1350	; 0x546
 8000388:	63da      	str	r2, [r3, #60]	; 0x3c

  GPIOC->ODR |= GPIO_ODR_11;
 800038a:	4b5d      	ldr	r3, [pc, #372]	; (8000500 <main+0x1fc>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a5c      	ldr	r2, [pc, #368]	; (8000500 <main+0x1fc>)
 8000390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000394:	6153      	str	r3, [r2, #20]

	ADC1->CFGR |= ADC_CFGR_DMACFG; //1: DMA Circular Mode selected
 8000396:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003a0:	f043 0302 	orr.w	r3, r3, #2
 80003a4:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= ADC_CFGR_DMAEN; //Direct memory access enable
 80003a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	60d3      	str	r3, [r2, #12]

	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // DMA1 clock enable
 80003b6:	4b53      	ldr	r3, [pc, #332]	; (8000504 <main+0x200>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a52      	ldr	r2, [pc, #328]	; (8000504 <main+0x200>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CCR |= (1<<10); // memory size 16 bits
 80003c2:	4b51      	ldr	r3, [pc, #324]	; (8000508 <main+0x204>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a50      	ldr	r2, [pc, #320]	; (8000508 <main+0x204>)
 80003c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003cc:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (1<<8); // peripheral size 16 bits
 80003ce:	4b4e      	ldr	r3, [pc, #312]	; (8000508 <main+0x204>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a4d      	ldr	r2, [pc, #308]	; (8000508 <main+0x204>)
 80003d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d8:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC; //memory increment mode
 80003da:	4b4b      	ldr	r3, [pc, #300]	; (8000508 <main+0x204>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a4a      	ldr	r2, [pc, #296]	; (8000508 <main+0x204>)
 80003e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e4:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 80003e6:	4b48      	ldr	r3, [pc, #288]	; (8000508 <main+0x204>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a47      	ldr	r2, [pc, #284]	; (8000508 <main+0x204>)
 80003ec:	f043 0320 	orr.w	r3, r3, #32
 80003f0:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CNDTR = 4;
 80003f2:	4b45      	ldr	r3, [pc, #276]	; (8000508 <main+0x204>)
 80003f4:	2204      	movs	r2, #4
 80003f6:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CPAR = &(ADC1->DR);
 80003f8:	4b43      	ldr	r3, [pc, #268]	; (8000508 <main+0x204>)
 80003fa:	4a44      	ldr	r2, [pc, #272]	; (800050c <main+0x208>)
 80003fc:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = buffer.adc_buffer;
 80003fe:	4b42      	ldr	r3, [pc, #264]	; (8000508 <main+0x204>)
 8000400:	4a3c      	ldr	r2, [pc, #240]	; (80004f4 <main+0x1f0>)
 8000402:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CCR |= DMA_CCR_EN;
 8000404:	4b40      	ldr	r3, [pc, #256]	; (8000508 <main+0x204>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a3f      	ldr	r2, [pc, #252]	; (8000508 <main+0x204>)
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	6013      	str	r3, [r2, #0]

	ADC1->CR |= ADC_CR_ADEN; //ADC enable control
 8000410:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	6093      	str	r3, [r2, #8]
	while(ADC1->ISR & ADC_ISR_ADRDY) __asm__ volatile("NOP");
 8000420:	e000      	b.n	8000424 <main+0x120>
 8000422:	bf00      	nop
 8000424:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	2b00      	cmp	r3, #0
 8000430:	d1f7      	bne.n	8000422 <main+0x11e>
	ADC1->CR |= ADC_CR_ADSTART; // ADC start of regular conversion
 8000432:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800043c:	f043 0304 	orr.w	r3, r3, #4
 8000440:	6093      	str	r3, [r2, #8]

	buffer.xEventGroup1 = xEventGroupCreate();
 8000442:	f005 facc 	bl	80059de <xEventGroupCreate>
 8000446:	4603      	mov	r3, r0
 8000448:	4a2a      	ldr	r2, [pc, #168]	; (80004f4 <main+0x1f0>)
 800044a:	60d3      	str	r3, [r2, #12]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
	buffer.xTimer1Handle = xTimerCreate("Timer1", pdMS_TO_TICKS(50), pdTRUE, 0, timer1Callback);
 800044c:	4b30      	ldr	r3, [pc, #192]	; (8000510 <main+0x20c>)
 800044e:	9300      	str	r3, [sp, #0]
 8000450:	2300      	movs	r3, #0
 8000452:	2201      	movs	r2, #1
 8000454:	2132      	movs	r1, #50	; 0x32
 8000456:	482f      	ldr	r0, [pc, #188]	; (8000514 <main+0x210>)
 8000458:	f006 ffce 	bl	80073f8 <xTimerCreate>
 800045c:	4603      	mov	r3, r0
 800045e:	4a25      	ldr	r2, [pc, #148]	; (80004f4 <main+0x1f0>)
 8000460:	6093      	str	r3, [r2, #8]
	xTimerStart(buffer.xTimer1Handle, portMAX_DELAY);
 8000462:	4b24      	ldr	r3, [pc, #144]	; (80004f4 <main+0x1f0>)
 8000464:	689c      	ldr	r4, [r3, #8]
 8000466:	f006 fb39 	bl	8006adc <xTaskGetTickCount>
 800046a:	4602      	mov	r2, r0
 800046c:	f04f 33ff 	mov.w	r3, #4294967295
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	2300      	movs	r3, #0
 8000474:	2101      	movs	r1, #1
 8000476:	4620      	mov	r0, r4
 8000478:	f007 f812 	bl	80074a0 <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ServoMotors */
  osThreadDef(ServoMotors, servo_motors, osPriorityNormal, 0, 64);
 800047c:	4b26      	ldr	r3, [pc, #152]	; (8000518 <main+0x214>)
 800047e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000482:	461d      	mov	r5, r3
 8000484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000488:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800048c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ServoMotorsHandle = osThreadCreate(osThread(ServoMotors), NULL);
 8000490:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f005 fa55 	bl	8005946 <osThreadCreate>
 800049c:	4603      	mov	r3, r0
 800049e:	4a1f      	ldr	r2, [pc, #124]	; (800051c <main+0x218>)
 80004a0:	6013      	str	r3, [r2, #0]

  /* definition and creation of EEPROMsave */
  osThreadDef(EEPROMsave, eeprom_save, osPriorityAboveNormal, 0, 250);
 80004a2:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <main+0x21c>)
 80004a4:	f107 0420 	add.w	r4, r7, #32
 80004a8:	461d      	mov	r5, r3
 80004aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EEPROMsaveHandle = osThreadCreate(osThread(EEPROMsave), NULL);
 80004b6:	f107 0320 	add.w	r3, r7, #32
 80004ba:	2100      	movs	r1, #0
 80004bc:	4618      	mov	r0, r3
 80004be:	f005 fa42 	bl	8005946 <osThreadCreate>
 80004c2:	4603      	mov	r3, r0
 80004c4:	4a17      	ldr	r2, [pc, #92]	; (8000524 <main+0x220>)
 80004c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Path */
  osThreadDef(Path, path, osPriorityNormal, 0, 128);
 80004c8:	4b17      	ldr	r3, [pc, #92]	; (8000528 <main+0x224>)
 80004ca:	1d3c      	adds	r4, r7, #4
 80004cc:	461d      	mov	r5, r3
 80004ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PathHandle = osThreadCreate(osThread(Path), NULL);
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f005 fa31 	bl	8005946 <osThreadCreate>
 80004e4:	4603      	mov	r3, r0
 80004e6:	4a11      	ldr	r2, [pc, #68]	; (800052c <main+0x228>)
 80004e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80004ea:	f005 fa25 	bl	8005938 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <main+0x1ea>
 80004f0:	20000428 	.word	0x20000428
 80004f4:	200003d0 	.word	0x200003d0
 80004f8:	20000378 	.word	0x20000378
 80004fc:	40012c00 	.word	0x40012c00
 8000500:	48000800 	.word	0x48000800
 8000504:	40021000 	.word	0x40021000
 8000508:	40020008 	.word	0x40020008
 800050c:	50000040 	.word	0x50000040
 8000510:	08000a05 	.word	0x08000a05
 8000514:	08008338 	.word	0x08008338
 8000518:	08008340 	.word	0x08008340
 800051c:	200003c4 	.word	0x200003c4
 8000520:	0800835c 	.word	0x0800835c
 8000524:	200003c8 	.word	0x200003c8
 8000528:	08008378 	.word	0x08008378
 800052c:	200003cc 	.word	0x200003cc

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b09c      	sub	sp, #112	; 0x70
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800053a:	2228      	movs	r2, #40	; 0x28
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f007 fed6 	bl	80082f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2234      	movs	r2, #52	; 0x34
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f007 fec8 	bl	80082f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	2310      	movs	r3, #16
 800056a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000570:	2300      	movs	r3, #0
 8000572:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000574:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000578:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800057e:	4618      	mov	r0, r3
 8000580:	f002 fbc2 	bl	8002d08 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800058a:	f000 fc52 	bl	8000e32 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fbeb 	bl	8003d84 <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005b4:	f000 fc3d 	bl	8000e32 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 80005b8:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80005bc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005c2:	2300      	movs	r3, #0
 80005c4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 fe21 	bl	8004210 <HAL_RCCEx_PeriphCLKConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80005d4:	f000 fc2d 	bl	8000e32 <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3770      	adds	r7, #112	; 0x70
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
 80005f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f6:	4b3e      	ldr	r3, [pc, #248]	; (80006f0 <MX_ADC1_Init+0x110>)
 80005f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005fe:	4b3c      	ldr	r3, [pc, #240]	; (80006f0 <MX_ADC1_Init+0x110>)
 8000600:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000604:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000606:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <MX_ADC1_Init+0x110>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800060c:	4b38      	ldr	r3, [pc, #224]	; (80006f0 <MX_ADC1_Init+0x110>)
 800060e:	2201      	movs	r2, #1
 8000610:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000612:	4b37      	ldr	r3, [pc, #220]	; (80006f0 <MX_ADC1_Init+0x110>)
 8000614:	2200      	movs	r2, #0
 8000616:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000618:	4b35      	ldr	r3, [pc, #212]	; (80006f0 <MX_ADC1_Init+0x110>)
 800061a:	2200      	movs	r2, #0
 800061c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000620:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <MX_ADC1_Init+0x110>)
 8000622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000628:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <MX_ADC1_Init+0x110>)
 800062a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000630:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <MX_ADC1_Init+0x110>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000636:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <MX_ADC1_Init+0x110>)
 8000638:	2204      	movs	r2, #4
 800063a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <MX_ADC1_Init+0x110>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <MX_ADC1_Init+0x110>)
 8000646:	2204      	movs	r2, #4
 8000648:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800064a:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <MX_ADC1_Init+0x110>)
 800064c:	2200      	movs	r2, #0
 800064e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <MX_ADC1_Init+0x110>)
 8000652:	2200      	movs	r2, #0
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000656:	4826      	ldr	r0, [pc, #152]	; (80006f0 <MX_ADC1_Init+0x110>)
 8000658:	f000 fe22 	bl	80012a0 <HAL_ADC_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000662:	f000 fbe6 	bl	8000e32 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000666:	2301      	movs	r3, #1
 8000668:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800066a:	2301      	movs	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000672:	2303      	movs	r3, #3
 8000674:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067e:	463b      	mov	r3, r7
 8000680:	4619      	mov	r1, r3
 8000682:	481b      	ldr	r0, [pc, #108]	; (80006f0 <MX_ADC1_Init+0x110>)
 8000684:	f000 ff92 	bl	80015ac <HAL_ADC_ConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800068e:	f000 fbd0 	bl	8000e32 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000692:	2302      	movs	r3, #2
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000696:	2302      	movs	r3, #2
 8000698:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	4619      	mov	r1, r3
 800069e:	4814      	ldr	r0, [pc, #80]	; (80006f0 <MX_ADC1_Init+0x110>)
 80006a0:	f000 ff84 	bl	80015ac <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80006aa:	f000 fbc2 	bl	8000e32 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006ae:	2305      	movs	r3, #5
 80006b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006b2:	2303      	movs	r3, #3
 80006b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	4619      	mov	r1, r3
 80006ba:	480d      	ldr	r0, [pc, #52]	; (80006f0 <MX_ADC1_Init+0x110>)
 80006bc:	f000 ff76 	bl	80015ac <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80006c6:	f000 fbb4 	bl	8000e32 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80006ca:	230b      	movs	r3, #11
 80006cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d2:	463b      	mov	r3, r7
 80006d4:	4619      	mov	r1, r3
 80006d6:	4806      	ldr	r0, [pc, #24]	; (80006f0 <MX_ADC1_Init+0x110>)
 80006d8:	f000 ff68 	bl	80015ac <HAL_ADC_ConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80006e2:	f000 fba6 	bl	8000e32 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200002d4 	.word	0x200002d4

080006f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_I2C1_Init+0x74>)
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <MX_I2C1_Init+0x78>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_I2C1_Init+0x74>)
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <MX_I2C1_Init+0x7c>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_I2C1_Init+0x74>)
 800070c:	2201      	movs	r2, #1
 800070e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_I2C1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_I2C1_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2C1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_I2C1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072e:	480e      	ldr	r0, [pc, #56]	; (8000768 <MX_I2C1_Init+0x74>)
 8000730:	f001 fcdc 	bl	80020ec <HAL_I2C_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800073a:	f000 fb7a 	bl	8000e32 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073e:	2100      	movs	r1, #0
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <MX_I2C1_Init+0x74>)
 8000742:	f002 fa49 	bl	8002bd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800074c:	f000 fb71 	bl	8000e32 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000750:	2100      	movs	r1, #0
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_I2C1_Init+0x74>)
 8000754:	f002 fa8b 	bl	8002c6e <HAL_I2CEx_ConfigDigitalFilter>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800075e:	f000 fb68 	bl	8000e32 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000324 	.word	0x20000324
 800076c:	40005400 	.word	0x40005400
 8000770:	2000090e 	.word	0x2000090e

08000774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b09a      	sub	sp, #104	; 0x68
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000794:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]
 80007a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	222c      	movs	r2, #44	; 0x2c
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f007 fd9e 	bl	80082f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b4:	4b56      	ldr	r3, [pc, #344]	; (8000910 <MX_TIM1_Init+0x19c>)
 80007b6:	4a57      	ldr	r2, [pc, #348]	; (8000914 <MX_TIM1_Init+0x1a0>)
 80007b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 80007ba:	4b55      	ldr	r3, [pc, #340]	; (8000910 <MX_TIM1_Init+0x19c>)
 80007bc:	221f      	movs	r2, #31
 80007be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b53      	ldr	r3, [pc, #332]	; (8000910 <MX_TIM1_Init+0x19c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80007c6:	4b52      	ldr	r3, [pc, #328]	; (8000910 <MX_TIM1_Init+0x19c>)
 80007c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80007cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ce:	4b50      	ldr	r3, [pc, #320]	; (8000910 <MX_TIM1_Init+0x19c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d4:	4b4e      	ldr	r3, [pc, #312]	; (8000910 <MX_TIM1_Init+0x19c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007da:	4b4d      	ldr	r3, [pc, #308]	; (8000910 <MX_TIM1_Init+0x19c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e0:	484b      	ldr	r0, [pc, #300]	; (8000910 <MX_TIM1_Init+0x19c>)
 80007e2:	f003 fea7 	bl	8004534 <HAL_TIM_Base_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007ec:	f000 fb21 	bl	8000e32 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007fa:	4619      	mov	r1, r3
 80007fc:	4844      	ldr	r0, [pc, #272]	; (8000910 <MX_TIM1_Init+0x19c>)
 80007fe:	f004 fac1 	bl	8004d84 <HAL_TIM_ConfigClockSource>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000808:	f000 fb13 	bl	8000e32 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800080c:	4840      	ldr	r0, [pc, #256]	; (8000910 <MX_TIM1_Init+0x19c>)
 800080e:	f003 ff3d 	bl	800468c <HAL_TIM_PWM_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000818:	f000 fb0b 	bl	8000e32 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800081c:	2320      	movs	r3, #32
 800081e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000828:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800082c:	4619      	mov	r1, r3
 800082e:	4838      	ldr	r0, [pc, #224]	; (8000910 <MX_TIM1_Init+0x19c>)
 8000830:	f004 ff6e 	bl	8005710 <HAL_TIMEx_MasterConfigSynchronization>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800083a:	f000 fafa 	bl	8000e32 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800083e:	2360      	movs	r3, #96	; 0x60
 8000840:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 750;
 8000842:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000848:	2300      	movs	r3, #0
 800084a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800084c:	2300      	movs	r3, #0
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800085c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000860:	2200      	movs	r2, #0
 8000862:	4619      	mov	r1, r3
 8000864:	482a      	ldr	r0, [pc, #168]	; (8000910 <MX_TIM1_Init+0x19c>)
 8000866:	f004 f979 	bl	8004b5c <HAL_TIM_PWM_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000870:	f000 fadf 	bl	8000e32 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000878:	2204      	movs	r2, #4
 800087a:	4619      	mov	r1, r3
 800087c:	4824      	ldr	r0, [pc, #144]	; (8000910 <MX_TIM1_Init+0x19c>)
 800087e:	f004 f96d 	bl	8004b5c <HAL_TIM_PWM_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000888:	f000 fad3 	bl	8000e32 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800088c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000890:	2208      	movs	r2, #8
 8000892:	4619      	mov	r1, r3
 8000894:	481e      	ldr	r0, [pc, #120]	; (8000910 <MX_TIM1_Init+0x19c>)
 8000896:	f004 f961 	bl	8004b5c <HAL_TIM_PWM_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80008a0:	f000 fac7 	bl	8000e32 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008a8:	220c      	movs	r2, #12
 80008aa:	4619      	mov	r1, r3
 80008ac:	4818      	ldr	r0, [pc, #96]	; (8000910 <MX_TIM1_Init+0x19c>)
 80008ae:	f004 f955 	bl	8004b5c <HAL_TIM_PWM_ConfigChannel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80008b8:	f000 fabb 	bl	8000e32 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4807      	ldr	r0, [pc, #28]	; (8000910 <MX_TIM1_Init+0x19c>)
 80008f2:	f004 ff73 	bl	80057dc <HAL_TIMEx_ConfigBreakDeadTime>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 80008fc:	f000 fa99 	bl	8000e32 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <MX_TIM1_Init+0x19c>)
 8000902:	f000 fb7d 	bl	8001000 <HAL_TIM_MspPostInit>

}
 8000906:	bf00      	nop
 8000908:	3768      	adds	r7, #104	; 0x68
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000378 	.word	0x20000378
 8000914:	40012c00 	.word	0x40012c00

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	4b33      	ldr	r3, [pc, #204]	; (80009fc <MX_GPIO_Init+0xe4>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	4a32      	ldr	r2, [pc, #200]	; (80009fc <MX_GPIO_Init+0xe4>)
 8000934:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000938:	6153      	str	r3, [r2, #20]
 800093a:	4b30      	ldr	r3, [pc, #192]	; (80009fc <MX_GPIO_Init+0xe4>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <MX_GPIO_Init+0xe4>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	4a2c      	ldr	r2, [pc, #176]	; (80009fc <MX_GPIO_Init+0xe4>)
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	6153      	str	r3, [r2, #20]
 8000952:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <MX_GPIO_Init+0xe4>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b27      	ldr	r3, [pc, #156]	; (80009fc <MX_GPIO_Init+0xe4>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	4a26      	ldr	r2, [pc, #152]	; (80009fc <MX_GPIO_Init+0xe4>)
 8000964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000968:	6153      	str	r3, [r2, #20]
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <MX_GPIO_Init+0xe4>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097c:	4820      	ldr	r0, [pc, #128]	; (8000a00 <MX_GPIO_Init+0xe8>)
 800097e:	f001 fb85 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000988:	481d      	ldr	r0, [pc, #116]	; (8000a00 <MX_GPIO_Init+0xe8>)
 800098a:	f001 fb7f 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800098e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000994:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	4619      	mov	r1, r3
 80009a4:	4816      	ldr	r0, [pc, #88]	; (8000a00 <MX_GPIO_Init+0xe8>)
 80009a6:	f001 f9ff 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80009aa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	480f      	ldr	r0, [pc, #60]	; (8000a00 <MX_GPIO_Init+0xe8>)
 80009c4:	f001 f9f0 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009d4:	2302      	movs	r3, #2
 80009d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4619      	mov	r1, r3
 80009de:	4808      	ldr	r0, [pc, #32]	; (8000a00 <MX_GPIO_Init+0xe8>)
 80009e0:	f001 f9e2 	bl	8001da8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2105      	movs	r1, #5
 80009e8:	2028      	movs	r0, #40	; 0x28
 80009ea:	f001 f9b3 	bl	8001d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ee:	2028      	movs	r0, #40	; 0x28
 80009f0:	f001 f9cc 	bl	8001d8c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40021000 	.word	0x40021000
 8000a00:	48000800 	.word	0x48000800

08000a04 <timer1Callback>:

/* USER CODE BEGIN 4 */
void timer1Callback( TimerHandle_t xTimer )
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	//xEventGroupSetBits(buffer.xEventGroup1, 0x1);
//	xEventGroupSetBitsFromISR(buffer.xEventGroup1, 0x1, pdFALSE);
	myEventGroup.flag1 = 1;
 8000a0c:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <timer1Callback+0x20>)
 8000a0e:	7813      	ldrb	r3, [r2, #0]
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	7013      	strb	r3, [r2, #0]
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000428 	.word	0x20000428

08000a28 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a38:	d104      	bne.n	8000a44 <HAL_GPIO_EXTI_Callback+0x1c>
	{
//		xEventGroupSetBitsFromISR(buffer.xEventGroup1, 0x2, pdFALSE);
		myEventGroup.flag2 = 1;
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a3c:	7813      	ldrb	r3, [r2, #0]
 8000a3e:	f043 0302 	orr.w	r3, r3, #2
 8000a42:	7013      	strb	r3, [r2, #0]
	}
	if(GPIO_Pin == GPIO_PIN_12)
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a4a:	d104      	bne.n	8000a56 <HAL_GPIO_EXTI_Callback+0x2e>
	{
//		xEventGroupSetBitsFromISR(buffer.xEventGroup1, 0x4, pdFALSE);
		myEventGroup.flag3 = 1;
 8000a4c:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a4e:	7813      	ldrb	r3, [r2, #0]
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	7013      	strb	r3, [r2, #0]
	}
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000428 	.word	0x20000428

08000a68 <servo_motors>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_servo_motors */
void servo_motors(void const * argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	  xEventGroupWaitBits(buffer.xEventGroup1, 0x1, pdTRUE, pdTRUE, portMAX_DELAY);
//	  EventBits_t result = 0;
//	  result = xEventGroupGetBits(buffer.xEventGroup1);
	  while(myEventGroup.flag1 != 1 && myEventGroup.flagBlockTaskServom == 0)
 8000a70:	e002      	b.n	8000a78 <servo_motors+0x10>
	  {
		  vTaskDelay(5);
 8000a72:	2005      	movs	r0, #5
 8000a74:	f005 feee 	bl	8006854 <vTaskDelay>
	  while(myEventGroup.flag1 != 1 && myEventGroup.flagBlockTaskServom == 0)
 8000a78:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <servo_motors+0x100>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d106      	bne.n	8000a94 <servo_motors+0x2c>
 8000a86:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <servo_motors+0x100>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0ee      	beq.n	8000a72 <servo_motors+0xa>
	  }
	  if(buffer.adc_buffer[0]>2200 && TIM1->CCR1 <1700)  TIM1->CCR1 +=5;
 8000a94:	4b35      	ldr	r3, [pc, #212]	; (8000b6c <servo_motors+0x104>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	f640 0298 	movw	r2, #2200	; 0x898
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d90b      	bls.n	8000ab8 <servo_motors+0x50>
 8000aa0:	4b33      	ldr	r3, [pc, #204]	; (8000b70 <servo_motors+0x108>)
 8000aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa4:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d805      	bhi.n	8000ab8 <servo_motors+0x50>
 8000aac:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <servo_motors+0x108>)
 8000aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab0:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <servo_motors+0x108>)
 8000ab2:	3305      	adds	r3, #5
 8000ab4:	6353      	str	r3, [r2, #52]	; 0x34
 8000ab6:	e00e      	b.n	8000ad6 <servo_motors+0x6e>
	  else if(buffer.adc_buffer[0]<1850 && TIM1->CCR1 > 30) TIM1->CCR1 -=5;
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <servo_motors+0x104>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	f240 7239 	movw	r2, #1849	; 0x739
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d808      	bhi.n	8000ad6 <servo_motors+0x6e>
 8000ac4:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <servo_motors+0x108>)
 8000ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac8:	2b1e      	cmp	r3, #30
 8000aca:	d904      	bls.n	8000ad6 <servo_motors+0x6e>
 8000acc:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <servo_motors+0x108>)
 8000ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad0:	4a27      	ldr	r2, [pc, #156]	; (8000b70 <servo_motors+0x108>)
 8000ad2:	3b05      	subs	r3, #5
 8000ad4:	6353      	str	r3, [r2, #52]	; 0x34
	  if(buffer.adc_buffer[1]>2200 && TIM1->CCR2 <1700)  TIM1->CCR2 +=5;
 8000ad6:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <servo_motors+0x104>)
 8000ad8:	885b      	ldrh	r3, [r3, #2]
 8000ada:	f640 0298 	movw	r2, #2200	; 0x898
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d90b      	bls.n	8000afa <servo_motors+0x92>
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <servo_motors+0x108>)
 8000ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ae6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d805      	bhi.n	8000afa <servo_motors+0x92>
 8000aee:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <servo_motors+0x108>)
 8000af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000af2:	4a1f      	ldr	r2, [pc, #124]	; (8000b70 <servo_motors+0x108>)
 8000af4:	3305      	adds	r3, #5
 8000af6:	6393      	str	r3, [r2, #56]	; 0x38
 8000af8:	e00e      	b.n	8000b18 <servo_motors+0xb0>
	  else if(buffer.adc_buffer[1]<1850 && TIM1->CCR2 > 30) TIM1->CCR2 -=5;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <servo_motors+0x104>)
 8000afc:	885b      	ldrh	r3, [r3, #2]
 8000afe:	f240 7239 	movw	r2, #1849	; 0x739
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d808      	bhi.n	8000b18 <servo_motors+0xb0>
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <servo_motors+0x108>)
 8000b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b0a:	2b1e      	cmp	r3, #30
 8000b0c:	d904      	bls.n	8000b18 <servo_motors+0xb0>
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <servo_motors+0x108>)
 8000b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <servo_motors+0x108>)
 8000b14:	3b05      	subs	r3, #5
 8000b16:	6393      	str	r3, [r2, #56]	; 0x38
	  if(buffer.adc_buffer[2]>2200 && TIM1->CCR3 <1700)  TIM1->CCR3 +=5;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <servo_motors+0x104>)
 8000b1a:	889b      	ldrh	r3, [r3, #4]
 8000b1c:	f640 0298 	movw	r2, #2200	; 0x898
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d90b      	bls.n	8000b3c <servo_motors+0xd4>
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <servo_motors+0x108>)
 8000b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b28:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d805      	bhi.n	8000b3c <servo_motors+0xd4>
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <servo_motors+0x108>)
 8000b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b34:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <servo_motors+0x108>)
 8000b36:	3305      	adds	r3, #5
 8000b38:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000b3a:	e00e      	b.n	8000b5a <servo_motors+0xf2>
	  else if(buffer.adc_buffer[2]<1850 && TIM1->CCR3 > 30) TIM1->CCR3 -=5;
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <servo_motors+0x104>)
 8000b3e:	889b      	ldrh	r3, [r3, #4]
 8000b40:	f240 7239 	movw	r2, #1849	; 0x739
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d808      	bhi.n	8000b5a <servo_motors+0xf2>
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <servo_motors+0x108>)
 8000b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b4c:	2b1e      	cmp	r3, #30
 8000b4e:	d904      	bls.n	8000b5a <servo_motors+0xf2>
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <servo_motors+0x108>)
 8000b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <servo_motors+0x108>)
 8000b56:	3b05      	subs	r3, #5
 8000b58:	63d3      	str	r3, [r2, #60]	; 0x3c
//	  TIM1->CCR1 = ((float)buffer.adc_buffer[0]/4096)*1000 + 250;
//	  TIM1->CCR2 = ((float)buffer.adc_buffer[1]/4096)*1000 - 350;
//	  TIM1->CCR3 = ((float)buffer.adc_buffer[2]/4096)*1000 + 550;
	  __asm__ volatile("NOP");
 8000b5a:	bf00      	nop
	  myEventGroup.flag1 = 0;
 8000b5c:	4a02      	ldr	r2, [pc, #8]	; (8000b68 <servo_motors+0x100>)
 8000b5e:	7813      	ldrb	r3, [r2, #0]
 8000b60:	f36f 0300 	bfc	r3, #0, #1
 8000b64:	7013      	strb	r3, [r2, #0]
	  while(myEventGroup.flag1 != 1 && myEventGroup.flagBlockTaskServom == 0)
 8000b66:	e787      	b.n	8000a78 <servo_motors+0x10>
 8000b68:	20000428 	.word	0x20000428
 8000b6c:	200003d0 	.word	0x200003d0
 8000b70:	40012c00 	.word	0x40012c00

08000b74 <eeprom_save>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_eeprom_save */
void eeprom_save(void const * argument)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af04      	add	r7, sp, #16
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN eeprom_save */
	uint16_t i = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	81bb      	strh	r3, [r7, #12]
	uint16_t address = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	81fb      	strh	r3, [r7, #14]
//		at24c256b_sequential_read(&hi2c1, I2C_ADDRESS_AT24C256B, (int8_t*)buffer_for_seqread, sizeof(buffer_for_seqread), address, GPIOC, GPIO_ODR_10);
//		vTaskDelay(100);
	  //xEventGroupWaitBits(buffer.xEventGroup1, 0x2, pdTRUE, pdTRUE, portMAX_DELAY);
//	  uint32_t result = 0;
//	  result = xEventGroupGetBits(buffer.xEventGroup1);
	  while(myEventGroup.flag2 != 1)
 8000b84:	e002      	b.n	8000b8c <eeprom_save+0x18>
	  {
		  vTaskDelay(15);
 8000b86:	200f      	movs	r0, #15
 8000b88:	f005 fe64 	bl	8006854 <vTaskDelay>
	  while(myEventGroup.flag2 != 1)
 8000b8c:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <eeprom_save+0xd4>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f5      	beq.n	8000b86 <eeprom_save+0x12>
	  }
	  buffer.points[i] = TIM1->CCR1;
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <eeprom_save+0xd8>)
 8000b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b9e:	89bb      	ldrh	r3, [r7, #12]
 8000ba0:	b291      	uxth	r1, r2
 8000ba2:	4a2b      	ldr	r2, [pc, #172]	; (8000c50 <eeprom_save+0xdc>)
 8000ba4:	3308      	adds	r3, #8
 8000ba6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  buffer.points[i+1] = TIM1->CCR2;
 8000baa:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <eeprom_save+0xd8>)
 8000bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bae:	89bb      	ldrh	r3, [r7, #12]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b291      	uxth	r1, r2
 8000bb4:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <eeprom_save+0xdc>)
 8000bb6:	3308      	adds	r3, #8
 8000bb8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  buffer.points[i+2] = TIM1->CCR3;
 8000bbc:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <eeprom_save+0xd8>)
 8000bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bc0:	89bb      	ldrh	r3, [r7, #12]
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	b291      	uxth	r1, r2
 8000bc6:	4a22      	ldr	r2, [pc, #136]	; (8000c50 <eeprom_save+0xdc>)
 8000bc8:	3308      	adds	r3, #8
 8000bca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  at24c256b_page_write(&hi2c1, I2C_ADDRESS_AT24C256B, (int8_t*)&buffer.points[i], 6, address, GPIOC, GPIO_ODR_10);
 8000bce:	89bb      	ldrh	r3, [r7, #12]
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	4a1e      	ldr	r2, [pc, #120]	; (8000c50 <eeprom_save+0xdc>)
 8000bd6:	441a      	add	r2, r3
 8000bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bdc:	9302      	str	r3, [sp, #8]
 8000bde:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <eeprom_save+0xe0>)
 8000be0:	9301      	str	r3, [sp, #4]
 8000be2:	89fb      	ldrh	r3, [r7, #14]
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2306      	movs	r3, #6
 8000be8:	21a0      	movs	r1, #160	; 0xa0
 8000bea:	481b      	ldr	r0, [pc, #108]	; (8000c58 <eeprom_save+0xe4>)
 8000bec:	f7ff faf0 	bl	80001d0 <at24c256b_page_write>
	  address+=6;
 8000bf0:	89fb      	ldrh	r3, [r7, #14]
 8000bf2:	3306      	adds	r3, #6
 8000bf4:	81fb      	strh	r3, [r7, #14]
	  i+=3;
 8000bf6:	89bb      	ldrh	r3, [r7, #12]
 8000bf8:	3303      	adds	r3, #3
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	81bb      	strh	r3, [r7, #12]
	  vTaskDelay(10);
 8000bfe:	200a      	movs	r0, #10
 8000c00:	f005 fe28 	bl	8006854 <vTaskDelay>
	  at24c256b_page_write(&hi2c1, I2C_ADDRESS_AT24C256B, (int8_t*)&i, 2, 64, GPIOC, GPIO_ODR_10);
 8000c04:	f107 020c 	add.w	r2, r7, #12
 8000c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0c:	9302      	str	r3, [sp, #8]
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <eeprom_save+0xe0>)
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	2340      	movs	r3, #64	; 0x40
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2302      	movs	r3, #2
 8000c18:	21a0      	movs	r1, #160	; 0xa0
 8000c1a:	480f      	ldr	r0, [pc, #60]	; (8000c58 <eeprom_save+0xe4>)
 8000c1c:	f7ff fad8 	bl	80001d0 <at24c256b_page_write>
	  if(i == 30) i = 0;
 8000c20:	89bb      	ldrh	r3, [r7, #12]
 8000c22:	2b1e      	cmp	r3, #30
 8000c24:	d101      	bne.n	8000c2a <eeprom_save+0xb6>
 8000c26:	2300      	movs	r3, #0
 8000c28:	81bb      	strh	r3, [r7, #12]
	    buffer.sum = i;
 8000c2a:	89bb      	ldrh	r3, [r7, #12]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <eeprom_save+0xdc>)
 8000c30:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	  vTaskDelay(100);
 8000c34:	2064      	movs	r0, #100	; 0x64
 8000c36:	f005 fe0d 	bl	8006854 <vTaskDelay>
//	  xEventGroupClearBits(buffer.xEventGroup1, 0x2);
	  myEventGroup.flag2 = 0;
 8000c3a:	4a03      	ldr	r2, [pc, #12]	; (8000c48 <eeprom_save+0xd4>)
 8000c3c:	7813      	ldrb	r3, [r2, #0]
 8000c3e:	f36f 0341 	bfc	r3, #1, #1
 8000c42:	7013      	strb	r3, [r2, #0]
	  while(myEventGroup.flag2 != 1)
 8000c44:	e7a2      	b.n	8000b8c <eeprom_save+0x18>
 8000c46:	bf00      	nop
 8000c48:	20000428 	.word	0x20000428
 8000c4c:	40012c00 	.word	0x40012c00
 8000c50:	200003d0 	.word	0x200003d0
 8000c54:	48000800 	.word	0x48000800
 8000c58:	20000324 	.word	0x20000324

08000c5c <path>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_path */
void path(void const * argument)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b098      	sub	sp, #96	; 0x60
 8000c60:	af04      	add	r7, sp, #16
 8000c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN path */
  /* Infinite loop */
  for(;;)
  {
	  while(myEventGroup.flag3 != 1)
 8000c64:	e002      	b.n	8000c6c <path+0x10>
	  {
		  vTaskDelay(15);
 8000c66:	200f      	movs	r0, #15
 8000c68:	f005 fdf4 	bl	8006854 <vTaskDelay>
	  while(myEventGroup.flag3 != 1)
 8000c6c:	4b64      	ldr	r3, [pc, #400]	; (8000e00 <path+0x1a4>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f5      	beq.n	8000c66 <path+0xa>
	  }
	  myEventGroup.flagBlockTaskServom = 1;
 8000c7a:	4a61      	ldr	r2, [pc, #388]	; (8000e00 <path+0x1a4>)
 8000c7c:	7813      	ldrb	r3, [r2, #0]
 8000c7e:	f043 0308 	orr.w	r3, r3, #8
 8000c82:	7013      	strb	r3, [r2, #0]
	  uint16_t data_fromEEPROM[30] = {0};
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	223c      	movs	r2, #60	; 0x3c
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f007 fb2f 	bl	80082f0 <memset>
	  uint16_t address = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  uint16_t npoints = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	  at24c256b_sequential_read(&hi2c1, I2C_ADDRESS_AT24C256B, (int8_t*)&npoints, 2, 64, GPIOC, GPIO_ODR_10);
 8000c9e:	f107 024a 	add.w	r2, r7, #74	; 0x4a
 8000ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca6:	9302      	str	r3, [sp, #8]
 8000ca8:	4b56      	ldr	r3, [pc, #344]	; (8000e04 <path+0x1a8>)
 8000caa:	9301      	str	r3, [sp, #4]
 8000cac:	2340      	movs	r3, #64	; 0x40
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	21a0      	movs	r1, #160	; 0xa0
 8000cb4:	4854      	ldr	r0, [pc, #336]	; (8000e08 <path+0x1ac>)
 8000cb6:	f7ff faab 	bl	8000210 <at24c256b_sequential_read>
	  for(uint8_t i = 0; i<(npoints/3); i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000cc0:	e082      	b.n	8000dc8 <path+0x16c>
	  {
		  at24c256b_sequential_read(&hi2c1, I2C_ADDRESS_AT24C256B, (int8_t*)&data_fromEEPROM[i*3], sizeof(data_fromEEPROM[i*3]), address, GPIOC, GPIO_ODR_10);
 8000cc2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	4413      	add	r3, r2
 8000ccc:	f107 020c 	add.w	r2, r7, #12
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	441a      	add	r2, r3
 8000cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd8:	9302      	str	r3, [sp, #8]
 8000cda:	4b4a      	ldr	r3, [pc, #296]	; (8000e04 <path+0x1a8>)
 8000cdc:	9301      	str	r3, [sp, #4]
 8000cde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	21a0      	movs	r1, #160	; 0xa0
 8000ce8:	4847      	ldr	r0, [pc, #284]	; (8000e08 <path+0x1ac>)
 8000cea:	f7ff fa91 	bl	8000210 <at24c256b_sequential_read>
		  address+=2;
 8000cee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		  TIM1->CCR1 = data_fromEEPROM[i*3];
 8000cf8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4413      	add	r3, r2
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	3350      	adds	r3, #80	; 0x50
 8000d06:	443b      	add	r3, r7
 8000d08:	f833 2c44 	ldrh.w	r2, [r3, #-68]
 8000d0c:	4b3f      	ldr	r3, [pc, #252]	; (8000e0c <path+0x1b0>)
 8000d0e:	635a      	str	r2, [r3, #52]	; 0x34
		  at24c256b_sequential_read(&hi2c1, I2C_ADDRESS_AT24C256B, (int8_t*)&data_fromEEPROM[i*3+1], sizeof(data_fromEEPROM[i*3]), address, GPIOC, GPIO_ODR_10);
 8000d10:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000d14:	4613      	mov	r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4413      	add	r3, r2
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	f107 020c 	add.w	r2, r7, #12
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	441a      	add	r2, r3
 8000d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <path+0x1a8>)
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2302      	movs	r3, #2
 8000d36:	21a0      	movs	r1, #160	; 0xa0
 8000d38:	4833      	ldr	r0, [pc, #204]	; (8000e08 <path+0x1ac>)
 8000d3a:	f7ff fa69 	bl	8000210 <at24c256b_sequential_read>
		  address+=2;
 8000d3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000d42:	3302      	adds	r3, #2
 8000d44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		  TIM1->CCR2 = data_fromEEPROM[i*3+1];
 8000d48:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	4413      	add	r3, r2
 8000d52:	3301      	adds	r3, #1
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	3350      	adds	r3, #80	; 0x50
 8000d58:	443b      	add	r3, r7
 8000d5a:	f833 2c44 	ldrh.w	r2, [r3, #-68]
 8000d5e:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <path+0x1b0>)
 8000d60:	639a      	str	r2, [r3, #56]	; 0x38
		  at24c256b_sequential_read(&hi2c1, I2C_ADDRESS_AT24C256B, (int8_t*)&data_fromEEPROM[i*3+2], sizeof(data_fromEEPROM[i*3]), address, GPIOC, GPIO_ODR_10);
 8000d62:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000d66:	4613      	mov	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	f107 020c 	add.w	r2, r7, #12
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	441a      	add	r2, r3
 8000d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7a:	9302      	str	r3, [sp, #8]
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <path+0x1a8>)
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2302      	movs	r3, #2
 8000d88:	21a0      	movs	r1, #160	; 0xa0
 8000d8a:	481f      	ldr	r0, [pc, #124]	; (8000e08 <path+0x1ac>)
 8000d8c:	f7ff fa40 	bl	8000210 <at24c256b_sequential_read>
		  address+=2;
 8000d90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000d94:	3302      	adds	r3, #2
 8000d96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		  TIM1->CCR3 = data_fromEEPROM[i*3+2];
 8000d9a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000d9e:	4613      	mov	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	3302      	adds	r3, #2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	3350      	adds	r3, #80	; 0x50
 8000daa:	443b      	add	r3, r7
 8000dac:	f833 2c44 	ldrh.w	r2, [r3, #-68]
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <path+0x1b0>)
 8000db2:	63da      	str	r2, [r3, #60]	; 0x3c
		  vTaskDelay(600);
 8000db4:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000db8:	f005 fd4c 	bl	8006854 <vTaskDelay>
		  __asm__ volatile("NOP");
 8000dbc:	bf00      	nop
	  for(uint8_t i = 0; i<(npoints/3); i++)
 8000dbe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000dc8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000dd2:	490f      	ldr	r1, [pc, #60]	; (8000e10 <path+0x1b4>)
 8000dd4:	fba1 1303 	umull	r1, r3, r1, r3
 8000dd8:	085b      	lsrs	r3, r3, #1
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f4ff af70 	bcc.w	8000cc2 <path+0x66>
	  }
	  vTaskDelay(100);
 8000de2:	2064      	movs	r0, #100	; 0x64
 8000de4:	f005 fd36 	bl	8006854 <vTaskDelay>
	  myEventGroup.flag3 = 0;
 8000de8:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <path+0x1a4>)
 8000dea:	7813      	ldrb	r3, [r2, #0]
 8000dec:	f36f 0382 	bfc	r3, #2, #1
 8000df0:	7013      	strb	r3, [r2, #0]
	  myEventGroup.flagBlockTaskServom = 0;
 8000df2:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <path+0x1a4>)
 8000df4:	7813      	ldrb	r3, [r2, #0]
 8000df6:	f36f 03c3 	bfc	r3, #3, #1
 8000dfa:	7013      	strb	r3, [r2, #0]
  {
 8000dfc:	e732      	b.n	8000c64 <path+0x8>
 8000dfe:	bf00      	nop
 8000e00:	20000428 	.word	0x20000428
 8000e04:	48000800 	.word	0x48000800
 8000e08:	20000324 	.word	0x20000324
 8000e0c:	40012c00 	.word	0x40012c00
 8000e10:	aaaaaaab 	.word	0xaaaaaaab

08000e14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e24:	d101      	bne.n	8000e2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e26:	f000 fa1b 	bl	8001260 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e36:	b672      	cpsid	i
}
 8000e38:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <Error_Handler+0x8>

08000e3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6193      	str	r3, [r2, #24]
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	61d3      	str	r3, [r2, #28]
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	210f      	movs	r1, #15
 8000e76:	f06f 0001 	mvn.w	r0, #1
 8000e7a:	f000 ff6b 	bl	8001d54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eac:	d13c      	bne.n	8000f28 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <HAL_ADC_MspInit+0xa4>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	4a1f      	ldr	r2, [pc, #124]	; (8000f30 <HAL_ADC_MspInit+0xa4>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	6153      	str	r3, [r2, #20]
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <HAL_ADC_MspInit+0xa4>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <HAL_ADC_MspInit+0xa4>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <HAL_ADC_MspInit+0xa4>)
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	6153      	str	r3, [r2, #20]
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_ADC_MspInit+0xa4>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_ADC_MspInit+0xa4>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <HAL_ADC_MspInit+0xa4>)
 8000ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee8:	6153      	str	r3, [r2, #20]
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_ADC_MspInit+0xa4>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA4     ------> ADC1_IN5
    PB0     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000ef6:	2313      	movs	r3, #19
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efa:	2303      	movs	r3, #3
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f000 ff4c 	bl	8001da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f10:	2301      	movs	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f14:	2303      	movs	r3, #3
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4804      	ldr	r0, [pc, #16]	; (8000f34 <HAL_ADC_MspInit+0xa8>)
 8000f24:	f000 ff40 	bl	8001da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48000400 	.word	0x48000400

08000f38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_I2C_MspInit+0x7c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d128      	bne.n	8000fac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_I2C_MspInit+0x80>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <HAL_I2C_MspInit+0x80>)
 8000f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f64:	6153      	str	r3, [r2, #20]
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_I2C_MspInit+0x80>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f78:	2312      	movs	r3, #18
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f84:	2304      	movs	r3, #4
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480b      	ldr	r0, [pc, #44]	; (8000fbc <HAL_I2C_MspInit+0x84>)
 8000f90:	f000 ff0a 	bl	8001da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_I2C_MspInit+0x80>)
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_I2C_MspInit+0x80>)
 8000f9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9e:	61d3      	str	r3, [r2, #28]
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_I2C_MspInit+0x80>)
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40005400 	.word	0x40005400
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000400 	.word	0x48000400

08000fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_TIM_Base_MspInit+0x38>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d10b      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_TIM_Base_MspInit+0x3c>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <HAL_TIM_Base_MspInit+0x3c>)
 8000fd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fdc:	6193      	str	r3, [r2, #24]
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_TIM_Base_MspInit+0x3c>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40012c00 	.word	0x40012c00
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a11      	ldr	r2, [pc, #68]	; (8001064 <HAL_TIM_MspPostInit+0x64>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d11b      	bne.n	800105a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_TIM_MspPostInit+0x68>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	4a10      	ldr	r2, [pc, #64]	; (8001068 <HAL_TIM_MspPostInit+0x68>)
 8001028:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800102c:	6153      	str	r3, [r2, #20]
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_TIM_MspPostInit+0x68>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800103a:	230f      	movs	r3, #15
 800103c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800104a:	2302      	movs	r3, #2
 800104c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <HAL_TIM_MspPostInit+0x6c>)
 8001056:	f000 fea7 	bl	8001da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	3720      	adds	r7, #32
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40012c00 	.word	0x40012c00
 8001068:	40021000 	.word	0x40021000
 800106c:	48000800 	.word	0x48000800

08001070 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08e      	sub	sp, #56	; 0x38
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001080:	4b34      	ldr	r3, [pc, #208]	; (8001154 <HAL_InitTick+0xe4>)
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	4a33      	ldr	r2, [pc, #204]	; (8001154 <HAL_InitTick+0xe4>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	61d3      	str	r3, [r2, #28]
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <HAL_InitTick+0xe4>)
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001098:	f107 0210 	add.w	r2, r7, #16
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 f882 	bl	80041ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d103      	bne.n	80010ba <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010b2:	f003 f859 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 80010b6:	6378      	str	r0, [r7, #52]	; 0x34
 80010b8:	e004      	b.n	80010c4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010ba:	f003 f855 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 80010be:	4603      	mov	r3, r0
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c6:	4a24      	ldr	r2, [pc, #144]	; (8001158 <HAL_InitTick+0xe8>)
 80010c8:	fba2 2303 	umull	r2, r3, r2, r3
 80010cc:	0c9b      	lsrs	r3, r3, #18
 80010ce:	3b01      	subs	r3, #1
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <HAL_InitTick+0xec>)
 80010d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80010da:	4b20      	ldr	r3, [pc, #128]	; (800115c <HAL_InitTick+0xec>)
 80010dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010e0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80010e2:	4a1e      	ldr	r2, [pc, #120]	; (800115c <HAL_InitTick+0xec>)
 80010e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <HAL_InitTick+0xec>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_InitTick+0xec>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <HAL_InitTick+0xec>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80010fa:	4818      	ldr	r0, [pc, #96]	; (800115c <HAL_InitTick+0xec>)
 80010fc:	f003 fa1a 	bl	8004534 <HAL_TIM_Base_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001106:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800110a:	2b00      	cmp	r3, #0
 800110c:	d11b      	bne.n	8001146 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800110e:	4813      	ldr	r0, [pc, #76]	; (800115c <HAL_InitTick+0xec>)
 8001110:	f003 fa68 	bl	80045e4 <HAL_TIM_Base_Start_IT>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800111a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800111e:	2b00      	cmp	r3, #0
 8001120:	d111      	bne.n	8001146 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001122:	201c      	movs	r0, #28
 8001124:	f000 fe32 	bl	8001d8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b0f      	cmp	r3, #15
 800112c:	d808      	bhi.n	8001140 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800112e:	2200      	movs	r2, #0
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	201c      	movs	r0, #28
 8001134:	f000 fe0e 	bl	8001d54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001138:	4a09      	ldr	r2, [pc, #36]	; (8001160 <HAL_InitTick+0xf0>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e002      	b.n	8001146 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001146:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800114a:	4618      	mov	r0, r3
 800114c:	3738      	adds	r7, #56	; 0x38
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000
 8001158:	431bde83 	.word	0x431bde83
 800115c:	2000042c 	.word	0x2000042c
 8001160:	20000004 	.word	0x20000004

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <NMI_Handler+0x4>

0800116a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <HardFault_Handler+0x4>

08001170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <MemManage_Handler+0x4>

08001176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <UsageFault_Handler+0x4>

08001182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <TIM2_IRQHandler+0x10>)
 8001196:	f003 fbc1 	bl	800491c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000042c 	.word	0x2000042c

080011a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80011a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80011ac:	f000 ff86 	bl	80020bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011b4:	f000 ff82 	bl	80020bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <SystemInit+0x20>)
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <SystemInit+0x20>)
 80011c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001218 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e4:	f7ff ffea 	bl	80011bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <LoopForever+0x6>)
  ldr r1, =_edata
 80011ea:	490d      	ldr	r1, [pc, #52]	; (8001220 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <LoopForever+0xe>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f0:	e002      	b.n	80011f8 <LoopCopyDataInit>

080011f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f6:	3304      	adds	r3, #4

080011f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011fc:	d3f9      	bcc.n	80011f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001200:	4c0a      	ldr	r4, [pc, #40]	; (800122c <LoopForever+0x16>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001204:	e001      	b.n	800120a <LoopFillZerobss>

08001206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001208:	3204      	adds	r2, #4

0800120a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800120c:	d3fb      	bcc.n	8001206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120e:	f007 f83d 	bl	800828c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001212:	f7ff f877 	bl	8000304 <main>

08001216 <LoopForever>:

LoopForever:
    b LoopForever
 8001216:	e7fe      	b.n	8001216 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001218:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001224:	080083ec 	.word	0x080083ec
  ldr r2, =_sbss
 8001228:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800122c:	200025e4 	.word	0x200025e4

08001230 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC1_IRQHandler>
	...

08001234 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x28>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x28>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 fd7a 	bl	8001d3e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	2001      	movs	r0, #1
 800124c:	f7ff ff10 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fdf4 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40022000 	.word	0x40022000

08001260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_IncTick+0x20>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x24>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <HAL_IncTick+0x24>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008
 8001284:	20000478 	.word	0x20000478

08001288 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;  
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <HAL_GetTick+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000478 	.word	0x20000478

080012a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b09a      	sub	sp, #104	; 0x68
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e169      	b.n	8001594 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d176      	bne.n	80013c0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d152      	bne.n	8001380 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fdc9 	bl	8000e8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d13b      	bne.n	8001380 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 fc05 	bl	8001b18 <ADC_Disable>
 800130e:	4603      	mov	r3, r0
 8001310:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	f003 0310 	and.w	r3, r3, #16
 800131c:	2b00      	cmp	r3, #0
 800131e:	d12f      	bne.n	8001380 <HAL_ADC_Init+0xe0>
 8001320:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001324:	2b00      	cmp	r3, #0
 8001326:	d12b      	bne.n	8001380 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001330:	f023 0302 	bic.w	r3, r3, #2
 8001334:	f043 0202 	orr.w	r2, r3, #2
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800134a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800135a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800135c:	4b8f      	ldr	r3, [pc, #572]	; (800159c <HAL_ADC_Init+0x2fc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a8f      	ldr	r2, [pc, #572]	; (80015a0 <HAL_ADC_Init+0x300>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	0c9a      	lsrs	r2, r3, #18
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001372:	e002      	b.n	800137a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	3b01      	subs	r3, #1
 8001378:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f9      	bne.n	8001374 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d007      	beq.n	800139e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800139c:	d110      	bne.n	80013c0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f023 0312 	bic.w	r3, r3, #18
 80013a6:	f043 0210 	orr.w	r2, r3, #16
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f043 0201 	orr.w	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f040 80d6 	bne.w	800157a <HAL_ADC_Init+0x2da>
 80013ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f040 80d1 	bne.w	800157a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f040 80c9 	bne.w	800157a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013f0:	f043 0202 	orr.w	r2, r3, #2
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f8:	4b6a      	ldr	r3, [pc, #424]	; (80015a4 <HAL_ADC_Init+0x304>)
 80013fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b01      	cmp	r3, #1
 800140c:	d108      	bne.n	8001420 <HAL_ADC_Init+0x180>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b01      	cmp	r3, #1
 800141a:	d101      	bne.n	8001420 <HAL_ADC_Init+0x180>
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <HAL_ADC_Init+0x182>
 8001420:	2300      	movs	r3, #0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d11c      	bne.n	8001460 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001426:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001428:	2b00      	cmp	r3, #0
 800142a:	d010      	beq.n	800144e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d107      	bne.n	8001448 <HAL_ADC_Init+0x1a8>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_ADC_Init+0x1a8>
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <HAL_ADC_Init+0x1aa>
 8001448:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800144a:	2b00      	cmp	r3, #0
 800144c:	d108      	bne.n	8001460 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800144e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	431a      	orrs	r2, r3
 800145c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800145e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7e5b      	ldrb	r3, [r3, #25]
 8001464:	035b      	lsls	r3, r3, #13
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800146a:	2a01      	cmp	r2, #1
 800146c:	d002      	beq.n	8001474 <HAL_ADC_Init+0x1d4>
 800146e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001472:	e000      	b.n	8001476 <HAL_ADC_Init+0x1d6>
 8001474:	2200      	movs	r2, #0
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	4313      	orrs	r3, r2
 8001484:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001486:	4313      	orrs	r3, r2
 8001488:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d11b      	bne.n	80014cc <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7e5b      	ldrb	r3, [r3, #25]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d109      	bne.n	80014b0 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	3b01      	subs	r3, #1
 80014a2:	045a      	lsls	r2, r3, #17
 80014a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014a6:	4313      	orrs	r3, r2
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ac:	663b      	str	r3, [r7, #96]	; 0x60
 80014ae:	e00d      	b.n	80014cc <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80014b8:	f043 0220 	orr.w	r2, r3, #32
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	f043 0201 	orr.w	r2, r3, #1
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d007      	beq.n	80014e4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	4313      	orrs	r3, r2
 80014de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014e0:	4313      	orrs	r3, r2
 80014e2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d114      	bne.n	800151c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001500:	f023 0302 	bic.w	r3, r3, #2
 8001504:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7e1b      	ldrb	r3, [r3, #24]
 800150a:	039a      	lsls	r2, r3, #14
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4313      	orrs	r3, r2
 8001516:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001518:	4313      	orrs	r3, r2
 800151a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <HAL_ADC_Init+0x308>)
 8001524:	4013      	ands	r3, r2
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800152c:	430b      	orrs	r3, r1
 800152e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d10c      	bne.n	8001552 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f023 010f 	bic.w	r1, r3, #15
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	1e5a      	subs	r2, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	631a      	str	r2, [r3, #48]	; 0x30
 8001550:	e007      	b.n	8001562 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 020f 	bic.w	r2, r2, #15
 8001560:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f023 0303 	bic.w	r3, r3, #3
 8001570:	f043 0201 	orr.w	r2, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	641a      	str	r2, [r3, #64]	; 0x40
 8001578:	e00a      	b.n	8001590 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f023 0312 	bic.w	r3, r3, #18
 8001582:	f043 0210 	orr.w	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800158a:	2301      	movs	r3, #1
 800158c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001590:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001594:	4618      	mov	r0, r3
 8001596:	3768      	adds	r7, #104	; 0x68
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000000 	.word	0x20000000
 80015a0:	431bde83 	.word	0x431bde83
 80015a4:	50000300 	.word	0x50000300
 80015a8:	fff0c007 	.word	0xfff0c007

080015ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b09b      	sub	sp, #108	; 0x6c
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x22>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e299      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x556>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f040 827d 	bne.w	8001ae0 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d81c      	bhi.n	8001628 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	461a      	mov	r2, r3
 8001602:	231f      	movs	r3, #31
 8001604:	4093      	lsls	r3, r2
 8001606:	43db      	mvns	r3, r3
 8001608:	4019      	ands	r1, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa00 f203 	lsl.w	r2, r0, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
 8001626:	e063      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b09      	cmp	r3, #9
 800162e:	d81e      	bhi.n	800166e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	3b1e      	subs	r3, #30
 8001644:	221f      	movs	r2, #31
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	4019      	ands	r1, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	3b1e      	subs	r3, #30
 8001660:	fa00 f203 	lsl.w	r2, r0, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	635a      	str	r2, [r3, #52]	; 0x34
 800166c:	e040      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b0e      	cmp	r3, #14
 8001674:	d81e      	bhi.n	80016b4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	3b3c      	subs	r3, #60	; 0x3c
 800168a:	221f      	movs	r2, #31
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	4019      	ands	r1, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	3b3c      	subs	r3, #60	; 0x3c
 80016a6:	fa00 f203 	lsl.w	r2, r0, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38
 80016b2:	e01d      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	3b5a      	subs	r3, #90	; 0x5a
 80016c8:	221f      	movs	r2, #31
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	4019      	ands	r1, r3
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	3b5a      	subs	r3, #90	; 0x5a
 80016e4:	fa00 f203 	lsl.w	r2, r0, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f040 80e5 	bne.w	80018ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b09      	cmp	r3, #9
 8001706:	d91c      	bls.n	8001742 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6999      	ldr	r1, [r3, #24]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	3b1e      	subs	r3, #30
 800171a:	2207      	movs	r2, #7
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	4019      	ands	r1, r3
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	6898      	ldr	r0, [r3, #8]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	3b1e      	subs	r3, #30
 8001734:	fa00 f203 	lsl.w	r2, r0, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	619a      	str	r2, [r3, #24]
 8001740:	e019      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6959      	ldr	r1, [r3, #20]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	2207      	movs	r2, #7
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	4019      	ands	r1, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	6898      	ldr	r0, [r3, #8]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	fa00 f203 	lsl.w	r2, r0, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	695a      	ldr	r2, [r3, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	08db      	lsrs	r3, r3, #3
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	3b01      	subs	r3, #1
 8001794:	2b03      	cmp	r3, #3
 8001796:	d84f      	bhi.n	8001838 <HAL_ADC_ConfigChannel+0x28c>
 8001798:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <HAL_ADC_ConfigChannel+0x1f4>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	080017b1 	.word	0x080017b1
 80017a4:	080017d3 	.word	0x080017d3
 80017a8:	080017f5 	.word	0x080017f5
 80017ac:	08001817 	.word	0x08001817
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017b6:	4b99      	ldr	r3, [pc, #612]	; (8001a1c <HAL_ADC_ConfigChannel+0x470>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	0691      	lsls	r1, r2, #26
 80017c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017c2:	430a      	orrs	r2, r1
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ce:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017d0:	e07e      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017d8:	4b90      	ldr	r3, [pc, #576]	; (8001a1c <HAL_ADC_ConfigChannel+0x470>)
 80017da:	4013      	ands	r3, r2
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	0691      	lsls	r1, r2, #26
 80017e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017e4:	430a      	orrs	r2, r1
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017f0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017f2:	e06d      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017fa:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <HAL_ADC_ConfigChannel+0x470>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	0691      	lsls	r1, r2, #26
 8001804:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001806:	430a      	orrs	r2, r1
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001812:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001814:	e05c      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800181c:	4b7f      	ldr	r3, [pc, #508]	; (8001a1c <HAL_ADC_ConfigChannel+0x470>)
 800181e:	4013      	ands	r3, r2
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	0691      	lsls	r1, r2, #26
 8001826:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001828:	430a      	orrs	r2, r1
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001834:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001836:	e04b      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	069b      	lsls	r3, r3, #26
 8001848:	429a      	cmp	r2, r3
 800184a:	d107      	bne.n	800185c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800185a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001862:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	069b      	lsls	r3, r3, #26
 800186c:	429a      	cmp	r2, r3
 800186e:	d107      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800187e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001886:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	069b      	lsls	r3, r3, #26
 8001890:	429a      	cmp	r2, r3
 8001892:	d107      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018a2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	069b      	lsls	r3, r3, #26
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d10a      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018c6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80018c8:	e001      	b.n	80018ce <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80018ca:	bf00      	nop
 80018cc:	e000      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80018ce:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d108      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x344>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x344>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x346>
 80018f0:	2300      	movs	r3, #0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 80ff 	bne.w	8001af6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d00f      	beq.n	8001920 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2201      	movs	r2, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	400a      	ands	r2, r1
 800191a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800191e:	e049      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2201      	movs	r2, #1
 800192e:	409a      	lsls	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b09      	cmp	r3, #9
 8001940:	d91c      	bls.n	800197c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6999      	ldr	r1, [r3, #24]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	3b1b      	subs	r3, #27
 8001954:	2207      	movs	r2, #7
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	4019      	ands	r1, r3
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	6898      	ldr	r0, [r3, #8]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	3b1b      	subs	r3, #27
 800196e:	fa00 f203 	lsl.w	r2, r0, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	619a      	str	r2, [r3, #24]
 800197a:	e01b      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6959      	ldr	r1, [r3, #20]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	2207      	movs	r2, #7
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	4019      	ands	r1, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6898      	ldr	r0, [r3, #8]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	1c5a      	adds	r2, r3, #1
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <HAL_ADC_ConfigChannel+0x474>)
 80019b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b10      	cmp	r3, #16
 80019be:	d105      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d014      	beq.n	80019f6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019d0:	2b11      	cmp	r3, #17
 80019d2:	d105      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00a      	beq.n	80019f6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019e4:	2b12      	cmp	r3, #18
 80019e6:	f040 8086 	bne.w	8001af6 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80019ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d17f      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d10d      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x478>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d106      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x478>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e005      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x47a>
 8001a1a:	bf00      	nop
 8001a1c:	83fff000 	.word	0x83fff000
 8001a20:	50000300 	.word	0x50000300
 8001a24:	2300      	movs	r3, #0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d150      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a2a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d010      	beq.n	8001a52 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d107      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x4a0>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x4a0>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x4a2>
 8001a4c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d13c      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d11d      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x4ea>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a62:	d118      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a6e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_ADC_ConfigChannel+0x564>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <HAL_ADC_ConfigChannel+0x568>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0c9a      	lsrs	r2, r3, #18
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a86:	e002      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f9      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a94:	e02e      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b11      	cmp	r3, #17
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x50a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aa6:	d106      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ab2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ab4:	e01e      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b12      	cmp	r3, #18
 8001abc:	d11a      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aca:	e013      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f043 0220 	orr.w	r2, r3, #32
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ade:	e00a      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	f043 0220 	orr.w	r2, r3, #32
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001af2:	e000      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001af4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001afe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	376c      	adds	r7, #108	; 0x6c
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000000 	.word	0x20000000
 8001b14:	431bde83 	.word	0x431bde83

08001b18 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d108      	bne.n	8001b44 <ADC_Disable+0x2c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <ADC_Disable+0x2c>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <ADC_Disable+0x2e>
 8001b44:	2300      	movs	r3, #0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d047      	beq.n	8001bda <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 030d 	and.w	r3, r3, #13
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d10f      	bne.n	8001b78 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0202 	orr.w	r2, r2, #2
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b70:	f7ff fb8a 	bl	8001288 <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b76:	e029      	b.n	8001bcc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f043 0210 	orr.w	r2, r3, #16
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e023      	b.n	8001bdc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b94:	f7ff fb78 	bl	8001288 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d914      	bls.n	8001bcc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d10d      	bne.n	8001bcc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f043 0210 	orr.w	r2, r3, #16
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc0:	f043 0201 	orr.w	r2, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e007      	b.n	8001bdc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d0dc      	beq.n	8001b94 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c00:	4013      	ands	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c16:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	60d3      	str	r3, [r2, #12]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <__NVIC_GetPriorityGrouping+0x18>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	f003 0307 	and.w	r3, r3, #7
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db0b      	blt.n	8001c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	4907      	ldr	r1, [pc, #28]	; (8001c80 <__NVIC_EnableIRQ+0x38>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	2001      	movs	r0, #1
 8001c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	; (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
         );
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ff4c 	bl	8001be4 <__NVIC_SetPriorityGrouping>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d66:	f7ff ff61 	bl	8001c2c <__NVIC_GetPriorityGrouping>
 8001d6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	6978      	ldr	r0, [r7, #20]
 8001d72:	f7ff ffb1 	bl	8001cd8 <NVIC_EncodePriority>
 8001d76:	4602      	mov	r2, r0
 8001d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff80 	bl	8001c84 <__NVIC_SetPriority>
}
 8001d84:	bf00      	nop
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ff54 	bl	8001c48 <__NVIC_EnableIRQ>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db6:	e14e      	b.n	8002056 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8140 	beq.w	8002050 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d005      	beq.n	8001de8 <HAL_GPIO_Init+0x40>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d130      	bne.n	8001e4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e1e:	2201      	movs	r2, #1
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	091b      	lsrs	r3, r3, #4
 8001e34:	f003 0201 	and.w	r2, r3, #1
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d017      	beq.n	8001e86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d123      	bne.n	8001eda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	08da      	lsrs	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3208      	adds	r2, #8
 8001e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	08da      	lsrs	r2, r3, #3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3208      	adds	r2, #8
 8001ed4:	6939      	ldr	r1, [r7, #16]
 8001ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0203 	and.w	r2, r3, #3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 809a 	beq.w	8002050 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1c:	4b55      	ldr	r3, [pc, #340]	; (8002074 <HAL_GPIO_Init+0x2cc>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a54      	ldr	r2, [pc, #336]	; (8002074 <HAL_GPIO_Init+0x2cc>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6193      	str	r3, [r2, #24]
 8001f28:	4b52      	ldr	r3, [pc, #328]	; (8002074 <HAL_GPIO_Init+0x2cc>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f34:	4a50      	ldr	r2, [pc, #320]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f5e:	d013      	beq.n	8001f88 <HAL_GPIO_Init+0x1e0>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a46      	ldr	r2, [pc, #280]	; (800207c <HAL_GPIO_Init+0x2d4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00d      	beq.n	8001f84 <HAL_GPIO_Init+0x1dc>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a45      	ldr	r2, [pc, #276]	; (8002080 <HAL_GPIO_Init+0x2d8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <HAL_GPIO_Init+0x1d8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a44      	ldr	r2, [pc, #272]	; (8002084 <HAL_GPIO_Init+0x2dc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_GPIO_Init+0x1d4>
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e006      	b.n	8001f8a <HAL_GPIO_Init+0x1e2>
 8001f7c:	2305      	movs	r3, #5
 8001f7e:	e004      	b.n	8001f8a <HAL_GPIO_Init+0x1e2>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e002      	b.n	8001f8a <HAL_GPIO_Init+0x1e2>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <HAL_GPIO_Init+0x1e2>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	f002 0203 	and.w	r2, r2, #3
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	4093      	lsls	r3, r2
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f9a:	4937      	ldr	r1, [pc, #220]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa8:	4b37      	ldr	r3, [pc, #220]	; (8002088 <HAL_GPIO_Init+0x2e0>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fcc:	4a2e      	ldr	r2, [pc, #184]	; (8002088 <HAL_GPIO_Init+0x2e0>)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd2:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <HAL_GPIO_Init+0x2e0>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ff6:	4a24      	ldr	r2, [pc, #144]	; (8002088 <HAL_GPIO_Init+0x2e0>)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ffc:	4b22      	ldr	r3, [pc, #136]	; (8002088 <HAL_GPIO_Init+0x2e0>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <HAL_GPIO_Init+0x2e0>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_GPIO_Init+0x2e0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800204a:	4a0f      	ldr	r2, [pc, #60]	; (8002088 <HAL_GPIO_Init+0x2e0>)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3301      	adds	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	f47f aea9 	bne.w	8001db8 <HAL_GPIO_Init+0x10>
  }
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	40021000 	.word	0x40021000
 8002078:	40010000 	.word	0x40010000
 800207c:	48000400 	.word	0x48000400
 8002080:	48000800 	.word	0x48000800
 8002084:	48000c00 	.word	0x48000c00
 8002088:	40010400 	.word	0x40010400

0800208c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
 8002098:	4613      	mov	r3, r2
 800209a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800209c:	787b      	ldrb	r3, [r7, #1]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020a8:	e002      	b.n	80020b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d006      	beq.n	80020e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fca4 	bl	8000a28 <HAL_GPIO_EXTI_Callback>
  }
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40010400 	.word	0x40010400

080020ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e081      	b.n	8002202 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d106      	bne.n	8002118 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe ff10 	bl	8000f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2224      	movs	r2, #36	; 0x24
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800213c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800214c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d107      	bne.n	8002166 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	e006      	b.n	8002174 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002172:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d104      	bne.n	8002186 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002184:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002198:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69d9      	ldr	r1, [r3, #28]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1a      	ldr	r2, [r3, #32]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af02      	add	r7, sp, #8
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	4608      	mov	r0, r1
 8002216:	4611      	mov	r1, r2
 8002218:	461a      	mov	r2, r3
 800221a:	4603      	mov	r3, r0
 800221c:	817b      	strh	r3, [r7, #10]
 800221e:	460b      	mov	r3, r1
 8002220:	813b      	strh	r3, [r7, #8]
 8002222:	4613      	mov	r3, r2
 8002224:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b20      	cmp	r3, #32
 8002230:	f040 80f9 	bne.w	8002426 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <HAL_I2C_Mem_Write+0x34>
 800223a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800223c:	2b00      	cmp	r3, #0
 800223e:	d105      	bne.n	800224c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002246:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0ed      	b.n	8002428 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_I2C_Mem_Write+0x4e>
 8002256:	2302      	movs	r3, #2
 8002258:	e0e6      	b.n	8002428 <HAL_I2C_Mem_Write+0x21c>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002262:	f7ff f811 	bl	8001288 <HAL_GetTick>
 8002266:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2319      	movs	r3, #25
 800226e:	2201      	movs	r2, #1
 8002270:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 fac3 	bl	8002800 <I2C_WaitOnFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0d1      	b.n	8002428 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2221      	movs	r2, #33	; 0x21
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2240      	movs	r2, #64	; 0x40
 8002290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a3a      	ldr	r2, [r7, #32]
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022ac:	88f8      	ldrh	r0, [r7, #6]
 80022ae:	893a      	ldrh	r2, [r7, #8]
 80022b0:	8979      	ldrh	r1, [r7, #10]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	4603      	mov	r3, r0
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f9d3 	bl	8002668 <I2C_RequestMemoryWrite>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0a9      	b.n	8002428 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2bff      	cmp	r3, #255	; 0xff
 80022dc:	d90e      	bls.n	80022fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	22ff      	movs	r2, #255	; 0xff
 80022e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	8979      	ldrh	r1, [r7, #10]
 80022ec:	2300      	movs	r3, #0
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 fc3d 	bl	8002b74 <I2C_TransferConfig>
 80022fa:	e00f      	b.n	800231c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	b2da      	uxtb	r2, r3
 800230c:	8979      	ldrh	r1, [r7, #10]
 800230e:	2300      	movs	r3, #0
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fc2c 	bl	8002b74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fabc 	bl	800289e <I2C_WaitOnTXISFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e07b      	b.n	8002428 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	781a      	ldrb	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d034      	beq.n	80023d4 <HAL_I2C_Mem_Write+0x1c8>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236e:	2b00      	cmp	r3, #0
 8002370:	d130      	bne.n	80023d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002378:	2200      	movs	r2, #0
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 fa3f 	bl	8002800 <I2C_WaitOnFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e04d      	b.n	8002428 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	2bff      	cmp	r3, #255	; 0xff
 8002394:	d90e      	bls.n	80023b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	22ff      	movs	r2, #255	; 0xff
 800239a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	8979      	ldrh	r1, [r7, #10]
 80023a4:	2300      	movs	r3, #0
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 fbe1 	bl	8002b74 <I2C_TransferConfig>
 80023b2:	e00f      	b.n	80023d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	8979      	ldrh	r1, [r7, #10]
 80023c6:	2300      	movs	r3, #0
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 fbd0 	bl	8002b74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d19e      	bne.n	800231c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 faa2 	bl	800292c <I2C_WaitOnSTOPFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e01a      	b.n	8002428 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2220      	movs	r2, #32
 80023f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6859      	ldr	r1, [r3, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_I2C_Mem_Write+0x224>)
 8002406:	400b      	ands	r3, r1
 8002408:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	e000      	b.n	8002428 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002426:	2302      	movs	r3, #2
  }
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	fe00e800 	.word	0xfe00e800

08002434 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	4608      	mov	r0, r1
 800243e:	4611      	mov	r1, r2
 8002440:	461a      	mov	r2, r3
 8002442:	4603      	mov	r3, r0
 8002444:	817b      	strh	r3, [r7, #10]
 8002446:	460b      	mov	r3, r1
 8002448:	813b      	strh	r3, [r7, #8]
 800244a:	4613      	mov	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b20      	cmp	r3, #32
 8002458:	f040 80fd 	bne.w	8002656 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <HAL_I2C_Mem_Read+0x34>
 8002462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0f1      	b.n	8002658 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_I2C_Mem_Read+0x4e>
 800247e:	2302      	movs	r3, #2
 8002480:	e0ea      	b.n	8002658 <HAL_I2C_Mem_Read+0x224>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800248a:	f7fe fefd 	bl	8001288 <HAL_GetTick>
 800248e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2319      	movs	r3, #25
 8002496:	2201      	movs	r2, #1
 8002498:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 f9af 	bl	8002800 <I2C_WaitOnFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0d5      	b.n	8002658 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2222      	movs	r2, #34	; 0x22
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2240      	movs	r2, #64	; 0x40
 80024b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a3a      	ldr	r2, [r7, #32]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024d4:	88f8      	ldrh	r0, [r7, #6]
 80024d6:	893a      	ldrh	r2, [r7, #8]
 80024d8:	8979      	ldrh	r1, [r7, #10]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	4603      	mov	r3, r0
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f913 	bl	8002710 <I2C_RequestMemoryRead>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0ad      	b.n	8002658 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002500:	b29b      	uxth	r3, r3
 8002502:	2bff      	cmp	r3, #255	; 0xff
 8002504:	d90e      	bls.n	8002524 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	22ff      	movs	r2, #255	; 0xff
 800250a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002510:	b2da      	uxtb	r2, r3
 8002512:	8979      	ldrh	r1, [r7, #10]
 8002514:	4b52      	ldr	r3, [pc, #328]	; (8002660 <HAL_I2C_Mem_Read+0x22c>)
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 fb29 	bl	8002b74 <I2C_TransferConfig>
 8002522:	e00f      	b.n	8002544 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002532:	b2da      	uxtb	r2, r3
 8002534:	8979      	ldrh	r1, [r7, #10]
 8002536:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <HAL_I2C_Mem_Read+0x22c>)
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fb18 	bl	8002b74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	2200      	movs	r2, #0
 800254c:	2104      	movs	r1, #4
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f956 	bl	8002800 <I2C_WaitOnFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e07c      	b.n	8002658 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d034      	beq.n	8002604 <HAL_I2C_Mem_Read+0x1d0>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d130      	bne.n	8002604 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	2200      	movs	r2, #0
 80025aa:	2180      	movs	r1, #128	; 0x80
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f927 	bl	8002800 <I2C_WaitOnFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e04d      	b.n	8002658 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2bff      	cmp	r3, #255	; 0xff
 80025c4:	d90e      	bls.n	80025e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	22ff      	movs	r2, #255	; 0xff
 80025ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	8979      	ldrh	r1, [r7, #10]
 80025d4:	2300      	movs	r3, #0
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fac9 	bl	8002b74 <I2C_TransferConfig>
 80025e2:	e00f      	b.n	8002604 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	8979      	ldrh	r1, [r7, #10]
 80025f6:	2300      	movs	r3, #0
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fab8 	bl	8002b74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d19a      	bne.n	8002544 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f98a 	bl	800292c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e01a      	b.n	8002658 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2220      	movs	r2, #32
 8002628:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_I2C_Mem_Read+0x230>)
 8002636:	400b      	ands	r3, r1
 8002638:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	e000      	b.n	8002658 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002656:	2302      	movs	r3, #2
  }
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	80002400 	.word	0x80002400
 8002664:	fe00e800 	.word	0xfe00e800

08002668 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af02      	add	r7, sp, #8
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	4608      	mov	r0, r1
 8002672:	4611      	mov	r1, r2
 8002674:	461a      	mov	r2, r3
 8002676:	4603      	mov	r3, r0
 8002678:	817b      	strh	r3, [r7, #10]
 800267a:	460b      	mov	r3, r1
 800267c:	813b      	strh	r3, [r7, #8]
 800267e:	4613      	mov	r3, r2
 8002680:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	8979      	ldrh	r1, [r7, #10]
 8002688:	4b20      	ldr	r3, [pc, #128]	; (800270c <I2C_RequestMemoryWrite+0xa4>)
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fa6f 	bl	8002b74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	69b9      	ldr	r1, [r7, #24]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f8ff 	bl	800289e <I2C_WaitOnTXISFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e02c      	b.n	8002704 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d105      	bne.n	80026bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026b0:	893b      	ldrh	r3, [r7, #8]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	629a      	str	r2, [r3, #40]	; 0x28
 80026ba:	e015      	b.n	80026e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80026bc:	893b      	ldrh	r3, [r7, #8]
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	69b9      	ldr	r1, [r7, #24]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f8e5 	bl	800289e <I2C_WaitOnTXISFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e012      	b.n	8002704 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026de:	893b      	ldrh	r3, [r7, #8]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2200      	movs	r2, #0
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f884 	bl	8002800 <I2C_WaitOnFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	80002000 	.word	0x80002000

08002710 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	461a      	mov	r2, r3
 800271e:	4603      	mov	r3, r0
 8002720:	817b      	strh	r3, [r7, #10]
 8002722:	460b      	mov	r3, r1
 8002724:	813b      	strh	r3, [r7, #8]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	8979      	ldrh	r1, [r7, #10]
 8002730:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <I2C_RequestMemoryRead+0xa4>)
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2300      	movs	r3, #0
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fa1c 	bl	8002b74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	69b9      	ldr	r1, [r7, #24]
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 f8ac 	bl	800289e <I2C_WaitOnTXISFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e02c      	b.n	80027aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d105      	bne.n	8002762 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002756:	893b      	ldrh	r3, [r7, #8]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	629a      	str	r2, [r3, #40]	; 0x28
 8002760:	e015      	b.n	800278e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002762:	893b      	ldrh	r3, [r7, #8]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	b29b      	uxth	r3, r3
 8002768:	b2da      	uxtb	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	69b9      	ldr	r1, [r7, #24]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f892 	bl	800289e <I2C_WaitOnTXISFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e012      	b.n	80027aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002784:	893b      	ldrh	r3, [r7, #8]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	2200      	movs	r2, #0
 8002796:	2140      	movs	r1, #64	; 0x40
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f831 	bl	8002800 <I2C_WaitOnFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	80002000 	.word	0x80002000

080027b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d103      	bne.n	80027d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2200      	movs	r2, #0
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d007      	beq.n	80027f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	619a      	str	r2, [r3, #24]
  }
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	4613      	mov	r3, r2
 800280e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002810:	e031      	b.n	8002876 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002818:	d02d      	beq.n	8002876 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281a:	f7fe fd35 	bl	8001288 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d302      	bcc.n	8002830 <I2C_WaitOnFlagUntilTimeout+0x30>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d122      	bne.n	8002876 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	4013      	ands	r3, r2
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	429a      	cmp	r2, r3
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	429a      	cmp	r2, r3
 800284c:	d113      	bne.n	8002876 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	f043 0220 	orr.w	r2, r3, #32
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e00f      	b.n	8002896 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4013      	ands	r3, r2
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	429a      	cmp	r2, r3
 8002884:	bf0c      	ite	eq
 8002886:	2301      	moveq	r3, #1
 8002888:	2300      	movne	r3, #0
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	429a      	cmp	r2, r3
 8002892:	d0be      	beq.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028aa:	e033      	b.n	8002914 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f87f 	bl	80029b4 <I2C_IsErrorOccurred>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e031      	b.n	8002924 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c6:	d025      	beq.n	8002914 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c8:	f7fe fcde 	bl	8001288 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d302      	bcc.n	80028de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d11a      	bne.n	8002914 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d013      	beq.n	8002914 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e007      	b.n	8002924 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b02      	cmp	r3, #2
 8002920:	d1c4      	bne.n	80028ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002938:	e02f      	b.n	800299a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f838 	bl	80029b4 <I2C_IsErrorOccurred>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e02d      	b.n	80029aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294e:	f7fe fc9b 	bl	8001288 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	429a      	cmp	r2, r3
 800295c:	d302      	bcc.n	8002964 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d11a      	bne.n	800299a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b20      	cmp	r3, #32
 8002970:	d013      	beq.n	800299a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f043 0220 	orr.w	r2, r3, #32
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e007      	b.n	80029aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d1c8      	bne.n	800293a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	; 0x28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d068      	beq.n	8002ab2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2210      	movs	r2, #16
 80029e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029e8:	e049      	b.n	8002a7e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d045      	beq.n	8002a7e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029f2:	f7fe fc49 	bl	8001288 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d302      	bcc.n	8002a08 <I2C_IsErrorOccurred+0x54>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d13a      	bne.n	8002a7e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a2a:	d121      	bne.n	8002a70 <I2C_IsErrorOccurred+0xbc>
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a32:	d01d      	beq.n	8002a70 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	d01a      	beq.n	8002a70 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a4a:	f7fe fc1d 	bl	8001288 <HAL_GetTick>
 8002a4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a50:	e00e      	b.n	8002a70 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a52:	f7fe fc19 	bl	8001288 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b19      	cmp	r3, #25
 8002a5e:	d907      	bls.n	8002a70 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	f043 0320 	orr.w	r3, r3, #32
 8002a66:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002a6e:	e006      	b.n	8002a7e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d1e9      	bne.n	8002a52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d003      	beq.n	8002a94 <I2C_IsErrorOccurred+0xe0>
 8002a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0aa      	beq.n	80029ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d103      	bne.n	8002aa4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	f043 0304 	orr.w	r3, r3, #4
 8002aaa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00b      	beq.n	8002adc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ad4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	f043 0308 	orr.w	r3, r3, #8
 8002aec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002af6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00b      	beq.n	8002b20 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	f043 0302 	orr.w	r3, r3, #2
 8002b0e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01c      	beq.n	8002b62 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f7ff fe45 	bl	80027b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <I2C_IsErrorOccurred+0x1bc>)
 8002b3a:	400b      	ands	r3, r1
 8002b3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3728      	adds	r7, #40	; 0x28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	fe00e800 	.word	0xfe00e800

08002b74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	817b      	strh	r3, [r7, #10]
 8002b82:	4613      	mov	r3, r2
 8002b84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b86:	897b      	ldrh	r3, [r7, #10]
 8002b88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b8c:	7a7b      	ldrb	r3, [r7, #9]
 8002b8e:	041b      	lsls	r3, r3, #16
 8002b90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b94:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ba2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	0d5b      	lsrs	r3, r3, #21
 8002bae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <I2C_TransferConfig+0x60>)
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	ea02 0103 	and.w	r1, r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002bc6:	bf00      	nop
 8002bc8:	371c      	adds	r7, #28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	03ff63ff 	.word	0x03ff63ff

08002bd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d138      	bne.n	8002c60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e032      	b.n	8002c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2224      	movs	r2, #36	; 0x24
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e000      	b.n	8002c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c60:	2302      	movs	r3, #2
  }
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d139      	bne.n	8002cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e033      	b.n	8002cfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2224      	movs	r2, #36	; 0x24
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0201 	bic.w	r2, r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e000      	b.n	8002cfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cf8:	2302      	movs	r3, #2
  }
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d18:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f001 b823 	b.w	8003d74 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 817d 	beq.w	800303e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d44:	4bbc      	ldr	r3, [pc, #752]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d00c      	beq.n	8002d6a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d50:	4bb9      	ldr	r3, [pc, #740]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 030c 	and.w	r3, r3, #12
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d15c      	bne.n	8002e16 <HAL_RCC_OscConfig+0x10e>
 8002d5c:	4bb6      	ldr	r3, [pc, #728]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d68:	d155      	bne.n	8002e16 <HAL_RCC_OscConfig+0x10e>
 8002d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d6e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d7e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d102      	bne.n	8002d9c <HAL_RCC_OscConfig+0x94>
 8002d96:	4ba8      	ldr	r3, [pc, #672]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	e015      	b.n	8002dc8 <HAL_RCC_OscConfig+0xc0>
 8002d9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002da0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002db4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002db8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002dbc:	fa93 f3a3 	rbit	r3, r3
 8002dc0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002dc4:	4b9c      	ldr	r3, [pc, #624]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dcc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002dd0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002dd4:	fa92 f2a2 	rbit	r2, r2
 8002dd8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002ddc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002de0:	fab2 f282 	clz	r2, r2
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	f042 0220 	orr.w	r2, r2, #32
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	f002 021f 	and.w	r2, r2, #31
 8002df0:	2101      	movs	r1, #1
 8002df2:	fa01 f202 	lsl.w	r2, r1, r2
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 811f 	beq.w	800303c <HAL_RCC_OscConfig+0x334>
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f040 8116 	bne.w	800303c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f000 bfaf 	b.w	8003d74 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e26:	d106      	bne.n	8002e36 <HAL_RCC_OscConfig+0x12e>
 8002e28:	4b83      	ldr	r3, [pc, #524]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a82      	ldr	r2, [pc, #520]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	e036      	b.n	8002ea4 <HAL_RCC_OscConfig+0x19c>
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x158>
 8002e46:	4b7c      	ldr	r3, [pc, #496]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a7b      	ldr	r2, [pc, #492]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	4b79      	ldr	r3, [pc, #484]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a78      	ldr	r2, [pc, #480]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e021      	b.n	8002ea4 <HAL_RCC_OscConfig+0x19c>
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x184>
 8002e72:	4b71      	ldr	r3, [pc, #452]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a70      	ldr	r2, [pc, #448]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b6e      	ldr	r3, [pc, #440]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a6d      	ldr	r2, [pc, #436]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0x19c>
 8002e8c:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a69      	ldr	r2, [pc, #420]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	4b67      	ldr	r3, [pc, #412]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a66      	ldr	r2, [pc, #408]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ea4:	4b64      	ldr	r3, [pc, #400]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	f023 020f 	bic.w	r2, r3, #15
 8002eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	495f      	ldr	r1, [pc, #380]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d059      	beq.n	8002f82 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ece:	f7fe f9db 	bl	8001288 <HAL_GetTick>
 8002ed2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed8:	f7fe f9d6 	bl	8001288 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b64      	cmp	r3, #100	; 0x64
 8002ee6:	d902      	bls.n	8002eee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	f000 bf43 	b.w	8003d74 <HAL_RCC_OscConfig+0x106c>
 8002eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ef2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002f02:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d102      	bne.n	8002f20 <HAL_RCC_OscConfig+0x218>
 8002f1a:	4b47      	ldr	r3, [pc, #284]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	e015      	b.n	8002f4c <HAL_RCC_OscConfig+0x244>
 8002f20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f24:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f38:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002f3c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002f48:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f50:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002f54:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002f58:	fa92 f2a2 	rbit	r2, r2
 8002f5c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002f60:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002f64:	fab2 f282 	clz	r2, r2
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	f042 0220 	orr.w	r2, r2, #32
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	f002 021f 	and.w	r2, r2, #31
 8002f74:	2101      	movs	r1, #1
 8002f76:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ab      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x1d0>
 8002f80:	e05d      	b.n	800303e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fe f981 	bl	8001288 <HAL_GetTick>
 8002f86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe f97c 	bl	8001288 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b64      	cmp	r3, #100	; 0x64
 8002f9a:	d902      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	f000 bee9 	b.w	8003d74 <HAL_RCC_OscConfig+0x106c>
 8002fa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fa6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002fb6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d102      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x2cc>
 8002fce:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	e015      	b.n	8003000 <HAL_RCC_OscConfig+0x2f8>
 8002fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fd8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ff0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002ffc:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <HAL_RCC_OscConfig+0x330>)
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003004:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003008:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800300c:	fa92 f2a2 	rbit	r2, r2
 8003010:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003014:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003018:	fab2 f282 	clz	r2, r2
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	f042 0220 	orr.w	r2, r2, #32
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	f002 021f 	and.w	r2, r2, #31
 8003028:	2101      	movs	r1, #1
 800302a:	fa01 f202 	lsl.w	r2, r1, r2
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1ab      	bne.n	8002f8c <HAL_RCC_OscConfig+0x284>
 8003034:	e003      	b.n	800303e <HAL_RCC_OscConfig+0x336>
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 817d 	beq.w	800334e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003054:	4ba6      	ldr	r3, [pc, #664]	; (80032f0 <HAL_RCC_OscConfig+0x5e8>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 030c 	and.w	r3, r3, #12
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00b      	beq.n	8003078 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003060:	4ba3      	ldr	r3, [pc, #652]	; (80032f0 <HAL_RCC_OscConfig+0x5e8>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b08      	cmp	r3, #8
 800306a:	d172      	bne.n	8003152 <HAL_RCC_OscConfig+0x44a>
 800306c:	4ba0      	ldr	r3, [pc, #640]	; (80032f0 <HAL_RCC_OscConfig+0x5e8>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d16c      	bne.n	8003152 <HAL_RCC_OscConfig+0x44a>
 8003078:	2302      	movs	r3, #2
 800307a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800308a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d102      	bne.n	80030a8 <HAL_RCC_OscConfig+0x3a0>
 80030a2:	4b93      	ldr	r3, [pc, #588]	; (80032f0 <HAL_RCC_OscConfig+0x5e8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	e013      	b.n	80030d0 <HAL_RCC_OscConfig+0x3c8>
 80030a8:	2302      	movs	r3, #2
 80030aa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80030ba:	2302      	movs	r3, #2
 80030bc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80030c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030c4:	fa93 f3a3 	rbit	r3, r3
 80030c8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80030cc:	4b88      	ldr	r3, [pc, #544]	; (80032f0 <HAL_RCC_OscConfig+0x5e8>)
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	2202      	movs	r2, #2
 80030d2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80030d6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80030da:	fa92 f2a2 	rbit	r2, r2
 80030de:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80030e2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80030e6:	fab2 f282 	clz	r2, r2
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	f042 0220 	orr.w	r2, r2, #32
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	f002 021f 	and.w	r2, r2, #31
 80030f6:	2101      	movs	r1, #1
 80030f8:	fa01 f202 	lsl.w	r2, r1, r2
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCC_OscConfig+0x410>
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d002      	beq.n	8003118 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f000 be2e 	b.w	8003d74 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003118:	4b75      	ldr	r3, [pc, #468]	; (80032f0 <HAL_RCC_OscConfig+0x5e8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003124:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	21f8      	movs	r1, #248	; 0xf8
 800312e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003136:	fa91 f1a1 	rbit	r1, r1
 800313a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800313e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003142:	fab1 f181 	clz	r1, r1
 8003146:	b2c9      	uxtb	r1, r1
 8003148:	408b      	lsls	r3, r1
 800314a:	4969      	ldr	r1, [pc, #420]	; (80032f0 <HAL_RCC_OscConfig+0x5e8>)
 800314c:	4313      	orrs	r3, r2
 800314e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003150:	e0fd      	b.n	800334e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003156:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 8088 	beq.w	8003274 <HAL_RCC_OscConfig+0x56c>
 8003164:	2301      	movs	r3, #1
 8003166:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003176:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317a:	fab3 f383 	clz	r3, r3
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003184:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	461a      	mov	r2, r3
 800318c:	2301      	movs	r3, #1
 800318e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fe f87a 	bl	8001288 <HAL_GetTick>
 8003194:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003198:	e00a      	b.n	80031b0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800319a:	f7fe f875 	bl	8001288 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d902      	bls.n	80031b0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	f000 bde2 	b.w	8003d74 <HAL_RCC_OscConfig+0x106c>
 80031b0:	2302      	movs	r3, #2
 80031b2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80031c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d102      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4d8>
 80031da:	4b45      	ldr	r3, [pc, #276]	; (80032f0 <HAL_RCC_OscConfig+0x5e8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	e013      	b.n	8003208 <HAL_RCC_OscConfig+0x500>
 80031e0:	2302      	movs	r3, #2
 80031e2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80031f2:	2302      	movs	r3, #2
 80031f4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80031f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003204:	4b3a      	ldr	r3, [pc, #232]	; (80032f0 <HAL_RCC_OscConfig+0x5e8>)
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	2202      	movs	r2, #2
 800320a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800320e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003212:	fa92 f2a2 	rbit	r2, r2
 8003216:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800321a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800321e:	fab2 f282 	clz	r2, r2
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	f042 0220 	orr.w	r2, r2, #32
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	f002 021f 	and.w	r2, r2, #31
 800322e:	2101      	movs	r1, #1
 8003230:	fa01 f202 	lsl.w	r2, r1, r2
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0af      	beq.n	800319a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323a:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <HAL_RCC_OscConfig+0x5e8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003246:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	21f8      	movs	r1, #248	; 0xf8
 8003250:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003258:	fa91 f1a1 	rbit	r1, r1
 800325c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003260:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003264:	fab1 f181 	clz	r1, r1
 8003268:	b2c9      	uxtb	r1, r1
 800326a:	408b      	lsls	r3, r1
 800326c:	4920      	ldr	r1, [pc, #128]	; (80032f0 <HAL_RCC_OscConfig+0x5e8>)
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]
 8003272:	e06c      	b.n	800334e <HAL_RCC_OscConfig+0x646>
 8003274:	2301      	movs	r3, #1
 8003276:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003286:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003294:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	461a      	mov	r2, r3
 800329c:	2300      	movs	r3, #0
 800329e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7fd fff2 	bl	8001288 <HAL_GetTick>
 80032a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032aa:	f7fd ffed 	bl	8001288 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d902      	bls.n	80032c0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	f000 bd5a 	b.w	8003d74 <HAL_RCC_OscConfig+0x106c>
 80032c0:	2302      	movs	r3, #2
 80032c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80032d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d104      	bne.n	80032f4 <HAL_RCC_OscConfig+0x5ec>
 80032ea:	4b01      	ldr	r3, [pc, #4]	; (80032f0 <HAL_RCC_OscConfig+0x5e8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	e015      	b.n	800331c <HAL_RCC_OscConfig+0x614>
 80032f0:	40021000 	.word	0x40021000
 80032f4:	2302      	movs	r3, #2
 80032f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003306:	2302      	movs	r3, #2
 8003308:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800330c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003318:	4bc8      	ldr	r3, [pc, #800]	; (800363c <HAL_RCC_OscConfig+0x934>)
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	2202      	movs	r2, #2
 800331e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003322:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003326:	fa92 f2a2 	rbit	r2, r2
 800332a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800332e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003332:	fab2 f282 	clz	r2, r2
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	f042 0220 	orr.w	r2, r2, #32
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	f002 021f 	and.w	r2, r2, #31
 8003342:	2101      	movs	r1, #1
 8003344:	fa01 f202 	lsl.w	r2, r1, r2
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1ad      	bne.n	80032aa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800334e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003352:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 8110 	beq.w	8003584 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003368:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d079      	beq.n	8003468 <HAL_RCC_OscConfig+0x760>
 8003374:	2301      	movs	r3, #1
 8003376:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	461a      	mov	r2, r3
 8003392:	4bab      	ldr	r3, [pc, #684]	; (8003640 <HAL_RCC_OscConfig+0x938>)
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	461a      	mov	r2, r3
 800339a:	2301      	movs	r3, #1
 800339c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339e:	f7fd ff73 	bl	8001288 <HAL_GetTick>
 80033a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a6:	e00a      	b.n	80033be <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a8:	f7fd ff6e 	bl	8001288 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d902      	bls.n	80033be <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	f000 bcdb 	b.w	8003d74 <HAL_RCC_OscConfig+0x106c>
 80033be:	2302      	movs	r3, #2
 80033c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80033c8:	fa93 f3a3 	rbit	r3, r3
 80033cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80033d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80033d8:	2202      	movs	r2, #2
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	fa93 f2a3 	rbit	r2, r3
 80033ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033fc:	2202      	movs	r2, #2
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	fa93 f2a3 	rbit	r2, r3
 800340e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003412:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003416:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003418:	4b88      	ldr	r3, [pc, #544]	; (800363c <HAL_RCC_OscConfig+0x934>)
 800341a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800341c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003420:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003424:	2102      	movs	r1, #2
 8003426:	6019      	str	r1, [r3, #0]
 8003428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	fa93 f1a3 	rbit	r1, r3
 8003436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800343e:	6019      	str	r1, [r3, #0]
  return result;
 8003440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003444:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	2101      	movs	r1, #1
 800345c:	fa01 f303 	lsl.w	r3, r1, r3
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0a0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x6a0>
 8003466:	e08d      	b.n	8003584 <HAL_RCC_OscConfig+0x87c>
 8003468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003478:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	fa93 f2a3 	rbit	r2, r3
 8003482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003486:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800348a:	601a      	str	r2, [r3, #0]
  return result;
 800348c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003490:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003494:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	461a      	mov	r2, r3
 800349e:	4b68      	ldr	r3, [pc, #416]	; (8003640 <HAL_RCC_OscConfig+0x938>)
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	461a      	mov	r2, r3
 80034a6:	2300      	movs	r3, #0
 80034a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034aa:	f7fd feed 	bl	8001288 <HAL_GetTick>
 80034ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b4:	f7fd fee8 	bl	8001288 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d902      	bls.n	80034ca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	f000 bc55 	b.w	8003d74 <HAL_RCC_OscConfig+0x106c>
 80034ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80034d2:	2202      	movs	r2, #2
 80034d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	fa93 f2a3 	rbit	r2, r3
 80034e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80034f6:	2202      	movs	r2, #2
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	fa93 f2a3 	rbit	r2, r3
 8003508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800351a:	2202      	movs	r2, #2
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	fa93 f2a3 	rbit	r2, r3
 800352c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003530:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003534:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003536:	4b41      	ldr	r3, [pc, #260]	; (800363c <HAL_RCC_OscConfig+0x934>)
 8003538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800353a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003542:	2102      	movs	r1, #2
 8003544:	6019      	str	r1, [r3, #0]
 8003546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	fa93 f1a3 	rbit	r1, r3
 8003554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003558:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800355c:	6019      	str	r1, [r3, #0]
  return result;
 800355e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003562:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	fab3 f383 	clz	r3, r3
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	2101      	movs	r1, #1
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	4013      	ands	r3, r2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d197      	bne.n	80034b4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003588:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 81a1 	beq.w	80038dc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359a:	2300      	movs	r3, #0
 800359c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a0:	4b26      	ldr	r3, [pc, #152]	; (800363c <HAL_RCC_OscConfig+0x934>)
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d116      	bne.n	80035da <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ac:	4b23      	ldr	r3, [pc, #140]	; (800363c <HAL_RCC_OscConfig+0x934>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	4a22      	ldr	r2, [pc, #136]	; (800363c <HAL_RCC_OscConfig+0x934>)
 80035b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b6:	61d3      	str	r3, [r2, #28]
 80035b8:	4b20      	ldr	r3, [pc, #128]	; (800363c <HAL_RCC_OscConfig+0x934>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80035c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ce:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80035d2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035da:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <HAL_RCC_OscConfig+0x93c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d11a      	bne.n	800361c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e6:	4b17      	ldr	r3, [pc, #92]	; (8003644 <HAL_RCC_OscConfig+0x93c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a16      	ldr	r2, [pc, #88]	; (8003644 <HAL_RCC_OscConfig+0x93c>)
 80035ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f2:	f7fd fe49 	bl	8001288 <HAL_GetTick>
 80035f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fa:	e009      	b.n	8003610 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fc:	f7fd fe44 	bl	8001288 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b64      	cmp	r3, #100	; 0x64
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e3b1      	b.n	8003d74 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <HAL_RCC_OscConfig+0x93c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ef      	beq.n	80035fc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003620:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d10d      	bne.n	8003648 <HAL_RCC_OscConfig+0x940>
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <HAL_RCC_OscConfig+0x934>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	4a02      	ldr	r2, [pc, #8]	; (800363c <HAL_RCC_OscConfig+0x934>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6213      	str	r3, [r2, #32]
 8003638:	e03c      	b.n	80036b4 <HAL_RCC_OscConfig+0x9ac>
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
 8003640:	10908120 	.word	0x10908120
 8003644:	40007000 	.word	0x40007000
 8003648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10c      	bne.n	8003672 <HAL_RCC_OscConfig+0x96a>
 8003658:	4bc1      	ldr	r3, [pc, #772]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	4ac0      	ldr	r2, [pc, #768]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	6213      	str	r3, [r2, #32]
 8003664:	4bbe      	ldr	r3, [pc, #760]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	4abd      	ldr	r2, [pc, #756]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 800366a:	f023 0304 	bic.w	r3, r3, #4
 800366e:	6213      	str	r3, [r2, #32]
 8003670:	e020      	b.n	80036b4 <HAL_RCC_OscConfig+0x9ac>
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b05      	cmp	r3, #5
 8003680:	d10c      	bne.n	800369c <HAL_RCC_OscConfig+0x994>
 8003682:	4bb7      	ldr	r3, [pc, #732]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	4ab6      	ldr	r2, [pc, #728]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 8003688:	f043 0304 	orr.w	r3, r3, #4
 800368c:	6213      	str	r3, [r2, #32]
 800368e:	4bb4      	ldr	r3, [pc, #720]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	4ab3      	ldr	r2, [pc, #716]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6213      	str	r3, [r2, #32]
 800369a:	e00b      	b.n	80036b4 <HAL_RCC_OscConfig+0x9ac>
 800369c:	4bb0      	ldr	r3, [pc, #704]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4aaf      	ldr	r2, [pc, #700]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	6213      	str	r3, [r2, #32]
 80036a8:	4bad      	ldr	r3, [pc, #692]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	4aac      	ldr	r2, [pc, #688]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 80036ae:	f023 0304 	bic.w	r3, r3, #4
 80036b2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8081 	beq.w	80037c8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c6:	f7fd fddf 	bl	8001288 <HAL_GetTick>
 80036ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ce:	e00b      	b.n	80036e8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d0:	f7fd fdda 	bl	8001288 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e345      	b.n	8003d74 <HAL_RCC_OscConfig+0x106c>
 80036e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80036f0:	2202      	movs	r2, #2
 80036f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	fa93 f2a3 	rbit	r2, r3
 8003702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003706:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003710:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003714:	2202      	movs	r2, #2
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	fa93 f2a3 	rbit	r2, r3
 8003726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800372e:	601a      	str	r2, [r3, #0]
  return result;
 8003730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003734:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003738:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	b2db      	uxtb	r3, r3
 8003744:	f043 0302 	orr.w	r3, r3, #2
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d102      	bne.n	8003754 <HAL_RCC_OscConfig+0xa4c>
 800374e:	4b84      	ldr	r3, [pc, #528]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	e013      	b.n	800377c <HAL_RCC_OscConfig+0xa74>
 8003754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003758:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800375c:	2202      	movs	r2, #2
 800375e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003764:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	fa93 f2a3 	rbit	r2, r3
 800376e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003772:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	4b79      	ldr	r3, [pc, #484]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003780:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003784:	2102      	movs	r1, #2
 8003786:	6011      	str	r1, [r2, #0]
 8003788:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800378c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	fa92 f1a2 	rbit	r1, r2
 8003796:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800379a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800379e:	6011      	str	r1, [r2, #0]
  return result;
 80037a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037a4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	fab2 f282 	clz	r2, r2
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	f002 021f 	and.w	r2, r2, #31
 80037ba:	2101      	movs	r1, #1
 80037bc:	fa01 f202 	lsl.w	r2, r1, r2
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d084      	beq.n	80036d0 <HAL_RCC_OscConfig+0x9c8>
 80037c6:	e07f      	b.n	80038c8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c8:	f7fd fd5e 	bl	8001288 <HAL_GetTick>
 80037cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d0:	e00b      	b.n	80037ea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d2:	f7fd fd59 	bl	8001288 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e2c4      	b.n	8003d74 <HAL_RCC_OscConfig+0x106c>
 80037ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80037f2:	2202      	movs	r2, #2
 80037f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	fa93 f2a3 	rbit	r2, r3
 8003804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003808:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003812:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003816:	2202      	movs	r2, #2
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	fa93 f2a3 	rbit	r2, r3
 8003828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003830:	601a      	str	r2, [r3, #0]
  return result;
 8003832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003836:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800383a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383c:	fab3 f383 	clz	r3, r3
 8003840:	b2db      	uxtb	r3, r3
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f043 0302 	orr.w	r3, r3, #2
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d102      	bne.n	8003856 <HAL_RCC_OscConfig+0xb4e>
 8003850:	4b43      	ldr	r3, [pc, #268]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	e013      	b.n	800387e <HAL_RCC_OscConfig+0xb76>
 8003856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800385e:	2202      	movs	r2, #2
 8003860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003866:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	fa93 f2a3 	rbit	r2, r3
 8003870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003874:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	4b39      	ldr	r3, [pc, #228]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003882:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003886:	2102      	movs	r1, #2
 8003888:	6011      	str	r1, [r2, #0]
 800388a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800388e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	fa92 f1a2 	rbit	r1, r2
 8003898:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800389c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80038a0:	6011      	str	r1, [r2, #0]
  return result;
 80038a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038a6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80038aa:	6812      	ldr	r2, [r2, #0]
 80038ac:	fab2 f282 	clz	r2, r2
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	f002 021f 	and.w	r2, r2, #31
 80038bc:	2101      	movs	r1, #1
 80038be:	fa01 f202 	lsl.w	r2, r1, r2
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d184      	bne.n	80037d2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d105      	bne.n	80038dc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d0:	4b23      	ldr	r3, [pc, #140]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	4a22      	ldr	r2, [pc, #136]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 80038d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8242 	beq.w	8003d72 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038ee:	4b1c      	ldr	r3, [pc, #112]	; (8003960 <HAL_RCC_OscConfig+0xc58>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	f000 8213 	beq.w	8003d22 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003900:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	2b02      	cmp	r3, #2
 800390a:	f040 8162 	bne.w	8003bd2 <HAL_RCC_OscConfig+0xeca>
 800390e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003912:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003916:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800391a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003920:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	fa93 f2a3 	rbit	r2, r3
 800392a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003932:	601a      	str	r2, [r3, #0]
  return result;
 8003934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003938:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800393c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393e:	fab3 f383 	clz	r3, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003948:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	461a      	mov	r2, r3
 8003950:	2300      	movs	r3, #0
 8003952:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fd fc98 	bl	8001288 <HAL_GetTick>
 8003958:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800395c:	e00c      	b.n	8003978 <HAL_RCC_OscConfig+0xc70>
 800395e:	bf00      	nop
 8003960:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003964:	f7fd fc90 	bl	8001288 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e1fd      	b.n	8003d74 <HAL_RCC_OscConfig+0x106c>
 8003978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003980:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	fa93 f2a3 	rbit	r2, r3
 8003994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003998:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800399c:	601a      	str	r2, [r3, #0]
  return result;
 800399e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80039a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a8:	fab3 f383 	clz	r3, r3
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d102      	bne.n	80039c2 <HAL_RCC_OscConfig+0xcba>
 80039bc:	4bb0      	ldr	r3, [pc, #704]	; (8003c80 <HAL_RCC_OscConfig+0xf78>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	e027      	b.n	8003a12 <HAL_RCC_OscConfig+0xd0a>
 80039c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80039ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	fa93 f2a3 	rbit	r2, r3
 80039de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80039f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	fa93 f2a3 	rbit	r2, r3
 8003a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a08:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	4b9c      	ldr	r3, [pc, #624]	; (8003c80 <HAL_RCC_OscConfig+0xf78>)
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a16:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003a1a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a1e:	6011      	str	r1, [r2, #0]
 8003a20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a24:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003a28:	6812      	ldr	r2, [r2, #0]
 8003a2a:	fa92 f1a2 	rbit	r1, r2
 8003a2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a32:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003a36:	6011      	str	r1, [r2, #0]
  return result;
 8003a38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a3c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	fab2 f282 	clz	r2, r2
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	f042 0220 	orr.w	r2, r2, #32
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	f002 021f 	and.w	r2, r2, #31
 8003a52:	2101      	movs	r1, #1
 8003a54:	fa01 f202 	lsl.w	r2, r1, r2
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d182      	bne.n	8003964 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a5e:	4b88      	ldr	r3, [pc, #544]	; (8003c80 <HAL_RCC_OscConfig+0xf78>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	497f      	ldr	r1, [pc, #508]	; (8003c80 <HAL_RCC_OscConfig+0xf78>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	604b      	str	r3, [r1, #4]
 8003a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a98:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	fa93 f2a3 	rbit	r2, r3
 8003aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003aaa:	601a      	str	r2, [r3, #0]
  return result;
 8003aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003ab4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab6:	fab3 f383 	clz	r3, r3
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ac0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2301      	movs	r3, #1
 8003aca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fd fbdc 	bl	8001288 <HAL_GetTick>
 8003ad0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ad4:	e009      	b.n	8003aea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad6:	f7fd fbd7 	bl	8001288 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e144      	b.n	8003d74 <HAL_RCC_OscConfig+0x106c>
 8003aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003af2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	fa93 f2a3 	rbit	r2, r3
 8003b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003b0e:	601a      	str	r2, [r3, #0]
  return result;
 8003b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b14:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003b18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d102      	bne.n	8003b34 <HAL_RCC_OscConfig+0xe2c>
 8003b2e:	4b54      	ldr	r3, [pc, #336]	; (8003c80 <HAL_RCC_OscConfig+0xf78>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	e027      	b.n	8003b84 <HAL_RCC_OscConfig+0xe7c>
 8003b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b38:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b46:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	fa93 f2a3 	rbit	r2, r3
 8003b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b54:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003b62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	fa93 f2a3 	rbit	r2, r3
 8003b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	4b3f      	ldr	r3, [pc, #252]	; (8003c80 <HAL_RCC_OscConfig+0xf78>)
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b88:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003b8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b90:	6011      	str	r1, [r2, #0]
 8003b92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b96:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	fa92 f1a2 	rbit	r1, r2
 8003ba0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ba4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ba8:	6011      	str	r1, [r2, #0]
  return result;
 8003baa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	fab2 f282 	clz	r2, r2
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	f042 0220 	orr.w	r2, r2, #32
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	f002 021f 	and.w	r2, r2, #31
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d082      	beq.n	8003ad6 <HAL_RCC_OscConfig+0xdce>
 8003bd0:	e0cf      	b.n	8003d72 <HAL_RCC_OscConfig+0x106a>
 8003bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003bda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	fa93 f2a3 	rbit	r2, r3
 8003bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003bf6:	601a      	str	r2, [r3, #0]
  return result;
 8003bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003c00:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c02:	fab3 f383 	clz	r3, r3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	461a      	mov	r2, r3
 8003c14:	2300      	movs	r3, #0
 8003c16:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c18:	f7fd fb36 	bl	8001288 <HAL_GetTick>
 8003c1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c20:	e009      	b.n	8003c36 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fd fb31 	bl	8001288 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e09e      	b.n	8003d74 <HAL_RCC_OscConfig+0x106c>
 8003c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003c3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c48:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	fa93 f2a3 	rbit	r2, r3
 8003c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c56:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c5a:	601a      	str	r2, [r3, #0]
  return result;
 8003c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c60:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c66:	fab3 f383 	clz	r3, r3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d104      	bne.n	8003c84 <HAL_RCC_OscConfig+0xf7c>
 8003c7a:	4b01      	ldr	r3, [pc, #4]	; (8003c80 <HAL_RCC_OscConfig+0xf78>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	e029      	b.n	8003cd4 <HAL_RCC_OscConfig+0xfcc>
 8003c80:	40021000 	.word	0x40021000
 8003c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c88:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c96:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	fa93 f2a3 	rbit	r2, r3
 8003ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003cb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cbc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	fa93 f2a3 	rbit	r2, r3
 8003cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCC_OscConfig+0x1078>)
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cd8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003cdc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ce0:	6011      	str	r1, [r2, #0]
 8003ce2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ce6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	fa92 f1a2 	rbit	r1, r2
 8003cf0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cf4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003cf8:	6011      	str	r1, [r2, #0]
  return result;
 8003cfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cfe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	fab2 f282 	clz	r2, r2
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	f042 0220 	orr.w	r2, r2, #32
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	f002 021f 	and.w	r2, r2, #31
 8003d14:	2101      	movs	r1, #1
 8003d16:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d180      	bne.n	8003c22 <HAL_RCC_OscConfig+0xf1a>
 8003d20:	e027      	b.n	8003d72 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e01e      	b.n	8003d74 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_RCC_OscConfig+0x1078>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d42:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d10b      	bne.n	8003d6e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003d56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d001      	beq.n	8003d72 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000

08003d84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b09e      	sub	sp, #120	; 0x78
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e162      	b.n	8004062 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d9c:	4b90      	ldr	r3, [pc, #576]	; (8003fe0 <HAL_RCC_ClockConfig+0x25c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d910      	bls.n	8003dcc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003daa:	4b8d      	ldr	r3, [pc, #564]	; (8003fe0 <HAL_RCC_ClockConfig+0x25c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 0207 	bic.w	r2, r3, #7
 8003db2:	498b      	ldr	r1, [pc, #556]	; (8003fe0 <HAL_RCC_ClockConfig+0x25c>)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dba:	4b89      	ldr	r3, [pc, #548]	; (8003fe0 <HAL_RCC_ClockConfig+0x25c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e14a      	b.n	8004062 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd8:	4b82      	ldr	r3, [pc, #520]	; (8003fe4 <HAL_RCC_ClockConfig+0x260>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	497f      	ldr	r1, [pc, #508]	; (8003fe4 <HAL_RCC_ClockConfig+0x260>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80dc 	beq.w	8003fb0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d13c      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xf6>
 8003e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e04:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e08:	fa93 f3a3 	rbit	r3, r3
 8003e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e10:	fab3 f383 	clz	r3, r3
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d102      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xa6>
 8003e24:	4b6f      	ldr	r3, [pc, #444]	; (8003fe4 <HAL_RCC_ClockConfig+0x260>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	e00f      	b.n	8003e4a <HAL_RCC_ClockConfig+0xc6>
 8003e2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e32:	fa93 f3a3 	rbit	r3, r3
 8003e36:	667b      	str	r3, [r7, #100]	; 0x64
 8003e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e46:	4b67      	ldr	r3, [pc, #412]	; (8003fe4 <HAL_RCC_ClockConfig+0x260>)
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e52:	fa92 f2a2 	rbit	r2, r2
 8003e56:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003e58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e5a:	fab2 f282 	clz	r2, r2
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	f042 0220 	orr.w	r2, r2, #32
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	f002 021f 	and.w	r2, r2, #31
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d17b      	bne.n	8003f6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e0f3      	b.n	8004062 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d13c      	bne.n	8003efc <HAL_RCC_ClockConfig+0x178>
 8003e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e8a:	fa93 f3a3 	rbit	r3, r3
 8003e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e92:	fab3 f383 	clz	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d102      	bne.n	8003eac <HAL_RCC_ClockConfig+0x128>
 8003ea6:	4b4f      	ldr	r3, [pc, #316]	; (8003fe4 <HAL_RCC_ClockConfig+0x260>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	e00f      	b.n	8003ecc <HAL_RCC_ClockConfig+0x148>
 8003eac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eb0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8003ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec2:	fa93 f3a3 	rbit	r3, r3
 8003ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec8:	4b46      	ldr	r3, [pc, #280]	; (8003fe4 <HAL_RCC_ClockConfig+0x260>)
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ed0:	63ba      	str	r2, [r7, #56]	; 0x38
 8003ed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ed4:	fa92 f2a2 	rbit	r2, r2
 8003ed8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003eda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003edc:	fab2 f282 	clz	r2, r2
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	f042 0220 	orr.w	r2, r2, #32
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	f002 021f 	and.w	r2, r2, #31
 8003eec:	2101      	movs	r1, #1
 8003eee:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d13a      	bne.n	8003f6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0b2      	b.n	8004062 <HAL_RCC_ClockConfig+0x2de>
 8003efc:	2302      	movs	r3, #2
 8003efe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f02:	fa93 f3a3 	rbit	r3, r3
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d102      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x1a0>
 8003f1e:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <HAL_RCC_ClockConfig+0x260>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	e00d      	b.n	8003f40 <HAL_RCC_ClockConfig+0x1bc>
 8003f24:	2302      	movs	r3, #2
 8003f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2a:	fa93 f3a3 	rbit	r3, r3
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f30:	2302      	movs	r3, #2
 8003f32:	623b      	str	r3, [r7, #32]
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	fa93 f3a3 	rbit	r3, r3
 8003f3a:	61fb      	str	r3, [r7, #28]
 8003f3c:	4b29      	ldr	r3, [pc, #164]	; (8003fe4 <HAL_RCC_ClockConfig+0x260>)
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2202      	movs	r2, #2
 8003f42:	61ba      	str	r2, [r7, #24]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	fa92 f2a2 	rbit	r2, r2
 8003f4a:	617a      	str	r2, [r7, #20]
  return result;
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	fab2 f282 	clz	r2, r2
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	f042 0220 	orr.w	r2, r2, #32
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	f002 021f 	and.w	r2, r2, #31
 8003f5e:	2101      	movs	r1, #1
 8003f60:	fa01 f202 	lsl.w	r2, r1, r2
 8003f64:	4013      	ands	r3, r2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e079      	b.n	8004062 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6e:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <HAL_RCC_ClockConfig+0x260>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f023 0203 	bic.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	491a      	ldr	r1, [pc, #104]	; (8003fe4 <HAL_RCC_ClockConfig+0x260>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f80:	f7fd f982 	bl	8001288 <HAL_GetTick>
 8003f84:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f88:	f7fd f97e 	bl	8001288 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e061      	b.n	8004062 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <HAL_RCC_ClockConfig+0x260>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 020c 	and.w	r2, r3, #12
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d1eb      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <HAL_RCC_ClockConfig+0x25c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d214      	bcs.n	8003fe8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fbe:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <HAL_RCC_ClockConfig+0x25c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 0207 	bic.w	r2, r3, #7
 8003fc6:	4906      	ldr	r1, [pc, #24]	; (8003fe0 <HAL_RCC_ClockConfig+0x25c>)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <HAL_RCC_ClockConfig+0x25c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e040      	b.n	8004062 <HAL_RCC_ClockConfig+0x2de>
 8003fe0:	40022000 	.word	0x40022000
 8003fe4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff4:	4b1d      	ldr	r3, [pc, #116]	; (800406c <HAL_RCC_ClockConfig+0x2e8>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	491a      	ldr	r1, [pc, #104]	; (800406c <HAL_RCC_ClockConfig+0x2e8>)
 8004002:	4313      	orrs	r3, r2
 8004004:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004012:	4b16      	ldr	r3, [pc, #88]	; (800406c <HAL_RCC_ClockConfig+0x2e8>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4912      	ldr	r1, [pc, #72]	; (800406c <HAL_RCC_ClockConfig+0x2e8>)
 8004022:	4313      	orrs	r3, r2
 8004024:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004026:	f000 f829 	bl	800407c <HAL_RCC_GetSysClockFreq>
 800402a:	4601      	mov	r1, r0
 800402c:	4b0f      	ldr	r3, [pc, #60]	; (800406c <HAL_RCC_ClockConfig+0x2e8>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004034:	22f0      	movs	r2, #240	; 0xf0
 8004036:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	fa92 f2a2 	rbit	r2, r2
 800403e:	60fa      	str	r2, [r7, #12]
  return result;
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	fab2 f282 	clz	r2, r2
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	40d3      	lsrs	r3, r2
 800404a:	4a09      	ldr	r2, [pc, #36]	; (8004070 <HAL_RCC_ClockConfig+0x2ec>)
 800404c:	5cd3      	ldrb	r3, [r2, r3]
 800404e:	fa21 f303 	lsr.w	r3, r1, r3
 8004052:	4a08      	ldr	r2, [pc, #32]	; (8004074 <HAL_RCC_ClockConfig+0x2f0>)
 8004054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004056:	4b08      	ldr	r3, [pc, #32]	; (8004078 <HAL_RCC_ClockConfig+0x2f4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f7fd f808 	bl	8001070 <HAL_InitTick>
  
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3778      	adds	r7, #120	; 0x78
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40021000 	.word	0x40021000
 8004070:	080083ac 	.word	0x080083ac
 8004074:	20000000 	.word	0x20000000
 8004078:	20000004 	.word	0x20000004

0800407c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800407c:	b480      	push	{r7}
 800407e:	b08b      	sub	sp, #44	; 0x2c
 8004080:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	2300      	movs	r3, #0
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004096:	4b29      	ldr	r3, [pc, #164]	; (800413c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d002      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x30>
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d003      	beq.n	80040b2 <HAL_RCC_GetSysClockFreq+0x36>
 80040aa:	e03c      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040ac:	4b24      	ldr	r3, [pc, #144]	; (8004140 <HAL_RCC_GetSysClockFreq+0xc4>)
 80040ae:	623b      	str	r3, [r7, #32]
      break;
 80040b0:	e03c      	b.n	800412c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80040b8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80040bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	fa92 f2a2 	rbit	r2, r2
 80040c4:	607a      	str	r2, [r7, #4]
  return result;
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	fab2 f282 	clz	r2, r2
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	40d3      	lsrs	r3, r2
 80040d0:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <HAL_RCC_GetSysClockFreq+0xc8>)
 80040d2:	5cd3      	ldrb	r3, [r2, r3]
 80040d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80040d6:	4b19      	ldr	r3, [pc, #100]	; (800413c <HAL_RCC_GetSysClockFreq+0xc0>)
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	220f      	movs	r2, #15
 80040e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	fa92 f2a2 	rbit	r2, r2
 80040e8:	60fa      	str	r2, [r7, #12]
  return result;
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	fab2 f282 	clz	r2, r2
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	40d3      	lsrs	r3, r2
 80040f4:	4a14      	ldr	r2, [pc, #80]	; (8004148 <HAL_RCC_GetSysClockFreq+0xcc>)
 80040f6:	5cd3      	ldrb	r3, [r2, r3]
 80040f8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004104:	4a0e      	ldr	r2, [pc, #56]	; (8004140 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	fbb2 f2f3 	udiv	r2, r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
 8004114:	e004      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	4a0c      	ldr	r2, [pc, #48]	; (800414c <HAL_RCC_GetSysClockFreq+0xd0>)
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	623b      	str	r3, [r7, #32]
      break;
 8004124:	e002      	b.n	800412c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004126:	4b06      	ldr	r3, [pc, #24]	; (8004140 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004128:	623b      	str	r3, [r7, #32]
      break;
 800412a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800412c:	6a3b      	ldr	r3, [r7, #32]
}
 800412e:	4618      	mov	r0, r3
 8004130:	372c      	adds	r7, #44	; 0x2c
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
 8004140:	007a1200 	.word	0x007a1200
 8004144:	080083c4 	.word	0x080083c4
 8004148:	080083d4 	.word	0x080083d4
 800414c:	003d0900 	.word	0x003d0900

08004150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <HAL_RCC_GetHCLKFreq+0x14>)
 8004156:	681b      	ldr	r3, [r3, #0]
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000000 	.word	0x20000000

08004168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800416e:	f7ff ffef 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8004172:	4601      	mov	r1, r0
 8004174:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800417c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004180:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	fa92 f2a2 	rbit	r2, r2
 8004188:	603a      	str	r2, [r7, #0]
  return result;
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	fab2 f282 	clz	r2, r2
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	40d3      	lsrs	r3, r2
 8004194:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004196:	5cd3      	ldrb	r3, [r2, r3]
 8004198:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800419c:	4618      	mov	r0, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40021000 	.word	0x40021000
 80041a8:	080083bc 	.word	0x080083bc

080041ac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	220f      	movs	r2, #15
 80041ba:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041bc:	4b12      	ldr	r3, [pc, #72]	; (8004208 <HAL_RCC_GetClockConfig+0x5c>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 0203 	and.w	r2, r3, #3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80041c8:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <HAL_RCC_GetClockConfig+0x5c>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <HAL_RCC_GetClockConfig+0x5c>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCC_GetClockConfig+0x5c>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	08db      	lsrs	r3, r3, #3
 80041e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80041ee:	4b07      	ldr	r3, [pc, #28]	; (800420c <HAL_RCC_GetClockConfig+0x60>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0207 	and.w	r2, r3, #7
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	601a      	str	r2, [r3, #0]
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
 800420c:	40022000 	.word	0x40022000

08004210 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b092      	sub	sp, #72	; 0x48
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004220:	2300      	movs	r3, #0
 8004222:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 80d4 	beq.w	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004234:	4b4e      	ldr	r3, [pc, #312]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10e      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004240:	4b4b      	ldr	r3, [pc, #300]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	4a4a      	ldr	r2, [pc, #296]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424a:	61d3      	str	r3, [r2, #28]
 800424c:	4b48      	ldr	r3, [pc, #288]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425e:	4b45      	ldr	r3, [pc, #276]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004266:	2b00      	cmp	r3, #0
 8004268:	d118      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800426a:	4b42      	ldr	r3, [pc, #264]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a41      	ldr	r2, [pc, #260]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004274:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004276:	f7fd f807 	bl	8001288 <HAL_GetTick>
 800427a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427c:	e008      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800427e:	f7fd f803 	bl	8001288 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b64      	cmp	r3, #100	; 0x64
 800428a:	d901      	bls.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e14b      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004290:	4b38      	ldr	r3, [pc, #224]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f0      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800429c:	4b34      	ldr	r3, [pc, #208]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 8084 	beq.w	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d07c      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042bc:	4b2c      	ldr	r3, [pc, #176]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	fa93 f3a3 	rbit	r3, r3
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042d6:	fab3 f383 	clz	r3, r3
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	461a      	mov	r2, r3
 80042de:	4b26      	ldr	r3, [pc, #152]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	461a      	mov	r2, r3
 80042e6:	2301      	movs	r3, #1
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f2:	fa93 f3a3 	rbit	r3, r3
 80042f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80042f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042fa:	fab3 f383 	clz	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	461a      	mov	r2, r3
 800430a:	2300      	movs	r3, #0
 800430c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800430e:	4a18      	ldr	r2, [pc, #96]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004312:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d04b      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431e:	f7fc ffb3 	bl	8001288 <HAL_GetTick>
 8004322:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004324:	e00a      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004326:	f7fc ffaf 	bl	8001288 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	f241 3288 	movw	r2, #5000	; 0x1388
 8004334:	4293      	cmp	r3, r2
 8004336:	d901      	bls.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e0f5      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800433c:	2302      	movs	r3, #2
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
 8004348:	2302      	movs	r3, #2
 800434a:	623b      	str	r3, [r7, #32]
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	fa93 f3a3 	rbit	r3, r3
 8004352:	61fb      	str	r3, [r7, #28]
  return result;
 8004354:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004356:	fab3 f383 	clz	r3, r3
 800435a:	b2db      	uxtb	r3, r3
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f043 0302 	orr.w	r3, r3, #2
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d108      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800436a:	4b01      	ldr	r3, [pc, #4]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	e00d      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004370:	40021000 	.word	0x40021000
 8004374:	40007000 	.word	0x40007000
 8004378:	10908100 	.word	0x10908100
 800437c:	2302      	movs	r3, #2
 800437e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	fa93 f3a3 	rbit	r3, r3
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	4b69      	ldr	r3, [pc, #420]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	2202      	movs	r2, #2
 800438e:	613a      	str	r2, [r7, #16]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	fa92 f2a2 	rbit	r2, r2
 8004396:	60fa      	str	r2, [r7, #12]
  return result;
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	fab2 f282 	clz	r2, r2
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	f002 021f 	and.w	r2, r2, #31
 80043aa:	2101      	movs	r1, #1
 80043ac:	fa01 f202 	lsl.w	r2, r1, r2
 80043b0:	4013      	ands	r3, r2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0b7      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80043b6:	4b5e      	ldr	r3, [pc, #376]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	495b      	ldr	r1, [pc, #364]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d105      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d0:	4b57      	ldr	r3, [pc, #348]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	4a56      	ldr	r2, [pc, #344]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043e8:	4b51      	ldr	r3, [pc, #324]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ec:	f023 0203 	bic.w	r2, r3, #3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	494e      	ldr	r1, [pc, #312]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0320 	and.w	r3, r3, #32
 8004402:	2b00      	cmp	r3, #0
 8004404:	d008      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004406:	4b4a      	ldr	r3, [pc, #296]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	f023 0210 	bic.w	r2, r3, #16
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	4947      	ldr	r1, [pc, #284]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004414:	4313      	orrs	r3, r2
 8004416:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004424:	4b42      	ldr	r3, [pc, #264]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	493f      	ldr	r1, [pc, #252]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004432:	4313      	orrs	r3, r2
 8004434:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004442:	4b3b      	ldr	r3, [pc, #236]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	f023 0220 	bic.w	r2, r3, #32
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	4938      	ldr	r1, [pc, #224]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004450:	4313      	orrs	r3, r2
 8004452:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004460:	4b33      	ldr	r3, [pc, #204]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	4930      	ldr	r1, [pc, #192]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800446e:	4313      	orrs	r3, r2
 8004470:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800447a:	2b00      	cmp	r3, #0
 800447c:	d008      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800447e:	4b2c      	ldr	r3, [pc, #176]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	4929      	ldr	r1, [pc, #164]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800448c:	4313      	orrs	r3, r2
 800448e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800449c:	4b24      	ldr	r3, [pc, #144]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	4921      	ldr	r1, [pc, #132]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044ba:	4b1d      	ldr	r3, [pc, #116]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	491a      	ldr	r1, [pc, #104]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80044d8:	4b15      	ldr	r3, [pc, #84]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	4912      	ldr	r1, [pc, #72]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d008      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80044f6:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	490b      	ldr	r1, [pc, #44]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004504:	4313      	orrs	r3, r2
 8004506:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	4903      	ldr	r1, [pc, #12]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004522:	4313      	orrs	r3, r2
 8004524:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3748      	adds	r7, #72	; 0x48
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000

08004534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e049      	b.n	80045da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fc fd30 	bl	8000fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3304      	adds	r3, #4
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f000 fcf8 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d001      	beq.n	80045fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e03b      	b.n	8004674 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a19      	ldr	r2, [pc, #100]	; (8004680 <HAL_TIM_Base_Start_IT+0x9c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d009      	beq.n	8004632 <HAL_TIM_Base_Start_IT+0x4e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004626:	d004      	beq.n	8004632 <HAL_TIM_Base_Start_IT+0x4e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a15      	ldr	r2, [pc, #84]	; (8004684 <HAL_TIM_Base_Start_IT+0xa0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d115      	bne.n	800465e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	4b13      	ldr	r3, [pc, #76]	; (8004688 <HAL_TIM_Base_Start_IT+0xa4>)
 800463a:	4013      	ands	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b06      	cmp	r3, #6
 8004642:	d015      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x8c>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464a:	d011      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465c:	e008      	b.n	8004670 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e000      	b.n	8004672 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004670:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40014000 	.word	0x40014000
 8004688:	00010007 	.word	0x00010007

0800468c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e049      	b.n	8004732 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f841 	bl	800473a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3304      	adds	r3, #4
 80046c8:	4619      	mov	r1, r3
 80046ca:	4610      	mov	r0, r2
 80046cc:	f000 fc4c 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
	...

08004750 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d109      	bne.n	8004774 <HAL_TIM_PWM_Start+0x24>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b01      	cmp	r3, #1
 800476a:	bf14      	ite	ne
 800476c:	2301      	movne	r3, #1
 800476e:	2300      	moveq	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	e03c      	b.n	80047ee <HAL_TIM_PWM_Start+0x9e>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b04      	cmp	r3, #4
 8004778:	d109      	bne.n	800478e <HAL_TIM_PWM_Start+0x3e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b01      	cmp	r3, #1
 8004784:	bf14      	ite	ne
 8004786:	2301      	movne	r3, #1
 8004788:	2300      	moveq	r3, #0
 800478a:	b2db      	uxtb	r3, r3
 800478c:	e02f      	b.n	80047ee <HAL_TIM_PWM_Start+0x9e>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b08      	cmp	r3, #8
 8004792:	d109      	bne.n	80047a8 <HAL_TIM_PWM_Start+0x58>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b01      	cmp	r3, #1
 800479e:	bf14      	ite	ne
 80047a0:	2301      	movne	r3, #1
 80047a2:	2300      	moveq	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	e022      	b.n	80047ee <HAL_TIM_PWM_Start+0x9e>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b0c      	cmp	r3, #12
 80047ac:	d109      	bne.n	80047c2 <HAL_TIM_PWM_Start+0x72>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	bf14      	ite	ne
 80047ba:	2301      	movne	r3, #1
 80047bc:	2300      	moveq	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	e015      	b.n	80047ee <HAL_TIM_PWM_Start+0x9e>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b10      	cmp	r3, #16
 80047c6:	d109      	bne.n	80047dc <HAL_TIM_PWM_Start+0x8c>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	bf14      	ite	ne
 80047d4:	2301      	movne	r3, #1
 80047d6:	2300      	moveq	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	e008      	b.n	80047ee <HAL_TIM_PWM_Start+0x9e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	bf14      	ite	ne
 80047e8:	2301      	movne	r3, #1
 80047ea:	2300      	moveq	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e083      	b.n	80048fe <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <HAL_TIM_PWM_Start+0xb6>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004804:	e023      	b.n	800484e <HAL_TIM_PWM_Start+0xfe>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b04      	cmp	r3, #4
 800480a:	d104      	bne.n	8004816 <HAL_TIM_PWM_Start+0xc6>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004814:	e01b      	b.n	800484e <HAL_TIM_PWM_Start+0xfe>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b08      	cmp	r3, #8
 800481a:	d104      	bne.n	8004826 <HAL_TIM_PWM_Start+0xd6>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004824:	e013      	b.n	800484e <HAL_TIM_PWM_Start+0xfe>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b0c      	cmp	r3, #12
 800482a:	d104      	bne.n	8004836 <HAL_TIM_PWM_Start+0xe6>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004834:	e00b      	b.n	800484e <HAL_TIM_PWM_Start+0xfe>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b10      	cmp	r3, #16
 800483a:	d104      	bne.n	8004846 <HAL_TIM_PWM_Start+0xf6>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004844:	e003      	b.n	800484e <HAL_TIM_PWM_Start+0xfe>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2202      	movs	r2, #2
 800484a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2201      	movs	r2, #1
 8004854:	6839      	ldr	r1, [r7, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f000 ff34 	bl	80056c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a29      	ldr	r2, [pc, #164]	; (8004908 <HAL_TIM_PWM_Start+0x1b8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00e      	beq.n	8004884 <HAL_TIM_PWM_Start+0x134>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a28      	ldr	r2, [pc, #160]	; (800490c <HAL_TIM_PWM_Start+0x1bc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d009      	beq.n	8004884 <HAL_TIM_PWM_Start+0x134>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a26      	ldr	r2, [pc, #152]	; (8004910 <HAL_TIM_PWM_Start+0x1c0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <HAL_TIM_PWM_Start+0x134>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a25      	ldr	r2, [pc, #148]	; (8004914 <HAL_TIM_PWM_Start+0x1c4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d101      	bne.n	8004888 <HAL_TIM_PWM_Start+0x138>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <HAL_TIM_PWM_Start+0x13a>
 8004888:	2300      	movs	r3, #0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d007      	beq.n	800489e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800489c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a19      	ldr	r2, [pc, #100]	; (8004908 <HAL_TIM_PWM_Start+0x1b8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d009      	beq.n	80048bc <HAL_TIM_PWM_Start+0x16c>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b0:	d004      	beq.n	80048bc <HAL_TIM_PWM_Start+0x16c>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a15      	ldr	r2, [pc, #84]	; (800490c <HAL_TIM_PWM_Start+0x1bc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d115      	bne.n	80048e8 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	4b15      	ldr	r3, [pc, #84]	; (8004918 <HAL_TIM_PWM_Start+0x1c8>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b06      	cmp	r3, #6
 80048cc:	d015      	beq.n	80048fa <HAL_TIM_PWM_Start+0x1aa>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d4:	d011      	beq.n	80048fa <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0201 	orr.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e6:	e008      	b.n	80048fa <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	e000      	b.n	80048fc <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40014000 	.word	0x40014000
 8004910:	40014400 	.word	0x40014400
 8004914:	40014800 	.word	0x40014800
 8004918:	00010007 	.word	0x00010007

0800491c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b02      	cmp	r3, #2
 8004930:	d122      	bne.n	8004978 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d11b      	bne.n	8004978 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0202 	mvn.w	r2, #2
 8004948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fae3 	bl	8004f2a <HAL_TIM_IC_CaptureCallback>
 8004964:	e005      	b.n	8004972 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fad5 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fae6 	bl	8004f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b04      	cmp	r3, #4
 8004984:	d122      	bne.n	80049cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b04      	cmp	r3, #4
 8004992:	d11b      	bne.n	80049cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0204 	mvn.w	r2, #4
 800499c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2202      	movs	r2, #2
 80049a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fab9 	bl	8004f2a <HAL_TIM_IC_CaptureCallback>
 80049b8:	e005      	b.n	80049c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 faab 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fabc 	bl	8004f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d122      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d11b      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0208 	mvn.w	r2, #8
 80049f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2204      	movs	r2, #4
 80049f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa8f 	bl	8004f2a <HAL_TIM_IC_CaptureCallback>
 8004a0c:	e005      	b.n	8004a1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa81 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fa92 	bl	8004f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0310 	and.w	r3, r3, #16
 8004a2a:	2b10      	cmp	r3, #16
 8004a2c:	d122      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d11b      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0210 	mvn.w	r2, #16
 8004a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2208      	movs	r2, #8
 8004a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fa65 	bl	8004f2a <HAL_TIM_IC_CaptureCallback>
 8004a60:	e005      	b.n	8004a6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fa57 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fa68 	bl	8004f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d10e      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d107      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0201 	mvn.w	r2, #1
 8004a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fc f9ba 	bl	8000e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	2b80      	cmp	r3, #128	; 0x80
 8004aac:	d10e      	bne.n	8004acc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab8:	2b80      	cmp	r3, #128	; 0x80
 8004aba:	d107      	bne.n	8004acc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 ff0a 	bl	80058e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ada:	d10e      	bne.n	8004afa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b80      	cmp	r3, #128	; 0x80
 8004ae8:	d107      	bne.n	8004afa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fefd 	bl	80058f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b04:	2b40      	cmp	r3, #64	; 0x40
 8004b06:	d10e      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	d107      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fa16 	bl	8004f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f003 0320 	and.w	r3, r3, #32
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d10e      	bne.n	8004b52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d107      	bne.n	8004b52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f06f 0220 	mvn.w	r2, #32
 8004b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 febd 	bl	80058cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b52:	bf00      	nop
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b76:	2302      	movs	r3, #2
 8004b78:	e0ff      	b.n	8004d7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b14      	cmp	r3, #20
 8004b86:	f200 80f0 	bhi.w	8004d6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b8a:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004be5 	.word	0x08004be5
 8004b94:	08004d6b 	.word	0x08004d6b
 8004b98:	08004d6b 	.word	0x08004d6b
 8004b9c:	08004d6b 	.word	0x08004d6b
 8004ba0:	08004c25 	.word	0x08004c25
 8004ba4:	08004d6b 	.word	0x08004d6b
 8004ba8:	08004d6b 	.word	0x08004d6b
 8004bac:	08004d6b 	.word	0x08004d6b
 8004bb0:	08004c67 	.word	0x08004c67
 8004bb4:	08004d6b 	.word	0x08004d6b
 8004bb8:	08004d6b 	.word	0x08004d6b
 8004bbc:	08004d6b 	.word	0x08004d6b
 8004bc0:	08004ca7 	.word	0x08004ca7
 8004bc4:	08004d6b 	.word	0x08004d6b
 8004bc8:	08004d6b 	.word	0x08004d6b
 8004bcc:	08004d6b 	.word	0x08004d6b
 8004bd0:	08004ce9 	.word	0x08004ce9
 8004bd4:	08004d6b 	.word	0x08004d6b
 8004bd8:	08004d6b 	.word	0x08004d6b
 8004bdc:	08004d6b 	.word	0x08004d6b
 8004be0:	08004d29 	.word	0x08004d29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fa2a 	bl	8005044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0208 	orr.w	r2, r2, #8
 8004bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0204 	bic.w	r2, r2, #4
 8004c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6999      	ldr	r1, [r3, #24]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	619a      	str	r2, [r3, #24]
      break;
 8004c22:	e0a5      	b.n	8004d70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fa90 	bl	8005150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6999      	ldr	r1, [r3, #24]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	021a      	lsls	r2, r3, #8
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	619a      	str	r2, [r3, #24]
      break;
 8004c64:	e084      	b.n	8004d70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 faef 	bl	8005250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0208 	orr.w	r2, r2, #8
 8004c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0204 	bic.w	r2, r2, #4
 8004c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69d9      	ldr	r1, [r3, #28]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	61da      	str	r2, [r3, #28]
      break;
 8004ca4:	e064      	b.n	8004d70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fb4d 	bl	800534c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69d9      	ldr	r1, [r3, #28]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	021a      	lsls	r2, r3, #8
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	61da      	str	r2, [r3, #28]
      break;
 8004ce6:	e043      	b.n	8004d70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fb90 	bl	8005414 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0208 	orr.w	r2, r2, #8
 8004d02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0204 	bic.w	r2, r2, #4
 8004d12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	691a      	ldr	r2, [r3, #16]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d26:	e023      	b.n	8004d70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fbce 	bl	80054d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	021a      	lsls	r2, r3, #8
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d68:	e002      	b.n	8004d70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop

08004d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_TIM_ConfigClockSource+0x1c>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e0b6      	b.n	8004f0e <HAL_TIM_ConfigClockSource+0x18a>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ddc:	d03e      	beq.n	8004e5c <HAL_TIM_ConfigClockSource+0xd8>
 8004dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de2:	f200 8087 	bhi.w	8004ef4 <HAL_TIM_ConfigClockSource+0x170>
 8004de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dea:	f000 8086 	beq.w	8004efa <HAL_TIM_ConfigClockSource+0x176>
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df2:	d87f      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x170>
 8004df4:	2b70      	cmp	r3, #112	; 0x70
 8004df6:	d01a      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0xaa>
 8004df8:	2b70      	cmp	r3, #112	; 0x70
 8004dfa:	d87b      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x170>
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d050      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x11e>
 8004e00:	2b60      	cmp	r3, #96	; 0x60
 8004e02:	d877      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x170>
 8004e04:	2b50      	cmp	r3, #80	; 0x50
 8004e06:	d03c      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0xfe>
 8004e08:	2b50      	cmp	r3, #80	; 0x50
 8004e0a:	d873      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x170>
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d058      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x13e>
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d86f      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x170>
 8004e14:	2b30      	cmp	r3, #48	; 0x30
 8004e16:	d064      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x15e>
 8004e18:	2b30      	cmp	r3, #48	; 0x30
 8004e1a:	d86b      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x170>
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d060      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x15e>
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d867      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x170>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d05c      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x15e>
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d05a      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x15e>
 8004e2c:	e062      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6899      	ldr	r1, [r3, #8]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f000 fc21 	bl	8005684 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	609a      	str	r2, [r3, #8]
      break;
 8004e5a:	e04f      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	6899      	ldr	r1, [r3, #8]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f000 fc0a 	bl	8005684 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e7e:	609a      	str	r2, [r3, #8]
      break;
 8004e80:	e03c      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6859      	ldr	r1, [r3, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f000 fb7e 	bl	8005590 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2150      	movs	r1, #80	; 0x50
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fbd7 	bl	800564e <TIM_ITRx_SetConfig>
      break;
 8004ea0:	e02c      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6859      	ldr	r1, [r3, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f000 fb9d 	bl	80055ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2160      	movs	r1, #96	; 0x60
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fbc7 	bl	800564e <TIM_ITRx_SetConfig>
      break;
 8004ec0:	e01c      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6859      	ldr	r1, [r3, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f000 fb5e 	bl	8005590 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2140      	movs	r1, #64	; 0x40
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fbb7 	bl	800564e <TIM_ITRx_SetConfig>
      break;
 8004ee0:	e00c      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f000 fbae 	bl	800564e <TIM_ITRx_SetConfig>
      break;
 8004ef2:	e003      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef8:	e000      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
	...

08004f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a2e      	ldr	r2, [pc, #184]	; (8005034 <TIM_Base_SetConfig+0xcc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_Base_SetConfig+0x20>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f86:	d108      	bne.n	8004f9a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a25      	ldr	r2, [pc, #148]	; (8005034 <TIM_Base_SetConfig+0xcc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00f      	beq.n	8004fc2 <TIM_Base_SetConfig+0x5a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa8:	d00b      	beq.n	8004fc2 <TIM_Base_SetConfig+0x5a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a22      	ldr	r2, [pc, #136]	; (8005038 <TIM_Base_SetConfig+0xd0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d007      	beq.n	8004fc2 <TIM_Base_SetConfig+0x5a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a21      	ldr	r2, [pc, #132]	; (800503c <TIM_Base_SetConfig+0xd4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d003      	beq.n	8004fc2 <TIM_Base_SetConfig+0x5a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a20      	ldr	r2, [pc, #128]	; (8005040 <TIM_Base_SetConfig+0xd8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d108      	bne.n	8004fd4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a0e      	ldr	r2, [pc, #56]	; (8005034 <TIM_Base_SetConfig+0xcc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d00b      	beq.n	8005018 <TIM_Base_SetConfig+0xb0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a0d      	ldr	r2, [pc, #52]	; (8005038 <TIM_Base_SetConfig+0xd0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d007      	beq.n	8005018 <TIM_Base_SetConfig+0xb0>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a0c      	ldr	r2, [pc, #48]	; (800503c <TIM_Base_SetConfig+0xd4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d003      	beq.n	8005018 <TIM_Base_SetConfig+0xb0>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a0b      	ldr	r2, [pc, #44]	; (8005040 <TIM_Base_SetConfig+0xd8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d103      	bne.n	8005020 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	615a      	str	r2, [r3, #20]
}
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40012c00 	.word	0x40012c00
 8005038:	40014000 	.word	0x40014000
 800503c:	40014400 	.word	0x40014400
 8005040:	40014800 	.word	0x40014800

08005044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f023 0201 	bic.w	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0303 	bic.w	r3, r3, #3
 800507e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f023 0302 	bic.w	r3, r3, #2
 8005090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a28      	ldr	r2, [pc, #160]	; (8005140 <TIM_OC1_SetConfig+0xfc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00b      	beq.n	80050bc <TIM_OC1_SetConfig+0x78>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a27      	ldr	r2, [pc, #156]	; (8005144 <TIM_OC1_SetConfig+0x100>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d007      	beq.n	80050bc <TIM_OC1_SetConfig+0x78>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a26      	ldr	r2, [pc, #152]	; (8005148 <TIM_OC1_SetConfig+0x104>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC1_SetConfig+0x78>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a25      	ldr	r2, [pc, #148]	; (800514c <TIM_OC1_SetConfig+0x108>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10c      	bne.n	80050d6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0308 	bic.w	r3, r3, #8
 80050c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f023 0304 	bic.w	r3, r3, #4
 80050d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a19      	ldr	r2, [pc, #100]	; (8005140 <TIM_OC1_SetConfig+0xfc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00b      	beq.n	80050f6 <TIM_OC1_SetConfig+0xb2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a18      	ldr	r2, [pc, #96]	; (8005144 <TIM_OC1_SetConfig+0x100>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d007      	beq.n	80050f6 <TIM_OC1_SetConfig+0xb2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a17      	ldr	r2, [pc, #92]	; (8005148 <TIM_OC1_SetConfig+0x104>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d003      	beq.n	80050f6 <TIM_OC1_SetConfig+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a16      	ldr	r2, [pc, #88]	; (800514c <TIM_OC1_SetConfig+0x108>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d111      	bne.n	800511a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	621a      	str	r2, [r3, #32]
}
 8005134:	bf00      	nop
 8005136:	371c      	adds	r7, #28
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	40012c00 	.word	0x40012c00
 8005144:	40014000 	.word	0x40014000
 8005148:	40014400 	.word	0x40014400
 800514c:	40014800 	.word	0x40014800

08005150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f023 0210 	bic.w	r2, r3, #16
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800517e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	021b      	lsls	r3, r3, #8
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f023 0320 	bic.w	r3, r3, #32
 800519e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a24      	ldr	r2, [pc, #144]	; (8005240 <TIM_OC2_SetConfig+0xf0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d10d      	bne.n	80051d0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a1b      	ldr	r2, [pc, #108]	; (8005240 <TIM_OC2_SetConfig+0xf0>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00b      	beq.n	80051f0 <TIM_OC2_SetConfig+0xa0>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a1a      	ldr	r2, [pc, #104]	; (8005244 <TIM_OC2_SetConfig+0xf4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d007      	beq.n	80051f0 <TIM_OC2_SetConfig+0xa0>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a19      	ldr	r2, [pc, #100]	; (8005248 <TIM_OC2_SetConfig+0xf8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_OC2_SetConfig+0xa0>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a18      	ldr	r2, [pc, #96]	; (800524c <TIM_OC2_SetConfig+0xfc>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d113      	bne.n	8005218 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051f6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051fe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40012c00 	.word	0x40012c00
 8005244:	40014000 	.word	0x40014000
 8005248:	40014400 	.word	0x40014400
 800524c:	40014800 	.word	0x40014800

08005250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0303 	bic.w	r3, r3, #3
 800528a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800529c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a23      	ldr	r2, [pc, #140]	; (800533c <TIM_OC3_SetConfig+0xec>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d10d      	bne.n	80052ce <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052cc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a1a      	ldr	r2, [pc, #104]	; (800533c <TIM_OC3_SetConfig+0xec>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00b      	beq.n	80052ee <TIM_OC3_SetConfig+0x9e>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a19      	ldr	r2, [pc, #100]	; (8005340 <TIM_OC3_SetConfig+0xf0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d007      	beq.n	80052ee <TIM_OC3_SetConfig+0x9e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a18      	ldr	r2, [pc, #96]	; (8005344 <TIM_OC3_SetConfig+0xf4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d003      	beq.n	80052ee <TIM_OC3_SetConfig+0x9e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a17      	ldr	r2, [pc, #92]	; (8005348 <TIM_OC3_SetConfig+0xf8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d113      	bne.n	8005316 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	4313      	orrs	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	621a      	str	r2, [r3, #32]
}
 8005330:	bf00      	nop
 8005332:	371c      	adds	r7, #28
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	40012c00 	.word	0x40012c00
 8005340:	40014000 	.word	0x40014000
 8005344:	40014400 	.word	0x40014400
 8005348:	40014800 	.word	0x40014800

0800534c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800537a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800539a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	031b      	lsls	r3, r3, #12
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a16      	ldr	r2, [pc, #88]	; (8005404 <TIM_OC4_SetConfig+0xb8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00b      	beq.n	80053c8 <TIM_OC4_SetConfig+0x7c>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a15      	ldr	r2, [pc, #84]	; (8005408 <TIM_OC4_SetConfig+0xbc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d007      	beq.n	80053c8 <TIM_OC4_SetConfig+0x7c>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a14      	ldr	r2, [pc, #80]	; (800540c <TIM_OC4_SetConfig+0xc0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d003      	beq.n	80053c8 <TIM_OC4_SetConfig+0x7c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a13      	ldr	r2, [pc, #76]	; (8005410 <TIM_OC4_SetConfig+0xc4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d109      	bne.n	80053dc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	019b      	lsls	r3, r3, #6
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40014000 	.word	0x40014000
 800540c:	40014400 	.word	0x40014400
 8005410:	40014800 	.word	0x40014800

08005414 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005458:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	041b      	lsls	r3, r3, #16
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a15      	ldr	r2, [pc, #84]	; (80054c0 <TIM_OC5_SetConfig+0xac>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00b      	beq.n	8005486 <TIM_OC5_SetConfig+0x72>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a14      	ldr	r2, [pc, #80]	; (80054c4 <TIM_OC5_SetConfig+0xb0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d007      	beq.n	8005486 <TIM_OC5_SetConfig+0x72>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <TIM_OC5_SetConfig+0xb4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_OC5_SetConfig+0x72>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a12      	ldr	r2, [pc, #72]	; (80054cc <TIM_OC5_SetConfig+0xb8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d109      	bne.n	800549a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800548c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	621a      	str	r2, [r3, #32]
}
 80054b4:	bf00      	nop
 80054b6:	371c      	adds	r7, #28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	40012c00 	.word	0x40012c00
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40014400 	.word	0x40014400
 80054cc:	40014800 	.word	0x40014800

080054d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005516:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	051b      	lsls	r3, r3, #20
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	4313      	orrs	r3, r2
 8005522:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a16      	ldr	r2, [pc, #88]	; (8005580 <TIM_OC6_SetConfig+0xb0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00b      	beq.n	8005544 <TIM_OC6_SetConfig+0x74>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a15      	ldr	r2, [pc, #84]	; (8005584 <TIM_OC6_SetConfig+0xb4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d007      	beq.n	8005544 <TIM_OC6_SetConfig+0x74>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a14      	ldr	r2, [pc, #80]	; (8005588 <TIM_OC6_SetConfig+0xb8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d003      	beq.n	8005544 <TIM_OC6_SetConfig+0x74>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a13      	ldr	r2, [pc, #76]	; (800558c <TIM_OC6_SetConfig+0xbc>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d109      	bne.n	8005558 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800554a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	029b      	lsls	r3, r3, #10
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40012c00 	.word	0x40012c00
 8005584:	40014000 	.word	0x40014000
 8005588:	40014400 	.word	0x40014400
 800558c:	40014800 	.word	0x40014800

08005590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f023 0201 	bic.w	r2, r3, #1
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f023 030a 	bic.w	r3, r3, #10
 80055cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	621a      	str	r2, [r3, #32]
}
 80055e2:	bf00      	nop
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b087      	sub	sp, #28
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	f023 0210 	bic.w	r2, r3, #16
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005618:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	031b      	lsls	r3, r3, #12
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800562a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	621a      	str	r2, [r3, #32]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800564e:	b480      	push	{r7}
 8005650:	b085      	sub	sp, #20
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	f043 0307 	orr.w	r3, r3, #7
 8005670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	609a      	str	r2, [r3, #8]
}
 8005678:	bf00      	nop
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800569e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	021a      	lsls	r2, r3, #8
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	609a      	str	r2, [r3, #8]
}
 80056b8:	bf00      	nop
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	2201      	movs	r2, #1
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a1a      	ldr	r2, [r3, #32]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	43db      	mvns	r3, r3
 80056e6:	401a      	ands	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1a      	ldr	r2, [r3, #32]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f003 031f 	and.w	r3, r3, #31
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	fa01 f303 	lsl.w	r3, r1, r3
 80056fc:	431a      	orrs	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
	...

08005710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005724:	2302      	movs	r3, #2
 8005726:	e04f      	b.n	80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a21      	ldr	r2, [pc, #132]	; (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d108      	bne.n	8005764 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005758:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a14      	ldr	r2, [pc, #80]	; (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d009      	beq.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005790:	d004      	beq.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a10      	ldr	r2, [pc, #64]	; (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d10c      	bne.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	40012c00 	.word	0x40012c00
 80057d8:	40014000 	.word	0x40014000

080057dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e060      	b.n	80058ba <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4313      	orrs	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	041b      	lsls	r3, r3, #16
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a14      	ldr	r2, [pc, #80]	; (80058c8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d115      	bne.n	80058a8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	051b      	lsls	r3, r3, #20
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	40012c00 	.word	0x40012c00

080058cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800591a:	2b84      	cmp	r3, #132	; 0x84
 800591c:	d005      	beq.n	800592a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800591e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4413      	add	r3, r2
 8005926:	3303      	adds	r3, #3
 8005928:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800592a:	68fb      	ldr	r3, [r7, #12]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800593c:	f000 ffbe 	bl	80068bc <vTaskStartScheduler>
  
  return osOK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	bd80      	pop	{r7, pc}

08005946 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005946:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005948:	b089      	sub	sp, #36	; 0x24
 800594a:	af04      	add	r7, sp, #16
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d020      	beq.n	800599a <osThreadCreate+0x54>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01c      	beq.n	800599a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685c      	ldr	r4, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681d      	ldr	r5, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691e      	ldr	r6, [r3, #16]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff ffc8 	bl	8005908 <makeFreeRtosPriority>
 8005978:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005982:	9202      	str	r2, [sp, #8]
 8005984:	9301      	str	r3, [sp, #4]
 8005986:	9100      	str	r1, [sp, #0]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	4632      	mov	r2, r6
 800598c:	4629      	mov	r1, r5
 800598e:	4620      	mov	r0, r4
 8005990:	f000 fdd6 	bl	8006540 <xTaskCreateStatic>
 8005994:	4603      	mov	r3, r0
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	e01c      	b.n	80059d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685c      	ldr	r4, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059a6:	b29e      	uxth	r6, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff ffaa 	bl	8005908 <makeFreeRtosPriority>
 80059b4:	4602      	mov	r2, r0
 80059b6:	f107 030c 	add.w	r3, r7, #12
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	9200      	str	r2, [sp, #0]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	4632      	mov	r2, r6
 80059c2:	4629      	mov	r1, r5
 80059c4:	4620      	mov	r0, r4
 80059c6:	f000 fe17 	bl	80065f8 <xTaskCreate>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d001      	beq.n	80059d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80059d0:	2300      	movs	r3, #0
 80059d2:	e000      	b.n	80059d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80059d4:	68fb      	ldr	r3, [r7, #12]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059de <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80059e4:	201c      	movs	r0, #28
 80059e6:	f002 fa77 	bl	8007ed8 <pvPortMalloc>
 80059ea:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3304      	adds	r3, #4
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 f808 	bl	8005a12 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005a08:	687b      	ldr	r3, [r7, #4]
	}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f103 0208 	add.w	r2, r3, #8
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f103 0208 	add.w	r2, r3, #8
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f103 0208 	add.w	r2, r3, #8
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	601a      	str	r2, [r3, #0]
}
 8005aa8:	bf00      	nop
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aca:	d103      	bne.n	8005ad4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	e00c      	b.n	8005aee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	e002      	b.n	8005ae2 <vListInsert+0x2e>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d2f6      	bcs.n	8005adc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	601a      	str	r2, [r3, #0]
}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b26:	b480      	push	{r7}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6892      	ldr	r2, [r2, #8]
 8005b3c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6852      	ldr	r2, [r2, #4]
 8005b46:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d103      	bne.n	8005b5a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	1e5a      	subs	r2, r3, #1
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ba6:	f002 f875 	bl	8007c94 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb2:	68f9      	ldr	r1, [r7, #12]
 8005bb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005bb6:	fb01 f303 	mul.w	r3, r1, r3
 8005bba:	441a      	add	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	68f9      	ldr	r1, [r7, #12]
 8005bda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005bdc:	fb01 f303 	mul.w	r3, r1, r3
 8005be0:	441a      	add	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	22ff      	movs	r2, #255	; 0xff
 8005bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	22ff      	movs	r2, #255	; 0xff
 8005bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d114      	bne.n	8005c26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d01a      	beq.n	8005c3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3310      	adds	r3, #16
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 f8e1 	bl	8006dd0 <xTaskRemoveFromEventList>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d012      	beq.n	8005c3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c14:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <xQueueGenericReset+0xcc>)
 8005c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	e009      	b.n	8005c3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	3310      	adds	r3, #16
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff fef1 	bl	8005a12 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3324      	adds	r3, #36	; 0x24
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff feec 	bl	8005a12 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c3a:	f002 f85b 	bl	8007cf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c3e:	2301      	movs	r3, #1
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	e000ed04 	.word	0xe000ed04

08005c4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08e      	sub	sp, #56	; 0x38
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c8e:	bf00      	nop
 8005c90:	e7fe      	b.n	8005c90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <xQueueGenericCreateStatic+0x52>
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <xQueueGenericCreateStatic+0x56>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <xQueueGenericCreateStatic+0x58>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	623b      	str	r3, [r7, #32]
}
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <xQueueGenericCreateStatic+0x7e>
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <xQueueGenericCreateStatic+0x82>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <xQueueGenericCreateStatic+0x84>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	61fb      	str	r3, [r7, #28]
}
 8005ce6:	bf00      	nop
 8005ce8:	e7fe      	b.n	8005ce8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005cea:	2348      	movs	r3, #72	; 0x48
 8005cec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b48      	cmp	r3, #72	; 0x48
 8005cf2:	d00a      	beq.n	8005d0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	61bb      	str	r3, [r7, #24]
}
 8005d06:	bf00      	nop
 8005d08:	e7fe      	b.n	8005d08 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00d      	beq.n	8005d30 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d1c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	4613      	mov	r3, r2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f805 	bl	8005d3a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3730      	adds	r7, #48	; 0x30
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	607a      	str	r2, [r7, #4]
 8005d46:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d103      	bne.n	8005d56 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	e002      	b.n	8005d5c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d68:	2101      	movs	r1, #1
 8005d6a:	69b8      	ldr	r0, [r7, #24]
 8005d6c:	f7ff ff06 	bl	8005b7c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d70:	bf00      	nop
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08e      	sub	sp, #56	; 0x38
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d86:	2300      	movs	r3, #0
 8005d88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <xQueueGenericSend+0x32>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d103      	bne.n	8005db8 <xQueueGenericSend+0x40>
 8005db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <xQueueGenericSend+0x44>
 8005db8:	2301      	movs	r3, #1
 8005dba:	e000      	b.n	8005dbe <xQueueGenericSend+0x46>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <xQueueGenericSend+0x60>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005dd4:	bf00      	nop
 8005dd6:	e7fe      	b.n	8005dd6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d103      	bne.n	8005de6 <xQueueGenericSend+0x6e>
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d101      	bne.n	8005dea <xQueueGenericSend+0x72>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <xQueueGenericSend+0x74>
 8005dea:	2300      	movs	r3, #0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10a      	bne.n	8005e06 <xQueueGenericSend+0x8e>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	623b      	str	r3, [r7, #32]
}
 8005e02:	bf00      	nop
 8005e04:	e7fe      	b.n	8005e04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e06:	f001 f9a5 	bl	8007154 <xTaskGetSchedulerState>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <xQueueGenericSend+0x9e>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <xQueueGenericSend+0xa2>
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <xQueueGenericSend+0xa4>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10a      	bne.n	8005e36 <xQueueGenericSend+0xbe>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	61fb      	str	r3, [r7, #28]
}
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e36:	f001 ff2d 	bl	8007c94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d302      	bcc.n	8005e4c <xQueueGenericSend+0xd4>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d129      	bne.n	8005ea0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	68b9      	ldr	r1, [r7, #8]
 8005e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e52:	f000 fa07 	bl	8006264 <prvCopyDataToQueue>
 8005e56:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d010      	beq.n	8005e82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e62:	3324      	adds	r3, #36	; 0x24
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 ffb3 	bl	8006dd0 <xTaskRemoveFromEventList>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d013      	beq.n	8005e98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e70:	4b3f      	ldr	r3, [pc, #252]	; (8005f70 <xQueueGenericSend+0x1f8>)
 8005e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	e00a      	b.n	8005e98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d007      	beq.n	8005e98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e88:	4b39      	ldr	r3, [pc, #228]	; (8005f70 <xQueueGenericSend+0x1f8>)
 8005e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e98:	f001 ff2c 	bl	8007cf4 <vPortExitCritical>
				return pdPASS;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e063      	b.n	8005f68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d103      	bne.n	8005eae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ea6:	f001 ff25 	bl	8007cf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e05c      	b.n	8005f68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d106      	bne.n	8005ec2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005eb4:	f107 0314 	add.w	r3, r7, #20
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 ffeb 	bl	8006e94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ec2:	f001 ff17 	bl	8007cf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ec6:	f000 fd5f 	bl	8006988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005eca:	f001 fee3 	bl	8007c94 <vPortEnterCritical>
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ed4:	b25b      	sxtb	r3, r3
 8005ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eda:	d103      	bne.n	8005ee4 <xQueueGenericSend+0x16c>
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eea:	b25b      	sxtb	r3, r3
 8005eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef0:	d103      	bne.n	8005efa <xQueueGenericSend+0x182>
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005efa:	f001 fefb 	bl	8007cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005efe:	1d3a      	adds	r2, r7, #4
 8005f00:	f107 0314 	add.w	r3, r7, #20
 8005f04:	4611      	mov	r1, r2
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 ffda 	bl	8006ec0 <xTaskCheckForTimeOut>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d124      	bne.n	8005f5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f14:	f000 fa9e 	bl	8006454 <prvIsQueueFull>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d018      	beq.n	8005f50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	3310      	adds	r3, #16
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	4611      	mov	r1, r2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 ff02 	bl	8006d30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f2e:	f000 fa29 	bl	8006384 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f32:	f000 fd37 	bl	80069a4 <xTaskResumeAll>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f47f af7c 	bne.w	8005e36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f3e:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <xQueueGenericSend+0x1f8>)
 8005f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	e772      	b.n	8005e36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f52:	f000 fa17 	bl	8006384 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f56:	f000 fd25 	bl	80069a4 <xTaskResumeAll>
 8005f5a:	e76c      	b.n	8005e36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f5e:	f000 fa11 	bl	8006384 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f62:	f000 fd1f 	bl	80069a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f66:	2300      	movs	r3, #0
		}
	}
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3738      	adds	r7, #56	; 0x38
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	e000ed04 	.word	0xe000ed04

08005f74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08e      	sub	sp, #56	; 0x38
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d103      	bne.n	8005fb0 <xQueueGenericSendFromISR+0x3c>
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <xQueueGenericSendFromISR+0x40>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e000      	b.n	8005fb6 <xQueueGenericSendFromISR+0x42>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	623b      	str	r3, [r7, #32]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d103      	bne.n	8005fde <xQueueGenericSendFromISR+0x6a>
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <xQueueGenericSendFromISR+0x6e>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <xQueueGenericSendFromISR+0x70>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	61fb      	str	r3, [r7, #28]
}
 8005ffa:	bf00      	nop
 8005ffc:	e7fe      	b.n	8005ffc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ffe:	f001 ff2b 	bl	8007e58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006002:	f3ef 8211 	mrs	r2, BASEPRI
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	61ba      	str	r2, [r7, #24]
 8006018:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800601a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800601c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006026:	429a      	cmp	r2, r3
 8006028:	d302      	bcc.n	8006030 <xQueueGenericSendFromISR+0xbc>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d12c      	bne.n	800608a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006040:	f000 f910 	bl	8006264 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006044:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604c:	d112      	bne.n	8006074 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	2b00      	cmp	r3, #0
 8006054:	d016      	beq.n	8006084 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	3324      	adds	r3, #36	; 0x24
 800605a:	4618      	mov	r0, r3
 800605c:	f000 feb8 	bl	8006dd0 <xTaskRemoveFromEventList>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00e      	beq.n	8006084 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00b      	beq.n	8006084 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	e007      	b.n	8006084 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006074:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006078:	3301      	adds	r3, #1
 800607a:	b2db      	uxtb	r3, r3
 800607c:	b25a      	sxtb	r2, r3
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006084:	2301      	movs	r3, #1
 8006086:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006088:	e001      	b.n	800608e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800608a:	2300      	movs	r3, #0
 800608c:	637b      	str	r3, [r7, #52]	; 0x34
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006098:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800609a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800609c:	4618      	mov	r0, r3
 800609e:	3738      	adds	r7, #56	; 0x38
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08c      	sub	sp, #48	; 0x30
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10a      	bne.n	80060d4 <xQueueReceive+0x30>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	623b      	str	r3, [r7, #32]
}
 80060d0:	bf00      	nop
 80060d2:	e7fe      	b.n	80060d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d103      	bne.n	80060e2 <xQueueReceive+0x3e>
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <xQueueReceive+0x42>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e000      	b.n	80060e8 <xQueueReceive+0x44>
 80060e6:	2300      	movs	r3, #0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10a      	bne.n	8006102 <xQueueReceive+0x5e>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	61fb      	str	r3, [r7, #28]
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006102:	f001 f827 	bl	8007154 <xTaskGetSchedulerState>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d102      	bne.n	8006112 <xQueueReceive+0x6e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <xQueueReceive+0x72>
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <xQueueReceive+0x74>
 8006116:	2300      	movs	r3, #0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10a      	bne.n	8006132 <xQueueReceive+0x8e>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	61bb      	str	r3, [r7, #24]
}
 800612e:	bf00      	nop
 8006130:	e7fe      	b.n	8006130 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006132:	f001 fdaf 	bl	8007c94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01f      	beq.n	8006182 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006146:	f000 f8f7 	bl	8006338 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	1e5a      	subs	r2, r3, #1
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00f      	beq.n	800617a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	3310      	adds	r3, #16
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fe36 	bl	8006dd0 <xTaskRemoveFromEventList>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d007      	beq.n	800617a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800616a:	4b3d      	ldr	r3, [pc, #244]	; (8006260 <xQueueReceive+0x1bc>)
 800616c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800617a:	f001 fdbb 	bl	8007cf4 <vPortExitCritical>
				return pdPASS;
 800617e:	2301      	movs	r3, #1
 8006180:	e069      	b.n	8006256 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d103      	bne.n	8006190 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006188:	f001 fdb4 	bl	8007cf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800618c:	2300      	movs	r3, #0
 800618e:	e062      	b.n	8006256 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006196:	f107 0310 	add.w	r3, r7, #16
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fe7a 	bl	8006e94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061a4:	f001 fda6 	bl	8007cf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061a8:	f000 fbee 	bl	8006988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061ac:	f001 fd72 	bl	8007c94 <vPortEnterCritical>
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061b6:	b25b      	sxtb	r3, r3
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d103      	bne.n	80061c6 <xQueueReceive+0x122>
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061cc:	b25b      	sxtb	r3, r3
 80061ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d2:	d103      	bne.n	80061dc <xQueueReceive+0x138>
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061dc:	f001 fd8a 	bl	8007cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061e0:	1d3a      	adds	r2, r7, #4
 80061e2:	f107 0310 	add.w	r3, r7, #16
 80061e6:	4611      	mov	r1, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fe69 	bl	8006ec0 <xTaskCheckForTimeOut>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d123      	bne.n	800623c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f6:	f000 f917 	bl	8006428 <prvIsQueueEmpty>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d017      	beq.n	8006230 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	3324      	adds	r3, #36	; 0x24
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	4611      	mov	r1, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f000 fd91 	bl	8006d30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800620e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006210:	f000 f8b8 	bl	8006384 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006214:	f000 fbc6 	bl	80069a4 <xTaskResumeAll>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d189      	bne.n	8006132 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800621e:	4b10      	ldr	r3, [pc, #64]	; (8006260 <xQueueReceive+0x1bc>)
 8006220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	e780      	b.n	8006132 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006232:	f000 f8a7 	bl	8006384 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006236:	f000 fbb5 	bl	80069a4 <xTaskResumeAll>
 800623a:	e77a      	b.n	8006132 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800623c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800623e:	f000 f8a1 	bl	8006384 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006242:	f000 fbaf 	bl	80069a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006248:	f000 f8ee 	bl	8006428 <prvIsQueueEmpty>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	f43f af6f 	beq.w	8006132 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006254:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006256:	4618      	mov	r0, r3
 8006258:	3730      	adds	r7, #48	; 0x30
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	e000ed04 	.word	0xe000ed04

08006264 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006270:	2300      	movs	r3, #0
 8006272:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10d      	bne.n	800629e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d14d      	bne.n	8006326 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 ff7e 	bl	8007190 <xTaskPriorityDisinherit>
 8006294:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	605a      	str	r2, [r3, #4]
 800629c:	e043      	b.n	8006326 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d119      	bne.n	80062d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6898      	ldr	r0, [r3, #8]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	461a      	mov	r2, r3
 80062ae:	68b9      	ldr	r1, [r7, #8]
 80062b0:	f002 f810 	bl	80082d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	441a      	add	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d32b      	bcc.n	8006326 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	609a      	str	r2, [r3, #8]
 80062d6:	e026      	b.n	8006326 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68d8      	ldr	r0, [r3, #12]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e0:	461a      	mov	r2, r3
 80062e2:	68b9      	ldr	r1, [r7, #8]
 80062e4:	f001 fff6 	bl	80082d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f0:	425b      	negs	r3, r3
 80062f2:	441a      	add	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	68da      	ldr	r2, [r3, #12]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d207      	bcs.n	8006314 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	425b      	negs	r3, r3
 800630e:	441a      	add	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b02      	cmp	r3, #2
 8006318:	d105      	bne.n	8006326 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	3b01      	subs	r3, #1
 8006324:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800632e:	697b      	ldr	r3, [r7, #20]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	2b00      	cmp	r3, #0
 8006348:	d018      	beq.n	800637c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	441a      	add	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	429a      	cmp	r2, r3
 8006362:	d303      	bcc.n	800636c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68d9      	ldr	r1, [r3, #12]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	461a      	mov	r2, r3
 8006376:	6838      	ldr	r0, [r7, #0]
 8006378:	f001 ffac 	bl	80082d4 <memcpy>
	}
}
 800637c:	bf00      	nop
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800638c:	f001 fc82 	bl	8007c94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006396:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006398:	e011      	b.n	80063be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d012      	beq.n	80063c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3324      	adds	r3, #36	; 0x24
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fd12 	bl	8006dd0 <xTaskRemoveFromEventList>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063b2:	f000 fde7 	bl	8006f84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	dce9      	bgt.n	800639a <prvUnlockQueue+0x16>
 80063c6:	e000      	b.n	80063ca <prvUnlockQueue+0x46>
					break;
 80063c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	22ff      	movs	r2, #255	; 0xff
 80063ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80063d2:	f001 fc8f 	bl	8007cf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80063d6:	f001 fc5d 	bl	8007c94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063e2:	e011      	b.n	8006408 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d012      	beq.n	8006412 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3310      	adds	r3, #16
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 fced 	bl	8006dd0 <xTaskRemoveFromEventList>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80063fc:	f000 fdc2 	bl	8006f84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	3b01      	subs	r3, #1
 8006404:	b2db      	uxtb	r3, r3
 8006406:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006408:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800640c:	2b00      	cmp	r3, #0
 800640e:	dce9      	bgt.n	80063e4 <prvUnlockQueue+0x60>
 8006410:	e000      	b.n	8006414 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006412:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	22ff      	movs	r2, #255	; 0xff
 8006418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800641c:	f001 fc6a 	bl	8007cf4 <vPortExitCritical>
}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006430:	f001 fc30 	bl	8007c94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006438:	2b00      	cmp	r3, #0
 800643a:	d102      	bne.n	8006442 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800643c:	2301      	movs	r3, #1
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	e001      	b.n	8006446 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006446:	f001 fc55 	bl	8007cf4 <vPortExitCritical>

	return xReturn;
 800644a:	68fb      	ldr	r3, [r7, #12]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800645c:	f001 fc1a 	bl	8007c94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006468:	429a      	cmp	r2, r3
 800646a:	d102      	bne.n	8006472 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800646c:	2301      	movs	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	e001      	b.n	8006476 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006476:	f001 fc3d 	bl	8007cf4 <vPortExitCritical>

	return xReturn;
 800647a:	68fb      	ldr	r3, [r7, #12]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	e014      	b.n	80064be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006494:	4a0f      	ldr	r2, [pc, #60]	; (80064d4 <vQueueAddToRegistry+0x50>)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10b      	bne.n	80064b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064a0:	490c      	ldr	r1, [pc, #48]	; (80064d4 <vQueueAddToRegistry+0x50>)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064aa:	4a0a      	ldr	r2, [pc, #40]	; (80064d4 <vQueueAddToRegistry+0x50>)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	4413      	add	r3, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80064b6:	e006      	b.n	80064c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3301      	adds	r3, #1
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b07      	cmp	r3, #7
 80064c2:	d9e7      	bls.n	8006494 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80064c4:	bf00      	nop
 80064c6:	bf00      	nop
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	2000047c 	.word	0x2000047c

080064d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80064e8:	f001 fbd4 	bl	8007c94 <vPortEnterCritical>
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064f2:	b25b      	sxtb	r3, r3
 80064f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f8:	d103      	bne.n	8006502 <vQueueWaitForMessageRestricted+0x2a>
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006508:	b25b      	sxtb	r3, r3
 800650a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650e:	d103      	bne.n	8006518 <vQueueWaitForMessageRestricted+0x40>
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006518:	f001 fbec 	bl	8007cf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	2b00      	cmp	r3, #0
 8006522:	d106      	bne.n	8006532 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	3324      	adds	r3, #36	; 0x24
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	68b9      	ldr	r1, [r7, #8]
 800652c:	4618      	mov	r0, r3
 800652e:	f000 fc23 	bl	8006d78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006532:	6978      	ldr	r0, [r7, #20]
 8006534:	f7ff ff26 	bl	8006384 <prvUnlockQueue>
	}
 8006538:	bf00      	nop
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08e      	sub	sp, #56	; 0x38
 8006544:	af04      	add	r7, sp, #16
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800654e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	623b      	str	r3, [r7, #32]
}
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <xTaskCreateStatic+0x46>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	61fb      	str	r3, [r7, #28]
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006586:	2354      	movs	r3, #84	; 0x54
 8006588:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	2b54      	cmp	r3, #84	; 0x54
 800658e:	d00a      	beq.n	80065a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	61bb      	str	r3, [r7, #24]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01e      	beq.n	80065ea <xTaskCreateStatic+0xaa>
 80065ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d01b      	beq.n	80065ea <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065c4:	2300      	movs	r3, #0
 80065c6:	9303      	str	r3, [sp, #12]
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	9302      	str	r3, [sp, #8]
 80065cc:	f107 0314 	add.w	r3, r7, #20
 80065d0:	9301      	str	r3, [sp, #4]
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f850 	bl	8006682 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065e4:	f000 f8cc 	bl	8006780 <prvAddNewTaskToReadyList>
 80065e8:	e001      	b.n	80065ee <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065ee:	697b      	ldr	r3, [r7, #20]
	}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3728      	adds	r7, #40	; 0x28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08c      	sub	sp, #48	; 0x30
 80065fc:	af04      	add	r7, sp, #16
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	4613      	mov	r3, r2
 8006606:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006608:	88fb      	ldrh	r3, [r7, #6]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4618      	mov	r0, r3
 800660e:	f001 fc63 	bl	8007ed8 <pvPortMalloc>
 8006612:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00e      	beq.n	8006638 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800661a:	2054      	movs	r0, #84	; 0x54
 800661c:	f001 fc5c 	bl	8007ed8 <pvPortMalloc>
 8006620:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d003      	beq.n	8006630 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	631a      	str	r2, [r3, #48]	; 0x30
 800662e:	e005      	b.n	800663c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006630:	6978      	ldr	r0, [r7, #20]
 8006632:	f001 fd15 	bl	8008060 <vPortFree>
 8006636:	e001      	b.n	800663c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006638:	2300      	movs	r3, #0
 800663a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d017      	beq.n	8006672 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800664a:	88fa      	ldrh	r2, [r7, #6]
 800664c:	2300      	movs	r3, #0
 800664e:	9303      	str	r3, [sp, #12]
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	9302      	str	r3, [sp, #8]
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006656:	9301      	str	r3, [sp, #4]
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 f80e 	bl	8006682 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006666:	69f8      	ldr	r0, [r7, #28]
 8006668:	f000 f88a 	bl	8006780 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800666c:	2301      	movs	r3, #1
 800666e:	61bb      	str	r3, [r7, #24]
 8006670:	e002      	b.n	8006678 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006672:	f04f 33ff 	mov.w	r3, #4294967295
 8006676:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006678:	69bb      	ldr	r3, [r7, #24]
	}
 800667a:	4618      	mov	r0, r3
 800667c:	3720      	adds	r7, #32
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b088      	sub	sp, #32
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	607a      	str	r2, [r7, #4]
 800668e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800669a:	3b01      	subs	r3, #1
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	f023 0307 	bic.w	r3, r3, #7
 80066a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00a      	beq.n	80066ca <prvInitialiseNewTask+0x48>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	617b      	str	r3, [r7, #20]
}
 80066c6:	bf00      	nop
 80066c8:	e7fe      	b.n	80066c8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	e012      	b.n	80066f6 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	7819      	ldrb	r1, [r3, #0]
 80066d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	4413      	add	r3, r2
 80066de:	3334      	adds	r3, #52	; 0x34
 80066e0:	460a      	mov	r2, r1
 80066e2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	4413      	add	r3, r2
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d006      	beq.n	80066fe <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	3301      	adds	r3, #1
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	2b0f      	cmp	r3, #15
 80066fa:	d9e9      	bls.n	80066d0 <prvInitialiseNewTask+0x4e>
 80066fc:	e000      	b.n	8006700 <prvInitialiseNewTask+0x7e>
		{
			break;
 80066fe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	2b06      	cmp	r3, #6
 800670c:	d901      	bls.n	8006712 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800670e:	2306      	movs	r3, #6
 8006710:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006716:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800671c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	2200      	movs	r2, #0
 8006722:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	3304      	adds	r3, #4
 8006728:	4618      	mov	r0, r3
 800672a:	f7ff f992 	bl	8005a52 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	3318      	adds	r3, #24
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff f98d 	bl	8005a52 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800673c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	f1c3 0207 	rsb	r2, r3, #7
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	2200      	movs	r2, #0
 8006752:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	68f9      	ldr	r1, [r7, #12]
 8006760:	69b8      	ldr	r0, [r7, #24]
 8006762:	f001 f967 	bl	8007a34 <pxPortInitialiseStack>
 8006766:	4602      	mov	r2, r0
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800676c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006776:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006778:	bf00      	nop
 800677a:	3720      	adds	r7, #32
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006788:	f001 fa84 	bl	8007c94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800678c:	4b2a      	ldr	r3, [pc, #168]	; (8006838 <prvAddNewTaskToReadyList+0xb8>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3301      	adds	r3, #1
 8006792:	4a29      	ldr	r2, [pc, #164]	; (8006838 <prvAddNewTaskToReadyList+0xb8>)
 8006794:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006796:	4b29      	ldr	r3, [pc, #164]	; (800683c <prvAddNewTaskToReadyList+0xbc>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d109      	bne.n	80067b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800679e:	4a27      	ldr	r2, [pc, #156]	; (800683c <prvAddNewTaskToReadyList+0xbc>)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067a4:	4b24      	ldr	r3, [pc, #144]	; (8006838 <prvAddNewTaskToReadyList+0xb8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d110      	bne.n	80067ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067ac:	f000 fc0e 	bl	8006fcc <prvInitialiseTaskLists>
 80067b0:	e00d      	b.n	80067ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067b2:	4b23      	ldr	r3, [pc, #140]	; (8006840 <prvAddNewTaskToReadyList+0xc0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067ba:	4b20      	ldr	r3, [pc, #128]	; (800683c <prvAddNewTaskToReadyList+0xbc>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d802      	bhi.n	80067ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067c8:	4a1c      	ldr	r2, [pc, #112]	; (800683c <prvAddNewTaskToReadyList+0xbc>)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067ce:	4b1d      	ldr	r3, [pc, #116]	; (8006844 <prvAddNewTaskToReadyList+0xc4>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	4a1b      	ldr	r2, [pc, #108]	; (8006844 <prvAddNewTaskToReadyList+0xc4>)
 80067d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067dc:	2201      	movs	r2, #1
 80067de:	409a      	lsls	r2, r3
 80067e0:	4b19      	ldr	r3, [pc, #100]	; (8006848 <prvAddNewTaskToReadyList+0xc8>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	4a18      	ldr	r2, [pc, #96]	; (8006848 <prvAddNewTaskToReadyList+0xc8>)
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ee:	4613      	mov	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4a15      	ldr	r2, [pc, #84]	; (800684c <prvAddNewTaskToReadyList+0xcc>)
 80067f8:	441a      	add	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3304      	adds	r3, #4
 80067fe:	4619      	mov	r1, r3
 8006800:	4610      	mov	r0, r2
 8006802:	f7ff f933 	bl	8005a6c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006806:	f001 fa75 	bl	8007cf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800680a:	4b0d      	ldr	r3, [pc, #52]	; (8006840 <prvAddNewTaskToReadyList+0xc0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00e      	beq.n	8006830 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006812:	4b0a      	ldr	r3, [pc, #40]	; (800683c <prvAddNewTaskToReadyList+0xbc>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	429a      	cmp	r2, r3
 800681e:	d207      	bcs.n	8006830 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <prvAddNewTaskToReadyList+0xd0>)
 8006822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006830:	bf00      	nop
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	200005bc 	.word	0x200005bc
 800683c:	200004bc 	.word	0x200004bc
 8006840:	200005c8 	.word	0x200005c8
 8006844:	200005d8 	.word	0x200005d8
 8006848:	200005c4 	.word	0x200005c4
 800684c:	200004c0 	.word	0x200004c0
 8006850:	e000ed04 	.word	0xe000ed04

08006854 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d017      	beq.n	8006896 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006866:	4b13      	ldr	r3, [pc, #76]	; (80068b4 <vTaskDelay+0x60>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <vTaskDelay+0x30>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	60bb      	str	r3, [r7, #8]
}
 8006880:	bf00      	nop
 8006882:	e7fe      	b.n	8006882 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006884:	f000 f880 	bl	8006988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006888:	2100      	movs	r1, #0
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fd06 	bl	800729c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006890:	f000 f888 	bl	80069a4 <xTaskResumeAll>
 8006894:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d107      	bne.n	80068ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800689c:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <vTaskDelay+0x64>)
 800689e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	200005e4 	.word	0x200005e4
 80068b8:	e000ed04 	.word	0xe000ed04

080068bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08a      	sub	sp, #40	; 0x28
 80068c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068c6:	2300      	movs	r3, #0
 80068c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068ca:	463a      	mov	r2, r7
 80068cc:	1d39      	adds	r1, r7, #4
 80068ce:	f107 0308 	add.w	r3, r7, #8
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7f9 fce2 	bl	800029c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	9202      	str	r2, [sp, #8]
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	2300      	movs	r3, #0
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	2300      	movs	r3, #0
 80068e8:	460a      	mov	r2, r1
 80068ea:	4921      	ldr	r1, [pc, #132]	; (8006970 <vTaskStartScheduler+0xb4>)
 80068ec:	4821      	ldr	r0, [pc, #132]	; (8006974 <vTaskStartScheduler+0xb8>)
 80068ee:	f7ff fe27 	bl	8006540 <xTaskCreateStatic>
 80068f2:	4603      	mov	r3, r0
 80068f4:	4a20      	ldr	r2, [pc, #128]	; (8006978 <vTaskStartScheduler+0xbc>)
 80068f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068f8:	4b1f      	ldr	r3, [pc, #124]	; (8006978 <vTaskStartScheduler+0xbc>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006900:	2301      	movs	r3, #1
 8006902:	617b      	str	r3, [r7, #20]
 8006904:	e001      	b.n	800690a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006906:	2300      	movs	r3, #0
 8006908:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d102      	bne.n	8006916 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006910:	f000 fd2a 	bl	8007368 <xTimerCreateTimerTask>
 8006914:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d116      	bne.n	800694a <vTaskStartScheduler+0x8e>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	613b      	str	r3, [r7, #16]
}
 800692e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006930:	4b12      	ldr	r3, [pc, #72]	; (800697c <vTaskStartScheduler+0xc0>)
 8006932:	f04f 32ff 	mov.w	r2, #4294967295
 8006936:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006938:	4b11      	ldr	r3, [pc, #68]	; (8006980 <vTaskStartScheduler+0xc4>)
 800693a:	2201      	movs	r2, #1
 800693c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800693e:	4b11      	ldr	r3, [pc, #68]	; (8006984 <vTaskStartScheduler+0xc8>)
 8006940:	2200      	movs	r2, #0
 8006942:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006944:	f001 f904 	bl	8007b50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006948:	e00e      	b.n	8006968 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006950:	d10a      	bne.n	8006968 <vTaskStartScheduler+0xac>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	60fb      	str	r3, [r7, #12]
}
 8006964:	bf00      	nop
 8006966:	e7fe      	b.n	8006966 <vTaskStartScheduler+0xaa>
}
 8006968:	bf00      	nop
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	08008394 	.word	0x08008394
 8006974:	08006f9d 	.word	0x08006f9d
 8006978:	200005e0 	.word	0x200005e0
 800697c:	200005dc 	.word	0x200005dc
 8006980:	200005c8 	.word	0x200005c8
 8006984:	200005c0 	.word	0x200005c0

08006988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800698c:	4b04      	ldr	r3, [pc, #16]	; (80069a0 <vTaskSuspendAll+0x18>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3301      	adds	r3, #1
 8006992:	4a03      	ldr	r2, [pc, #12]	; (80069a0 <vTaskSuspendAll+0x18>)
 8006994:	6013      	str	r3, [r2, #0]
}
 8006996:	bf00      	nop
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	200005e4 	.word	0x200005e4

080069a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069b2:	4b41      	ldr	r3, [pc, #260]	; (8006ab8 <xTaskResumeAll+0x114>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10a      	bne.n	80069d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	603b      	str	r3, [r7, #0]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069d0:	f001 f960 	bl	8007c94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069d4:	4b38      	ldr	r3, [pc, #224]	; (8006ab8 <xTaskResumeAll+0x114>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3b01      	subs	r3, #1
 80069da:	4a37      	ldr	r2, [pc, #220]	; (8006ab8 <xTaskResumeAll+0x114>)
 80069dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069de:	4b36      	ldr	r3, [pc, #216]	; (8006ab8 <xTaskResumeAll+0x114>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d161      	bne.n	8006aaa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069e6:	4b35      	ldr	r3, [pc, #212]	; (8006abc <xTaskResumeAll+0x118>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d05d      	beq.n	8006aaa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069ee:	e02e      	b.n	8006a4e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80069f0:	4b33      	ldr	r3, [pc, #204]	; (8006ac0 <xTaskResumeAll+0x11c>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3318      	adds	r3, #24
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7ff f892 	bl	8005b26 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3304      	adds	r3, #4
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff f88d 	bl	8005b26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	2201      	movs	r2, #1
 8006a12:	409a      	lsls	r2, r3
 8006a14:	4b2b      	ldr	r3, [pc, #172]	; (8006ac4 <xTaskResumeAll+0x120>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	4a2a      	ldr	r2, [pc, #168]	; (8006ac4 <xTaskResumeAll+0x120>)
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4a27      	ldr	r2, [pc, #156]	; (8006ac8 <xTaskResumeAll+0x124>)
 8006a2c:	441a      	add	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3304      	adds	r3, #4
 8006a32:	4619      	mov	r1, r3
 8006a34:	4610      	mov	r0, r2
 8006a36:	f7ff f819 	bl	8005a6c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3e:	4b23      	ldr	r3, [pc, #140]	; (8006acc <xTaskResumeAll+0x128>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d302      	bcc.n	8006a4e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006a48:	4b21      	ldr	r3, [pc, #132]	; (8006ad0 <xTaskResumeAll+0x12c>)
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a4e:	4b1c      	ldr	r3, [pc, #112]	; (8006ac0 <xTaskResumeAll+0x11c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1cc      	bne.n	80069f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a5c:	f000 fb54 	bl	8007108 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a60:	4b1c      	ldr	r3, [pc, #112]	; (8006ad4 <xTaskResumeAll+0x130>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d010      	beq.n	8006a8e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a6c:	f000 f846 	bl	8006afc <xTaskIncrementTick>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006a76:	4b16      	ldr	r3, [pc, #88]	; (8006ad0 <xTaskResumeAll+0x12c>)
 8006a78:	2201      	movs	r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1f1      	bne.n	8006a6c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006a88:	4b12      	ldr	r3, [pc, #72]	; (8006ad4 <xTaskResumeAll+0x130>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a8e:	4b10      	ldr	r3, [pc, #64]	; (8006ad0 <xTaskResumeAll+0x12c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d009      	beq.n	8006aaa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a96:	2301      	movs	r3, #1
 8006a98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a9a:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <xTaskResumeAll+0x134>)
 8006a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006aaa:	f001 f923 	bl	8007cf4 <vPortExitCritical>

	return xAlreadyYielded;
 8006aae:	68bb      	ldr	r3, [r7, #8]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	200005e4 	.word	0x200005e4
 8006abc:	200005bc 	.word	0x200005bc
 8006ac0:	2000057c 	.word	0x2000057c
 8006ac4:	200005c4 	.word	0x200005c4
 8006ac8:	200004c0 	.word	0x200004c0
 8006acc:	200004bc 	.word	0x200004bc
 8006ad0:	200005d0 	.word	0x200005d0
 8006ad4:	200005cc 	.word	0x200005cc
 8006ad8:	e000ed04 	.word	0xe000ed04

08006adc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ae2:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <xTaskGetTickCount+0x1c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ae8:	687b      	ldr	r3, [r7, #4]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	200005c0 	.word	0x200005c0

08006afc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b06:	4b51      	ldr	r3, [pc, #324]	; (8006c4c <xTaskIncrementTick+0x150>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f040 808d 	bne.w	8006c2a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b10:	4b4f      	ldr	r3, [pc, #316]	; (8006c50 <xTaskIncrementTick+0x154>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3301      	adds	r3, #1
 8006b16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b18:	4a4d      	ldr	r2, [pc, #308]	; (8006c50 <xTaskIncrementTick+0x154>)
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d120      	bne.n	8006b66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b24:	4b4b      	ldr	r3, [pc, #300]	; (8006c54 <xTaskIncrementTick+0x158>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00a      	beq.n	8006b44 <xTaskIncrementTick+0x48>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	603b      	str	r3, [r7, #0]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <xTaskIncrementTick+0x46>
 8006b44:	4b43      	ldr	r3, [pc, #268]	; (8006c54 <xTaskIncrementTick+0x158>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	4b43      	ldr	r3, [pc, #268]	; (8006c58 <xTaskIncrementTick+0x15c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a41      	ldr	r2, [pc, #260]	; (8006c54 <xTaskIncrementTick+0x158>)
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	4a41      	ldr	r2, [pc, #260]	; (8006c58 <xTaskIncrementTick+0x15c>)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	4b40      	ldr	r3, [pc, #256]	; (8006c5c <xTaskIncrementTick+0x160>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	4a3f      	ldr	r2, [pc, #252]	; (8006c5c <xTaskIncrementTick+0x160>)
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	f000 fad1 	bl	8007108 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b66:	4b3e      	ldr	r3, [pc, #248]	; (8006c60 <xTaskIncrementTick+0x164>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d34d      	bcc.n	8006c0c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b70:	4b38      	ldr	r3, [pc, #224]	; (8006c54 <xTaskIncrementTick+0x158>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <xTaskIncrementTick+0x82>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e000      	b.n	8006b80 <xTaskIncrementTick+0x84>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d004      	beq.n	8006b8e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b84:	4b36      	ldr	r3, [pc, #216]	; (8006c60 <xTaskIncrementTick+0x164>)
 8006b86:	f04f 32ff 	mov.w	r2, #4294967295
 8006b8a:	601a      	str	r2, [r3, #0]
					break;
 8006b8c:	e03e      	b.n	8006c0c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b8e:	4b31      	ldr	r3, [pc, #196]	; (8006c54 <xTaskIncrementTick+0x158>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d203      	bcs.n	8006bae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ba6:	4a2e      	ldr	r2, [pc, #184]	; (8006c60 <xTaskIncrementTick+0x164>)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6013      	str	r3, [r2, #0]
						break;
 8006bac:	e02e      	b.n	8006c0c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fe ffb7 	bl	8005b26 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d004      	beq.n	8006bca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	3318      	adds	r3, #24
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fe ffae 	bl	8005b26 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	2201      	movs	r2, #1
 8006bd0:	409a      	lsls	r2, r3
 8006bd2:	4b24      	ldr	r3, [pc, #144]	; (8006c64 <xTaskIncrementTick+0x168>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	4a22      	ldr	r2, [pc, #136]	; (8006c64 <xTaskIncrementTick+0x168>)
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be0:	4613      	mov	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4a1f      	ldr	r2, [pc, #124]	; (8006c68 <xTaskIncrementTick+0x16c>)
 8006bea:	441a      	add	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	f7fe ff3a 	bl	8005a6c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfc:	4b1b      	ldr	r3, [pc, #108]	; (8006c6c <xTaskIncrementTick+0x170>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d3b4      	bcc.n	8006b70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006c06:	2301      	movs	r3, #1
 8006c08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c0a:	e7b1      	b.n	8006b70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c0c:	4b17      	ldr	r3, [pc, #92]	; (8006c6c <xTaskIncrementTick+0x170>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c12:	4915      	ldr	r1, [pc, #84]	; (8006c68 <xTaskIncrementTick+0x16c>)
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d907      	bls.n	8006c34 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006c24:	2301      	movs	r3, #1
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	e004      	b.n	8006c34 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006c2a:	4b11      	ldr	r3, [pc, #68]	; (8006c70 <xTaskIncrementTick+0x174>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	4a0f      	ldr	r2, [pc, #60]	; (8006c70 <xTaskIncrementTick+0x174>)
 8006c32:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006c34:	4b0f      	ldr	r3, [pc, #60]	; (8006c74 <xTaskIncrementTick+0x178>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006c40:	697b      	ldr	r3, [r7, #20]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	200005e4 	.word	0x200005e4
 8006c50:	200005c0 	.word	0x200005c0
 8006c54:	20000574 	.word	0x20000574
 8006c58:	20000578 	.word	0x20000578
 8006c5c:	200005d4 	.word	0x200005d4
 8006c60:	200005dc 	.word	0x200005dc
 8006c64:	200005c4 	.word	0x200005c4
 8006c68:	200004c0 	.word	0x200004c0
 8006c6c:	200004bc 	.word	0x200004bc
 8006c70:	200005cc 	.word	0x200005cc
 8006c74:	200005d0 	.word	0x200005d0

08006c78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c7e:	4b27      	ldr	r3, [pc, #156]	; (8006d1c <vTaskSwitchContext+0xa4>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c86:	4b26      	ldr	r3, [pc, #152]	; (8006d20 <vTaskSwitchContext+0xa8>)
 8006c88:	2201      	movs	r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c8c:	e03f      	b.n	8006d0e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006c8e:	4b24      	ldr	r3, [pc, #144]	; (8006d20 <vTaskSwitchContext+0xa8>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c94:	4b23      	ldr	r3, [pc, #140]	; (8006d24 <vTaskSwitchContext+0xac>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	fab3 f383 	clz	r3, r3
 8006ca0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ca2:	7afb      	ldrb	r3, [r7, #11]
 8006ca4:	f1c3 031f 	rsb	r3, r3, #31
 8006ca8:	617b      	str	r3, [r7, #20]
 8006caa:	491f      	ldr	r1, [pc, #124]	; (8006d28 <vTaskSwitchContext+0xb0>)
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	607b      	str	r3, [r7, #4]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <vTaskSwitchContext+0x5a>
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4a12      	ldr	r2, [pc, #72]	; (8006d28 <vTaskSwitchContext+0xb0>)
 8006ce0:	4413      	add	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	605a      	str	r2, [r3, #4]
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d104      	bne.n	8006d04 <vTaskSwitchContext+0x8c>
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	605a      	str	r2, [r3, #4]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	4a08      	ldr	r2, [pc, #32]	; (8006d2c <vTaskSwitchContext+0xb4>)
 8006d0c:	6013      	str	r3, [r2, #0]
}
 8006d0e:	bf00      	nop
 8006d10:	371c      	adds	r7, #28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	200005e4 	.word	0x200005e4
 8006d20:	200005d0 	.word	0x200005d0
 8006d24:	200005c4 	.word	0x200005c4
 8006d28:	200004c0 	.word	0x200004c0
 8006d2c:	200004bc 	.word	0x200004bc

08006d30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10a      	bne.n	8006d56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	60fb      	str	r3, [r7, #12]
}
 8006d52:	bf00      	nop
 8006d54:	e7fe      	b.n	8006d54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d56:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <vTaskPlaceOnEventList+0x44>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3318      	adds	r3, #24
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7fe fea8 	bl	8005ab4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d64:	2101      	movs	r1, #1
 8006d66:	6838      	ldr	r0, [r7, #0]
 8006d68:	f000 fa98 	bl	800729c <prvAddCurrentTaskToDelayedList>
}
 8006d6c:	bf00      	nop
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	200004bc 	.word	0x200004bc

08006d78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10a      	bne.n	8006da0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	617b      	str	r3, [r7, #20]
}
 8006d9c:	bf00      	nop
 8006d9e:	e7fe      	b.n	8006d9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006da0:	4b0a      	ldr	r3, [pc, #40]	; (8006dcc <vTaskPlaceOnEventListRestricted+0x54>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3318      	adds	r3, #24
 8006da6:	4619      	mov	r1, r3
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f7fe fe5f 	bl	8005a6c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006db4:	f04f 33ff 	mov.w	r3, #4294967295
 8006db8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	68b8      	ldr	r0, [r7, #8]
 8006dbe:	f000 fa6d 	bl	800729c <prvAddCurrentTaskToDelayedList>
	}
 8006dc2:	bf00      	nop
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	200004bc 	.word	0x200004bc

08006dd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10a      	bne.n	8006dfc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	60fb      	str	r3, [r7, #12]
}
 8006df8:	bf00      	nop
 8006dfa:	e7fe      	b.n	8006dfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	3318      	adds	r3, #24
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fe fe90 	bl	8005b26 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e06:	4b1d      	ldr	r3, [pc, #116]	; (8006e7c <xTaskRemoveFromEventList+0xac>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d11c      	bne.n	8006e48 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	3304      	adds	r3, #4
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fe87 	bl	8005b26 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	409a      	lsls	r2, r3
 8006e20:	4b17      	ldr	r3, [pc, #92]	; (8006e80 <xTaskRemoveFromEventList+0xb0>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	4a16      	ldr	r2, [pc, #88]	; (8006e80 <xTaskRemoveFromEventList+0xb0>)
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4a13      	ldr	r2, [pc, #76]	; (8006e84 <xTaskRemoveFromEventList+0xb4>)
 8006e38:	441a      	add	r2, r3
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4610      	mov	r0, r2
 8006e42:	f7fe fe13 	bl	8005a6c <vListInsertEnd>
 8006e46:	e005      	b.n	8006e54 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	3318      	adds	r3, #24
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	480e      	ldr	r0, [pc, #56]	; (8006e88 <xTaskRemoveFromEventList+0xb8>)
 8006e50:	f7fe fe0c 	bl	8005a6c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e58:	4b0c      	ldr	r3, [pc, #48]	; (8006e8c <xTaskRemoveFromEventList+0xbc>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d905      	bls.n	8006e6e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e62:	2301      	movs	r3, #1
 8006e64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e66:	4b0a      	ldr	r3, [pc, #40]	; (8006e90 <xTaskRemoveFromEventList+0xc0>)
 8006e68:	2201      	movs	r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	e001      	b.n	8006e72 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006e72:	697b      	ldr	r3, [r7, #20]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	200005e4 	.word	0x200005e4
 8006e80:	200005c4 	.word	0x200005c4
 8006e84:	200004c0 	.word	0x200004c0
 8006e88:	2000057c 	.word	0x2000057c
 8006e8c:	200004bc 	.word	0x200004bc
 8006e90:	200005d0 	.word	0x200005d0

08006e94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <vTaskInternalSetTimeOutState+0x24>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <vTaskInternalSetTimeOutState+0x28>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	605a      	str	r2, [r3, #4]
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	200005d4 	.word	0x200005d4
 8006ebc:	200005c0 	.word	0x200005c0

08006ec0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b088      	sub	sp, #32
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	613b      	str	r3, [r7, #16]
}
 8006ee2:	bf00      	nop
 8006ee4:	e7fe      	b.n	8006ee4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10a      	bne.n	8006f02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	60fb      	str	r3, [r7, #12]
}
 8006efe:	bf00      	nop
 8006f00:	e7fe      	b.n	8006f00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006f02:	f000 fec7 	bl	8007c94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f06:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <xTaskCheckForTimeOut+0xbc>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1e:	d102      	bne.n	8006f26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f20:	2300      	movs	r3, #0
 8006f22:	61fb      	str	r3, [r7, #28]
 8006f24:	e023      	b.n	8006f6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4b15      	ldr	r3, [pc, #84]	; (8006f80 <xTaskCheckForTimeOut+0xc0>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d007      	beq.n	8006f42 <xTaskCheckForTimeOut+0x82>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d302      	bcc.n	8006f42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	61fb      	str	r3, [r7, #28]
 8006f40:	e015      	b.n	8006f6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d20b      	bcs.n	8006f64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	1ad2      	subs	r2, r2, r3
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff ff9b 	bl	8006e94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61fb      	str	r3, [r7, #28]
 8006f62:	e004      	b.n	8006f6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f6e:	f000 fec1 	bl	8007cf4 <vPortExitCritical>

	return xReturn;
 8006f72:	69fb      	ldr	r3, [r7, #28]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3720      	adds	r7, #32
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	200005c0 	.word	0x200005c0
 8006f80:	200005d4 	.word	0x200005d4

08006f84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f84:	b480      	push	{r7}
 8006f86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f88:	4b03      	ldr	r3, [pc, #12]	; (8006f98 <vTaskMissedYield+0x14>)
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	601a      	str	r2, [r3, #0]
}
 8006f8e:	bf00      	nop
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	200005d0 	.word	0x200005d0

08006f9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006fa4:	f000 f852 	bl	800704c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <prvIdleTask+0x28>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d9f9      	bls.n	8006fa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006fb0:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <prvIdleTask+0x2c>)
 8006fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006fc0:	e7f0      	b.n	8006fa4 <prvIdleTask+0x8>
 8006fc2:	bf00      	nop
 8006fc4:	200004c0 	.word	0x200004c0
 8006fc8:	e000ed04 	.word	0xe000ed04

08006fcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	607b      	str	r3, [r7, #4]
 8006fd6:	e00c      	b.n	8006ff2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4a12      	ldr	r2, [pc, #72]	; (800702c <prvInitialiseTaskLists+0x60>)
 8006fe4:	4413      	add	r3, r2
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe fd13 	bl	8005a12 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	607b      	str	r3, [r7, #4]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b06      	cmp	r3, #6
 8006ff6:	d9ef      	bls.n	8006fd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ff8:	480d      	ldr	r0, [pc, #52]	; (8007030 <prvInitialiseTaskLists+0x64>)
 8006ffa:	f7fe fd0a 	bl	8005a12 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ffe:	480d      	ldr	r0, [pc, #52]	; (8007034 <prvInitialiseTaskLists+0x68>)
 8007000:	f7fe fd07 	bl	8005a12 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007004:	480c      	ldr	r0, [pc, #48]	; (8007038 <prvInitialiseTaskLists+0x6c>)
 8007006:	f7fe fd04 	bl	8005a12 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800700a:	480c      	ldr	r0, [pc, #48]	; (800703c <prvInitialiseTaskLists+0x70>)
 800700c:	f7fe fd01 	bl	8005a12 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007010:	480b      	ldr	r0, [pc, #44]	; (8007040 <prvInitialiseTaskLists+0x74>)
 8007012:	f7fe fcfe 	bl	8005a12 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007016:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <prvInitialiseTaskLists+0x78>)
 8007018:	4a05      	ldr	r2, [pc, #20]	; (8007030 <prvInitialiseTaskLists+0x64>)
 800701a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800701c:	4b0a      	ldr	r3, [pc, #40]	; (8007048 <prvInitialiseTaskLists+0x7c>)
 800701e:	4a05      	ldr	r2, [pc, #20]	; (8007034 <prvInitialiseTaskLists+0x68>)
 8007020:	601a      	str	r2, [r3, #0]
}
 8007022:	bf00      	nop
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	200004c0 	.word	0x200004c0
 8007030:	2000054c 	.word	0x2000054c
 8007034:	20000560 	.word	0x20000560
 8007038:	2000057c 	.word	0x2000057c
 800703c:	20000590 	.word	0x20000590
 8007040:	200005a8 	.word	0x200005a8
 8007044:	20000574 	.word	0x20000574
 8007048:	20000578 	.word	0x20000578

0800704c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007052:	e019      	b.n	8007088 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007054:	f000 fe1e 	bl	8007c94 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007058:	4b10      	ldr	r3, [pc, #64]	; (800709c <prvCheckTasksWaitingTermination+0x50>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3304      	adds	r3, #4
 8007064:	4618      	mov	r0, r3
 8007066:	f7fe fd5e 	bl	8005b26 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800706a:	4b0d      	ldr	r3, [pc, #52]	; (80070a0 <prvCheckTasksWaitingTermination+0x54>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3b01      	subs	r3, #1
 8007070:	4a0b      	ldr	r2, [pc, #44]	; (80070a0 <prvCheckTasksWaitingTermination+0x54>)
 8007072:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007074:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <prvCheckTasksWaitingTermination+0x58>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3b01      	subs	r3, #1
 800707a:	4a0a      	ldr	r2, [pc, #40]	; (80070a4 <prvCheckTasksWaitingTermination+0x58>)
 800707c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800707e:	f000 fe39 	bl	8007cf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f810 	bl	80070a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007088:	4b06      	ldr	r3, [pc, #24]	; (80070a4 <prvCheckTasksWaitingTermination+0x58>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e1      	bne.n	8007054 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007090:	bf00      	nop
 8007092:	bf00      	nop
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20000590 	.word	0x20000590
 80070a0:	200005bc 	.word	0x200005bc
 80070a4:	200005a4 	.word	0x200005a4

080070a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d108      	bne.n	80070cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 ffce 	bl	8008060 <vPortFree>
				vPortFree( pxTCB );
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 ffcb 	bl	8008060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80070ca:	e018      	b.n	80070fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d103      	bne.n	80070de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 ffc2 	bl	8008060 <vPortFree>
	}
 80070dc:	e00f      	b.n	80070fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d00a      	beq.n	80070fe <prvDeleteTCB+0x56>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	60fb      	str	r3, [r7, #12]
}
 80070fa:	bf00      	nop
 80070fc:	e7fe      	b.n	80070fc <prvDeleteTCB+0x54>
	}
 80070fe:	bf00      	nop
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800710e:	4b0f      	ldr	r3, [pc, #60]	; (800714c <prvResetNextTaskUnblockTime+0x44>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <prvResetNextTaskUnblockTime+0x14>
 8007118:	2301      	movs	r3, #1
 800711a:	e000      	b.n	800711e <prvResetNextTaskUnblockTime+0x16>
 800711c:	2300      	movs	r3, #0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d004      	beq.n	800712c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007122:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <prvResetNextTaskUnblockTime+0x48>)
 8007124:	f04f 32ff 	mov.w	r2, #4294967295
 8007128:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800712a:	e008      	b.n	800713e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800712c:	4b07      	ldr	r3, [pc, #28]	; (800714c <prvResetNextTaskUnblockTime+0x44>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	4a05      	ldr	r2, [pc, #20]	; (8007150 <prvResetNextTaskUnblockTime+0x48>)
 800713c:	6013      	str	r3, [r2, #0]
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	20000574 	.word	0x20000574
 8007150:	200005dc 	.word	0x200005dc

08007154 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800715a:	4b0b      	ldr	r3, [pc, #44]	; (8007188 <xTaskGetSchedulerState+0x34>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d102      	bne.n	8007168 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007162:	2301      	movs	r3, #1
 8007164:	607b      	str	r3, [r7, #4]
 8007166:	e008      	b.n	800717a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007168:	4b08      	ldr	r3, [pc, #32]	; (800718c <xTaskGetSchedulerState+0x38>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d102      	bne.n	8007176 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007170:	2302      	movs	r3, #2
 8007172:	607b      	str	r3, [r7, #4]
 8007174:	e001      	b.n	800717a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007176:	2300      	movs	r3, #0
 8007178:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800717a:	687b      	ldr	r3, [r7, #4]
	}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	200005c8 	.word	0x200005c8
 800718c:	200005e4 	.word	0x200005e4

08007190 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800719c:	2300      	movs	r3, #0
 800719e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d06e      	beq.n	8007284 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071a6:	4b3a      	ldr	r3, [pc, #232]	; (8007290 <xTaskPriorityDisinherit+0x100>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d00a      	beq.n	80071c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	60fb      	str	r3, [r7, #12]
}
 80071c2:	bf00      	nop
 80071c4:	e7fe      	b.n	80071c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	60bb      	str	r3, [r7, #8]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e8:	1e5a      	subs	r2, r3, #1
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d044      	beq.n	8007284 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d140      	bne.n	8007284 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	3304      	adds	r3, #4
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe fc8d 	bl	8005b26 <uxListRemove>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d115      	bne.n	800723e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007216:	491f      	ldr	r1, [pc, #124]	; (8007294 <xTaskPriorityDisinherit+0x104>)
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <xTaskPriorityDisinherit+0xae>
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	2201      	movs	r2, #1
 800722e:	fa02 f303 	lsl.w	r3, r2, r3
 8007232:	43da      	mvns	r2, r3
 8007234:	4b18      	ldr	r3, [pc, #96]	; (8007298 <xTaskPriorityDisinherit+0x108>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4013      	ands	r3, r2
 800723a:	4a17      	ldr	r2, [pc, #92]	; (8007298 <xTaskPriorityDisinherit+0x108>)
 800723c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	f1c3 0207 	rsb	r2, r3, #7
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007256:	2201      	movs	r2, #1
 8007258:	409a      	lsls	r2, r3
 800725a:	4b0f      	ldr	r3, [pc, #60]	; (8007298 <xTaskPriorityDisinherit+0x108>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4313      	orrs	r3, r2
 8007260:	4a0d      	ldr	r2, [pc, #52]	; (8007298 <xTaskPriorityDisinherit+0x108>)
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4a08      	ldr	r2, [pc, #32]	; (8007294 <xTaskPriorityDisinherit+0x104>)
 8007272:	441a      	add	r2, r3
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	3304      	adds	r3, #4
 8007278:	4619      	mov	r1, r3
 800727a:	4610      	mov	r0, r2
 800727c:	f7fe fbf6 	bl	8005a6c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007280:	2301      	movs	r3, #1
 8007282:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007284:	697b      	ldr	r3, [r7, #20]
	}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	200004bc 	.word	0x200004bc
 8007294:	200004c0 	.word	0x200004c0
 8007298:	200005c4 	.word	0x200005c4

0800729c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072a6:	4b29      	ldr	r3, [pc, #164]	; (800734c <prvAddCurrentTaskToDelayedList+0xb0>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072ac:	4b28      	ldr	r3, [pc, #160]	; (8007350 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	3304      	adds	r3, #4
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fe fc37 	bl	8005b26 <uxListRemove>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10b      	bne.n	80072d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80072be:	4b24      	ldr	r3, [pc, #144]	; (8007350 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c4:	2201      	movs	r2, #1
 80072c6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ca:	43da      	mvns	r2, r3
 80072cc:	4b21      	ldr	r3, [pc, #132]	; (8007354 <prvAddCurrentTaskToDelayedList+0xb8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4013      	ands	r3, r2
 80072d2:	4a20      	ldr	r2, [pc, #128]	; (8007354 <prvAddCurrentTaskToDelayedList+0xb8>)
 80072d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072dc:	d10a      	bne.n	80072f4 <prvAddCurrentTaskToDelayedList+0x58>
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d007      	beq.n	80072f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072e4:	4b1a      	ldr	r3, [pc, #104]	; (8007350 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3304      	adds	r3, #4
 80072ea:	4619      	mov	r1, r3
 80072ec:	481a      	ldr	r0, [pc, #104]	; (8007358 <prvAddCurrentTaskToDelayedList+0xbc>)
 80072ee:	f7fe fbbd 	bl	8005a6c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072f2:	e026      	b.n	8007342 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4413      	add	r3, r2
 80072fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072fc:	4b14      	ldr	r3, [pc, #80]	; (8007350 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	429a      	cmp	r2, r3
 800730a:	d209      	bcs.n	8007320 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800730c:	4b13      	ldr	r3, [pc, #76]	; (800735c <prvAddCurrentTaskToDelayedList+0xc0>)
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	4b0f      	ldr	r3, [pc, #60]	; (8007350 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3304      	adds	r3, #4
 8007316:	4619      	mov	r1, r3
 8007318:	4610      	mov	r0, r2
 800731a:	f7fe fbcb 	bl	8005ab4 <vListInsert>
}
 800731e:	e010      	b.n	8007342 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007320:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	4b0a      	ldr	r3, [pc, #40]	; (8007350 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3304      	adds	r3, #4
 800732a:	4619      	mov	r1, r3
 800732c:	4610      	mov	r0, r2
 800732e:	f7fe fbc1 	bl	8005ab4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007332:	4b0c      	ldr	r3, [pc, #48]	; (8007364 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	429a      	cmp	r2, r3
 800733a:	d202      	bcs.n	8007342 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800733c:	4a09      	ldr	r2, [pc, #36]	; (8007364 <prvAddCurrentTaskToDelayedList+0xc8>)
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	6013      	str	r3, [r2, #0]
}
 8007342:	bf00      	nop
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	200005c0 	.word	0x200005c0
 8007350:	200004bc 	.word	0x200004bc
 8007354:	200005c4 	.word	0x200005c4
 8007358:	200005a8 	.word	0x200005a8
 800735c:	20000578 	.word	0x20000578
 8007360:	20000574 	.word	0x20000574
 8007364:	200005dc 	.word	0x200005dc

08007368 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08a      	sub	sp, #40	; 0x28
 800736c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800736e:	2300      	movs	r3, #0
 8007370:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007372:	f000 fb1f 	bl	80079b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007376:	4b1c      	ldr	r3, [pc, #112]	; (80073e8 <xTimerCreateTimerTask+0x80>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d021      	beq.n	80073c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800737e:	2300      	movs	r3, #0
 8007380:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007382:	2300      	movs	r3, #0
 8007384:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007386:	1d3a      	adds	r2, r7, #4
 8007388:	f107 0108 	add.w	r1, r7, #8
 800738c:	f107 030c 	add.w	r3, r7, #12
 8007390:	4618      	mov	r0, r3
 8007392:	f7f8 ff9d 	bl	80002d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	9202      	str	r2, [sp, #8]
 800739e:	9301      	str	r3, [sp, #4]
 80073a0:	2302      	movs	r3, #2
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	2300      	movs	r3, #0
 80073a6:	460a      	mov	r2, r1
 80073a8:	4910      	ldr	r1, [pc, #64]	; (80073ec <xTimerCreateTimerTask+0x84>)
 80073aa:	4811      	ldr	r0, [pc, #68]	; (80073f0 <xTimerCreateTimerTask+0x88>)
 80073ac:	f7ff f8c8 	bl	8006540 <xTaskCreateStatic>
 80073b0:	4603      	mov	r3, r0
 80073b2:	4a10      	ldr	r2, [pc, #64]	; (80073f4 <xTimerCreateTimerTask+0x8c>)
 80073b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80073b6:	4b0f      	ldr	r3, [pc, #60]	; (80073f4 <xTimerCreateTimerTask+0x8c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80073be:	2301      	movs	r3, #1
 80073c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	613b      	str	r3, [r7, #16]
}
 80073da:	bf00      	nop
 80073dc:	e7fe      	b.n	80073dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80073de:	697b      	ldr	r3, [r7, #20]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	20000618 	.word	0x20000618
 80073ec:	0800839c 	.word	0x0800839c
 80073f0:	080075bd 	.word	0x080075bd
 80073f4:	2000061c 	.word	0x2000061c

080073f8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af02      	add	r7, sp, #8
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007406:	202c      	movs	r0, #44	; 0x2c
 8007408:	f000 fd66 	bl	8007ed8 <pvPortMalloc>
 800740c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00d      	beq.n	8007430 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	9301      	str	r3, [sp, #4]
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	68b9      	ldr	r1, [r7, #8]
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 f809 	bl	800743a <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007430:	697b      	ldr	r3, [r7, #20]
	}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b086      	sub	sp, #24
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	607a      	str	r2, [r7, #4]
 8007446:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10a      	bne.n	8007464 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	617b      	str	r3, [r7, #20]
}
 8007460:	bf00      	nop
 8007462:	e7fe      	b.n	8007462 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	2b00      	cmp	r3, #0
 8007468:	d015      	beq.n	8007496 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800746a:	f000 faa3 	bl	80079b4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	6a3a      	ldr	r2, [r7, #32]
 800748a:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	3304      	adds	r3, #4
 8007490:	4618      	mov	r0, r3
 8007492:	f7fe fade 	bl	8005a52 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007496:	bf00      	nop
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b08a      	sub	sp, #40	; 0x28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10a      	bne.n	80074ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	623b      	str	r3, [r7, #32]
}
 80074ca:	bf00      	nop
 80074cc:	e7fe      	b.n	80074cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80074ce:	4b1a      	ldr	r3, [pc, #104]	; (8007538 <xTimerGenericCommand+0x98>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d02a      	beq.n	800752c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b05      	cmp	r3, #5
 80074e6:	dc18      	bgt.n	800751a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074e8:	f7ff fe34 	bl	8007154 <xTaskGetSchedulerState>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d109      	bne.n	8007506 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074f2:	4b11      	ldr	r3, [pc, #68]	; (8007538 <xTimerGenericCommand+0x98>)
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	f107 0110 	add.w	r1, r7, #16
 80074fa:	2300      	movs	r3, #0
 80074fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074fe:	f7fe fc3b 	bl	8005d78 <xQueueGenericSend>
 8007502:	6278      	str	r0, [r7, #36]	; 0x24
 8007504:	e012      	b.n	800752c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007506:	4b0c      	ldr	r3, [pc, #48]	; (8007538 <xTimerGenericCommand+0x98>)
 8007508:	6818      	ldr	r0, [r3, #0]
 800750a:	f107 0110 	add.w	r1, r7, #16
 800750e:	2300      	movs	r3, #0
 8007510:	2200      	movs	r2, #0
 8007512:	f7fe fc31 	bl	8005d78 <xQueueGenericSend>
 8007516:	6278      	str	r0, [r7, #36]	; 0x24
 8007518:	e008      	b.n	800752c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800751a:	4b07      	ldr	r3, [pc, #28]	; (8007538 <xTimerGenericCommand+0x98>)
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	f107 0110 	add.w	r1, r7, #16
 8007522:	2300      	movs	r3, #0
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	f7fe fd25 	bl	8005f74 <xQueueGenericSendFromISR>
 800752a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800752e:	4618      	mov	r0, r3
 8007530:	3728      	adds	r7, #40	; 0x28
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20000618 	.word	0x20000618

0800753c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b088      	sub	sp, #32
 8007540:	af02      	add	r7, sp, #8
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007546:	4b1c      	ldr	r3, [pc, #112]	; (80075b8 <prvProcessExpiredTimer+0x7c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	3304      	adds	r3, #4
 8007554:	4618      	mov	r0, r3
 8007556:	f7fe fae6 	bl	8005b26 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d122      	bne.n	80075a8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	699a      	ldr	r2, [r3, #24]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	18d1      	adds	r1, r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	6978      	ldr	r0, [r7, #20]
 8007570:	f000 f8c8 	bl	8007704 <prvInsertTimerInActiveList>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d016      	beq.n	80075a8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800757a:	2300      	movs	r3, #0
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	2300      	movs	r3, #0
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	2100      	movs	r1, #0
 8007584:	6978      	ldr	r0, [r7, #20]
 8007586:	f7ff ff8b 	bl	80074a0 <xTimerGenericCommand>
 800758a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10a      	bne.n	80075a8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	60fb      	str	r3, [r7, #12]
}
 80075a4:	bf00      	nop
 80075a6:	e7fe      	b.n	80075a6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	6978      	ldr	r0, [r7, #20]
 80075ae:	4798      	blx	r3
}
 80075b0:	bf00      	nop
 80075b2:	3718      	adds	r7, #24
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	20000610 	.word	0x20000610

080075bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075c4:	f107 0308 	add.w	r3, r7, #8
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 f857 	bl	800767c <prvGetNextExpireTime>
 80075ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	4619      	mov	r1, r3
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 f803 	bl	80075e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075da:	f000 f8d5 	bl	8007788 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075de:	e7f1      	b.n	80075c4 <prvTimerTask+0x8>

080075e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075ea:	f7ff f9cd 	bl	8006988 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075ee:	f107 0308 	add.w	r3, r7, #8
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 f866 	bl	80076c4 <prvSampleTimeNow>
 80075f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d130      	bne.n	8007662 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10a      	bne.n	800761c <prvProcessTimerOrBlockTask+0x3c>
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	429a      	cmp	r2, r3
 800760c:	d806      	bhi.n	800761c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800760e:	f7ff f9c9 	bl	80069a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007612:	68f9      	ldr	r1, [r7, #12]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7ff ff91 	bl	800753c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800761a:	e024      	b.n	8007666 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d008      	beq.n	8007634 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007622:	4b13      	ldr	r3, [pc, #76]	; (8007670 <prvProcessTimerOrBlockTask+0x90>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	bf0c      	ite	eq
 800762c:	2301      	moveq	r3, #1
 800762e:	2300      	movne	r3, #0
 8007630:	b2db      	uxtb	r3, r3
 8007632:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007634:	4b0f      	ldr	r3, [pc, #60]	; (8007674 <prvProcessTimerOrBlockTask+0x94>)
 8007636:	6818      	ldr	r0, [r3, #0]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	4619      	mov	r1, r3
 8007642:	f7fe ff49 	bl	80064d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007646:	f7ff f9ad 	bl	80069a4 <xTaskResumeAll>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007650:	4b09      	ldr	r3, [pc, #36]	; (8007678 <prvProcessTimerOrBlockTask+0x98>)
 8007652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	f3bf 8f6f 	isb	sy
}
 8007660:	e001      	b.n	8007666 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007662:	f7ff f99f 	bl	80069a4 <xTaskResumeAll>
}
 8007666:	bf00      	nop
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000614 	.word	0x20000614
 8007674:	20000618 	.word	0x20000618
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007684:	4b0e      	ldr	r3, [pc, #56]	; (80076c0 <prvGetNextExpireTime+0x44>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	bf0c      	ite	eq
 800768e:	2301      	moveq	r3, #1
 8007690:	2300      	movne	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	461a      	mov	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d105      	bne.n	80076ae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076a2:	4b07      	ldr	r3, [pc, #28]	; (80076c0 <prvGetNextExpireTime+0x44>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	e001      	b.n	80076b2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80076b2:	68fb      	ldr	r3, [r7, #12]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	20000610 	.word	0x20000610

080076c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80076cc:	f7ff fa06 	bl	8006adc <xTaskGetTickCount>
 80076d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80076d2:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <prvSampleTimeNow+0x3c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d205      	bcs.n	80076e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076dc:	f000 f908 	bl	80078f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	e002      	b.n	80076ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076ee:	4a04      	ldr	r2, [pc, #16]	; (8007700 <prvSampleTimeNow+0x3c>)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076f4:	68fb      	ldr	r3, [r7, #12]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000620 	.word	0x20000620

08007704 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
 8007710:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	429a      	cmp	r2, r3
 8007728:	d812      	bhi.n	8007750 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	1ad2      	subs	r2, r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	429a      	cmp	r2, r3
 8007736:	d302      	bcc.n	800773e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007738:	2301      	movs	r3, #1
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	e01b      	b.n	8007776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800773e:	4b10      	ldr	r3, [pc, #64]	; (8007780 <prvInsertTimerInActiveList+0x7c>)
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3304      	adds	r3, #4
 8007746:	4619      	mov	r1, r3
 8007748:	4610      	mov	r0, r2
 800774a:	f7fe f9b3 	bl	8005ab4 <vListInsert>
 800774e:	e012      	b.n	8007776 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	429a      	cmp	r2, r3
 8007756:	d206      	bcs.n	8007766 <prvInsertTimerInActiveList+0x62>
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	429a      	cmp	r2, r3
 800775e:	d302      	bcc.n	8007766 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007760:	2301      	movs	r3, #1
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	e007      	b.n	8007776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007766:	4b07      	ldr	r3, [pc, #28]	; (8007784 <prvInsertTimerInActiveList+0x80>)
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3304      	adds	r3, #4
 800776e:	4619      	mov	r1, r3
 8007770:	4610      	mov	r0, r2
 8007772:	f7fe f99f 	bl	8005ab4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007776:	697b      	ldr	r3, [r7, #20]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	20000614 	.word	0x20000614
 8007784:	20000610 	.word	0x20000610

08007788 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08e      	sub	sp, #56	; 0x38
 800778c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800778e:	e09d      	b.n	80078cc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	da18      	bge.n	80077c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007796:	1d3b      	adds	r3, r7, #4
 8007798:	3304      	adds	r3, #4
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10a      	bne.n	80077b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	61fb      	str	r3, [r7, #28]
}
 80077b4:	bf00      	nop
 80077b6:	e7fe      	b.n	80077b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80077b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077be:	6850      	ldr	r0, [r2, #4]
 80077c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077c2:	6892      	ldr	r2, [r2, #8]
 80077c4:	4611      	mov	r1, r2
 80077c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	db7d      	blt.n	80078ca <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d004      	beq.n	80077e4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	3304      	adds	r3, #4
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe f9a1 	bl	8005b26 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077e4:	463b      	mov	r3, r7
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7ff ff6c 	bl	80076c4 <prvSampleTimeNow>
 80077ec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b09      	cmp	r3, #9
 80077f2:	d86b      	bhi.n	80078cc <prvProcessReceivedCommands+0x144>
 80077f4:	a201      	add	r2, pc, #4	; (adr r2, 80077fc <prvProcessReceivedCommands+0x74>)
 80077f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fa:	bf00      	nop
 80077fc:	08007825 	.word	0x08007825
 8007800:	08007825 	.word	0x08007825
 8007804:	08007825 	.word	0x08007825
 8007808:	080078cd 	.word	0x080078cd
 800780c:	08007881 	.word	0x08007881
 8007810:	080078b9 	.word	0x080078b9
 8007814:	08007825 	.word	0x08007825
 8007818:	08007825 	.word	0x08007825
 800781c:	080078cd 	.word	0x080078cd
 8007820:	08007881 	.word	0x08007881
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	18d1      	adds	r1, r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007832:	f7ff ff67 	bl	8007704 <prvInsertTimerInActiveList>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d047      	beq.n	80078cc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800783c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007842:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d13f      	bne.n	80078cc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	441a      	add	r2, r3
 8007854:	2300      	movs	r3, #0
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	2300      	movs	r3, #0
 800785a:	2100      	movs	r1, #0
 800785c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800785e:	f7ff fe1f 	bl	80074a0 <xTimerGenericCommand>
 8007862:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d130      	bne.n	80078cc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	61bb      	str	r3, [r7, #24]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007884:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10a      	bne.n	80078a4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	617b      	str	r3, [r7, #20]
}
 80078a0:	bf00      	nop
 80078a2:	e7fe      	b.n	80078a2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	699a      	ldr	r2, [r3, #24]
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	18d1      	adds	r1, r2, r3
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078b2:	f7ff ff27 	bl	8007704 <prvInsertTimerInActiveList>
					break;
 80078b6:	e009      	b.n	80078cc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d104      	bne.n	80078cc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80078c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c4:	f000 fbcc 	bl	8008060 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80078c8:	e000      	b.n	80078cc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80078ca:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078cc:	4b07      	ldr	r3, [pc, #28]	; (80078ec <prvProcessReceivedCommands+0x164>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	1d39      	adds	r1, r7, #4
 80078d2:	2200      	movs	r2, #0
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fe fbe5 	bl	80060a4 <xQueueReceive>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f47f af57 	bne.w	8007790 <prvProcessReceivedCommands+0x8>
	}
}
 80078e2:	bf00      	nop
 80078e4:	bf00      	nop
 80078e6:	3730      	adds	r7, #48	; 0x30
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	20000618 	.word	0x20000618

080078f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b088      	sub	sp, #32
 80078f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078f6:	e045      	b.n	8007984 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078f8:	4b2c      	ldr	r3, [pc, #176]	; (80079ac <prvSwitchTimerLists+0xbc>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007902:	4b2a      	ldr	r3, [pc, #168]	; (80079ac <prvSwitchTimerLists+0xbc>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3304      	adds	r3, #4
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe f908 	bl	8005b26 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d12e      	bne.n	8007984 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4413      	add	r3, r2
 800792e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	429a      	cmp	r2, r3
 8007936:	d90e      	bls.n	8007956 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007944:	4b19      	ldr	r3, [pc, #100]	; (80079ac <prvSwitchTimerLists+0xbc>)
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3304      	adds	r3, #4
 800794c:	4619      	mov	r1, r3
 800794e:	4610      	mov	r0, r2
 8007950:	f7fe f8b0 	bl	8005ab4 <vListInsert>
 8007954:	e016      	b.n	8007984 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007956:	2300      	movs	r3, #0
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	2300      	movs	r3, #0
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	2100      	movs	r1, #0
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f7ff fd9d 	bl	80074a0 <xTimerGenericCommand>
 8007966:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10a      	bne.n	8007984 <prvSwitchTimerLists+0x94>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	603b      	str	r3, [r7, #0]
}
 8007980:	bf00      	nop
 8007982:	e7fe      	b.n	8007982 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007984:	4b09      	ldr	r3, [pc, #36]	; (80079ac <prvSwitchTimerLists+0xbc>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1b4      	bne.n	80078f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800798e:	4b07      	ldr	r3, [pc, #28]	; (80079ac <prvSwitchTimerLists+0xbc>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007994:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <prvSwitchTimerLists+0xc0>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a04      	ldr	r2, [pc, #16]	; (80079ac <prvSwitchTimerLists+0xbc>)
 800799a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800799c:	4a04      	ldr	r2, [pc, #16]	; (80079b0 <prvSwitchTimerLists+0xc0>)
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	6013      	str	r3, [r2, #0]
}
 80079a2:	bf00      	nop
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20000610 	.word	0x20000610
 80079b0:	20000614 	.word	0x20000614

080079b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80079ba:	f000 f96b 	bl	8007c94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80079be:	4b15      	ldr	r3, [pc, #84]	; (8007a14 <prvCheckForValidListAndQueue+0x60>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d120      	bne.n	8007a08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80079c6:	4814      	ldr	r0, [pc, #80]	; (8007a18 <prvCheckForValidListAndQueue+0x64>)
 80079c8:	f7fe f823 	bl	8005a12 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80079cc:	4813      	ldr	r0, [pc, #76]	; (8007a1c <prvCheckForValidListAndQueue+0x68>)
 80079ce:	f7fe f820 	bl	8005a12 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80079d2:	4b13      	ldr	r3, [pc, #76]	; (8007a20 <prvCheckForValidListAndQueue+0x6c>)
 80079d4:	4a10      	ldr	r2, [pc, #64]	; (8007a18 <prvCheckForValidListAndQueue+0x64>)
 80079d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80079d8:	4b12      	ldr	r3, [pc, #72]	; (8007a24 <prvCheckForValidListAndQueue+0x70>)
 80079da:	4a10      	ldr	r2, [pc, #64]	; (8007a1c <prvCheckForValidListAndQueue+0x68>)
 80079dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80079de:	2300      	movs	r3, #0
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <prvCheckForValidListAndQueue+0x74>)
 80079e4:	4a11      	ldr	r2, [pc, #68]	; (8007a2c <prvCheckForValidListAndQueue+0x78>)
 80079e6:	2110      	movs	r1, #16
 80079e8:	2040      	movs	r0, #64	; 0x40
 80079ea:	f7fe f92f 	bl	8005c4c <xQueueGenericCreateStatic>
 80079ee:	4603      	mov	r3, r0
 80079f0:	4a08      	ldr	r2, [pc, #32]	; (8007a14 <prvCheckForValidListAndQueue+0x60>)
 80079f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80079f4:	4b07      	ldr	r3, [pc, #28]	; (8007a14 <prvCheckForValidListAndQueue+0x60>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d005      	beq.n	8007a08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80079fc:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <prvCheckForValidListAndQueue+0x60>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	490b      	ldr	r1, [pc, #44]	; (8007a30 <prvCheckForValidListAndQueue+0x7c>)
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fe fd3e 	bl	8006484 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a08:	f000 f974 	bl	8007cf4 <vPortExitCritical>
}
 8007a0c:	bf00      	nop
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20000618 	.word	0x20000618
 8007a18:	200005e8 	.word	0x200005e8
 8007a1c:	200005fc 	.word	0x200005fc
 8007a20:	20000610 	.word	0x20000610
 8007a24:	20000614 	.word	0x20000614
 8007a28:	20000a24 	.word	0x20000a24
 8007a2c:	20000624 	.word	0x20000624
 8007a30:	080083a4 	.word	0x080083a4

08007a34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3b04      	subs	r3, #4
 8007a44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3b04      	subs	r3, #4
 8007a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f023 0201 	bic.w	r2, r3, #1
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3b04      	subs	r3, #4
 8007a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a64:	4a0c      	ldr	r2, [pc, #48]	; (8007a98 <pxPortInitialiseStack+0x64>)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3b14      	subs	r3, #20
 8007a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3b04      	subs	r3, #4
 8007a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f06f 0202 	mvn.w	r2, #2
 8007a82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	3b20      	subs	r3, #32
 8007a88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	08007a9d 	.word	0x08007a9d

08007a9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007aa6:	4b12      	ldr	r3, [pc, #72]	; (8007af0 <prvTaskExitError+0x54>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aae:	d00a      	beq.n	8007ac6 <prvTaskExitError+0x2a>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	60fb      	str	r3, [r7, #12]
}
 8007ac2:	bf00      	nop
 8007ac4:	e7fe      	b.n	8007ac4 <prvTaskExitError+0x28>
	__asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	60bb      	str	r3, [r7, #8]
}
 8007ad8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ada:	bf00      	nop
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0fc      	beq.n	8007adc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ae2:	bf00      	nop
 8007ae4:	bf00      	nop
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	2000000c 	.word	0x2000000c
	...

08007b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b00:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <pxCurrentTCBConst2>)
 8007b02:	6819      	ldr	r1, [r3, #0]
 8007b04:	6808      	ldr	r0, [r1, #0]
 8007b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0a:	f380 8809 	msr	PSP, r0
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f04f 0000 	mov.w	r0, #0
 8007b16:	f380 8811 	msr	BASEPRI, r0
 8007b1a:	4770      	bx	lr
 8007b1c:	f3af 8000 	nop.w

08007b20 <pxCurrentTCBConst2>:
 8007b20:	200004bc 	.word	0x200004bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop

08007b28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b28:	4808      	ldr	r0, [pc, #32]	; (8007b4c <prvPortStartFirstTask+0x24>)
 8007b2a:	6800      	ldr	r0, [r0, #0]
 8007b2c:	6800      	ldr	r0, [r0, #0]
 8007b2e:	f380 8808 	msr	MSP, r0
 8007b32:	f04f 0000 	mov.w	r0, #0
 8007b36:	f380 8814 	msr	CONTROL, r0
 8007b3a:	b662      	cpsie	i
 8007b3c:	b661      	cpsie	f
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	df00      	svc	0
 8007b48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b4a:	bf00      	nop
 8007b4c:	e000ed08 	.word	0xe000ed08

08007b50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b56:	4b46      	ldr	r3, [pc, #280]	; (8007c70 <xPortStartScheduler+0x120>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a46      	ldr	r2, [pc, #280]	; (8007c74 <xPortStartScheduler+0x124>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d10a      	bne.n	8007b76 <xPortStartScheduler+0x26>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	613b      	str	r3, [r7, #16]
}
 8007b72:	bf00      	nop
 8007b74:	e7fe      	b.n	8007b74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b76:	4b3e      	ldr	r3, [pc, #248]	; (8007c70 <xPortStartScheduler+0x120>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a3f      	ldr	r2, [pc, #252]	; (8007c78 <xPortStartScheduler+0x128>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d10a      	bne.n	8007b96 <xPortStartScheduler+0x46>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	60fb      	str	r3, [r7, #12]
}
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b96:	4b39      	ldr	r3, [pc, #228]	; (8007c7c <xPortStartScheduler+0x12c>)
 8007b98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	22ff      	movs	r2, #255	; 0xff
 8007ba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	4b31      	ldr	r3, [pc, #196]	; (8007c80 <xPortStartScheduler+0x130>)
 8007bbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bbe:	4b31      	ldr	r3, [pc, #196]	; (8007c84 <xPortStartScheduler+0x134>)
 8007bc0:	2207      	movs	r2, #7
 8007bc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bc4:	e009      	b.n	8007bda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007bc6:	4b2f      	ldr	r3, [pc, #188]	; (8007c84 <xPortStartScheduler+0x134>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	4a2d      	ldr	r2, [pc, #180]	; (8007c84 <xPortStartScheduler+0x134>)
 8007bce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bda:	78fb      	ldrb	r3, [r7, #3]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be2:	2b80      	cmp	r3, #128	; 0x80
 8007be4:	d0ef      	beq.n	8007bc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007be6:	4b27      	ldr	r3, [pc, #156]	; (8007c84 <xPortStartScheduler+0x134>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f1c3 0307 	rsb	r3, r3, #7
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d00a      	beq.n	8007c08 <xPortStartScheduler+0xb8>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	60bb      	str	r3, [r7, #8]
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c08:	4b1e      	ldr	r3, [pc, #120]	; (8007c84 <xPortStartScheduler+0x134>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	021b      	lsls	r3, r3, #8
 8007c0e:	4a1d      	ldr	r2, [pc, #116]	; (8007c84 <xPortStartScheduler+0x134>)
 8007c10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c12:	4b1c      	ldr	r3, [pc, #112]	; (8007c84 <xPortStartScheduler+0x134>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c1a:	4a1a      	ldr	r2, [pc, #104]	; (8007c84 <xPortStartScheduler+0x134>)
 8007c1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c26:	4b18      	ldr	r3, [pc, #96]	; (8007c88 <xPortStartScheduler+0x138>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a17      	ldr	r2, [pc, #92]	; (8007c88 <xPortStartScheduler+0x138>)
 8007c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c32:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <xPortStartScheduler+0x138>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a14      	ldr	r2, [pc, #80]	; (8007c88 <xPortStartScheduler+0x138>)
 8007c38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c3e:	f000 f8dd 	bl	8007dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c42:	4b12      	ldr	r3, [pc, #72]	; (8007c8c <xPortStartScheduler+0x13c>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c48:	f000 f8fc 	bl	8007e44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c4c:	4b10      	ldr	r3, [pc, #64]	; (8007c90 <xPortStartScheduler+0x140>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a0f      	ldr	r2, [pc, #60]	; (8007c90 <xPortStartScheduler+0x140>)
 8007c52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c58:	f7ff ff66 	bl	8007b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c5c:	f7ff f80c 	bl	8006c78 <vTaskSwitchContext>
	prvTaskExitError();
 8007c60:	f7ff ff1c 	bl	8007a9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	e000ed00 	.word	0xe000ed00
 8007c74:	410fc271 	.word	0x410fc271
 8007c78:	410fc270 	.word	0x410fc270
 8007c7c:	e000e400 	.word	0xe000e400
 8007c80:	20000a6c 	.word	0x20000a6c
 8007c84:	20000a70 	.word	0x20000a70
 8007c88:	e000ed20 	.word	0xe000ed20
 8007c8c:	2000000c 	.word	0x2000000c
 8007c90:	e000ef34 	.word	0xe000ef34

08007c94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	607b      	str	r3, [r7, #4]
}
 8007cac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cae:	4b0f      	ldr	r3, [pc, #60]	; (8007cec <vPortEnterCritical+0x58>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	4a0d      	ldr	r2, [pc, #52]	; (8007cec <vPortEnterCritical+0x58>)
 8007cb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cb8:	4b0c      	ldr	r3, [pc, #48]	; (8007cec <vPortEnterCritical+0x58>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d10f      	bne.n	8007ce0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <vPortEnterCritical+0x5c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00a      	beq.n	8007ce0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	603b      	str	r3, [r7, #0]
}
 8007cdc:	bf00      	nop
 8007cde:	e7fe      	b.n	8007cde <vPortEnterCritical+0x4a>
	}
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	2000000c 	.word	0x2000000c
 8007cf0:	e000ed04 	.word	0xe000ed04

08007cf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007cfa:	4b12      	ldr	r3, [pc, #72]	; (8007d44 <vPortExitCritical+0x50>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10a      	bne.n	8007d18 <vPortExitCritical+0x24>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	607b      	str	r3, [r7, #4]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d18:	4b0a      	ldr	r3, [pc, #40]	; (8007d44 <vPortExitCritical+0x50>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	4a09      	ldr	r2, [pc, #36]	; (8007d44 <vPortExitCritical+0x50>)
 8007d20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d22:	4b08      	ldr	r3, [pc, #32]	; (8007d44 <vPortExitCritical+0x50>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d105      	bne.n	8007d36 <vPortExitCritical+0x42>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	f383 8811 	msr	BASEPRI, r3
}
 8007d34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d36:	bf00      	nop
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	2000000c 	.word	0x2000000c
	...

08007d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d50:	f3ef 8009 	mrs	r0, PSP
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	4b15      	ldr	r3, [pc, #84]	; (8007db0 <pxCurrentTCBConst>)
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	f01e 0f10 	tst.w	lr, #16
 8007d60:	bf08      	it	eq
 8007d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6a:	6010      	str	r0, [r2, #0]
 8007d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d74:	f380 8811 	msr	BASEPRI, r0
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f7fe ff7a 	bl	8006c78 <vTaskSwitchContext>
 8007d84:	f04f 0000 	mov.w	r0, #0
 8007d88:	f380 8811 	msr	BASEPRI, r0
 8007d8c:	bc09      	pop	{r0, r3}
 8007d8e:	6819      	ldr	r1, [r3, #0]
 8007d90:	6808      	ldr	r0, [r1, #0]
 8007d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d96:	f01e 0f10 	tst.w	lr, #16
 8007d9a:	bf08      	it	eq
 8007d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007da0:	f380 8809 	msr	PSP, r0
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	f3af 8000 	nop.w

08007db0 <pxCurrentTCBConst>:
 8007db0:	200004bc 	.word	0x200004bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop

08007db8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	607b      	str	r3, [r7, #4]
}
 8007dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007dd2:	f7fe fe93 	bl	8006afc <xTaskIncrementTick>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d003      	beq.n	8007de4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ddc:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <SysTick_Handler+0x40>)
 8007dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	2300      	movs	r3, #0
 8007de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	f383 8811 	msr	BASEPRI, r3
}
 8007dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007df0:	bf00      	nop
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	e000ed04 	.word	0xe000ed04

08007dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e00:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <vPortSetupTimerInterrupt+0x34>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e06:	4b0b      	ldr	r3, [pc, #44]	; (8007e34 <vPortSetupTimerInterrupt+0x38>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <vPortSetupTimerInterrupt+0x3c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a0a      	ldr	r2, [pc, #40]	; (8007e3c <vPortSetupTimerInterrupt+0x40>)
 8007e12:	fba2 2303 	umull	r2, r3, r2, r3
 8007e16:	099b      	lsrs	r3, r3, #6
 8007e18:	4a09      	ldr	r2, [pc, #36]	; (8007e40 <vPortSetupTimerInterrupt+0x44>)
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e1e:	4b04      	ldr	r3, [pc, #16]	; (8007e30 <vPortSetupTimerInterrupt+0x34>)
 8007e20:	2207      	movs	r2, #7
 8007e22:	601a      	str	r2, [r3, #0]
}
 8007e24:	bf00      	nop
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	e000e010 	.word	0xe000e010
 8007e34:	e000e018 	.word	0xe000e018
 8007e38:	20000000 	.word	0x20000000
 8007e3c:	10624dd3 	.word	0x10624dd3
 8007e40:	e000e014 	.word	0xe000e014

08007e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e54 <vPortEnableVFP+0x10>
 8007e48:	6801      	ldr	r1, [r0, #0]
 8007e4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e4e:	6001      	str	r1, [r0, #0]
 8007e50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e52:	bf00      	nop
 8007e54:	e000ed88 	.word	0xe000ed88

08007e58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e5e:	f3ef 8305 	mrs	r3, IPSR
 8007e62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2b0f      	cmp	r3, #15
 8007e68:	d914      	bls.n	8007e94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e6a:	4a17      	ldr	r2, [pc, #92]	; (8007ec8 <vPortValidateInterruptPriority+0x70>)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e74:	4b15      	ldr	r3, [pc, #84]	; (8007ecc <vPortValidateInterruptPriority+0x74>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	7afa      	ldrb	r2, [r7, #11]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d20a      	bcs.n	8007e94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	607b      	str	r3, [r7, #4]
}
 8007e90:	bf00      	nop
 8007e92:	e7fe      	b.n	8007e92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e94:	4b0e      	ldr	r3, [pc, #56]	; (8007ed0 <vPortValidateInterruptPriority+0x78>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e9c:	4b0d      	ldr	r3, [pc, #52]	; (8007ed4 <vPortValidateInterruptPriority+0x7c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d90a      	bls.n	8007eba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	603b      	str	r3, [r7, #0]
}
 8007eb6:	bf00      	nop
 8007eb8:	e7fe      	b.n	8007eb8 <vPortValidateInterruptPriority+0x60>
	}
 8007eba:	bf00      	nop
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	e000e3f0 	.word	0xe000e3f0
 8007ecc:	20000a6c 	.word	0x20000a6c
 8007ed0:	e000ed0c 	.word	0xe000ed0c
 8007ed4:	20000a70 	.word	0x20000a70

08007ed8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08a      	sub	sp, #40	; 0x28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ee4:	f7fe fd50 	bl	8006988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ee8:	4b58      	ldr	r3, [pc, #352]	; (800804c <pvPortMalloc+0x174>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ef0:	f000 f910 	bl	8008114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ef4:	4b56      	ldr	r3, [pc, #344]	; (8008050 <pvPortMalloc+0x178>)
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4013      	ands	r3, r2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f040 808e 	bne.w	800801e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d01d      	beq.n	8007f44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f08:	2208      	movs	r2, #8
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d014      	beq.n	8007f44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f023 0307 	bic.w	r3, r3, #7
 8007f20:	3308      	adds	r3, #8
 8007f22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <pvPortMalloc+0x6c>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	617b      	str	r3, [r7, #20]
}
 8007f40:	bf00      	nop
 8007f42:	e7fe      	b.n	8007f42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d069      	beq.n	800801e <pvPortMalloc+0x146>
 8007f4a:	4b42      	ldr	r3, [pc, #264]	; (8008054 <pvPortMalloc+0x17c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d864      	bhi.n	800801e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f54:	4b40      	ldr	r3, [pc, #256]	; (8008058 <pvPortMalloc+0x180>)
 8007f56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f58:	4b3f      	ldr	r3, [pc, #252]	; (8008058 <pvPortMalloc+0x180>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f5e:	e004      	b.n	8007f6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d903      	bls.n	8007f7c <pvPortMalloc+0xa4>
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1f1      	bne.n	8007f60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f7c:	4b33      	ldr	r3, [pc, #204]	; (800804c <pvPortMalloc+0x174>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d04b      	beq.n	800801e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2208      	movs	r2, #8
 8007f8c:	4413      	add	r3, r2
 8007f8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	1ad2      	subs	r2, r2, r3
 8007fa0:	2308      	movs	r3, #8
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d91f      	bls.n	8007fe8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	f003 0307 	and.w	r3, r3, #7
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00a      	beq.n	8007fd0 <pvPortMalloc+0xf8>
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	613b      	str	r3, [r7, #16]
}
 8007fcc:	bf00      	nop
 8007fce:	e7fe      	b.n	8007fce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	685a      	ldr	r2, [r3, #4]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	1ad2      	subs	r2, r2, r3
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007fe2:	69b8      	ldr	r0, [r7, #24]
 8007fe4:	f000 f8f8 	bl	80081d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007fe8:	4b1a      	ldr	r3, [pc, #104]	; (8008054 <pvPortMalloc+0x17c>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	4a18      	ldr	r2, [pc, #96]	; (8008054 <pvPortMalloc+0x17c>)
 8007ff4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ff6:	4b17      	ldr	r3, [pc, #92]	; (8008054 <pvPortMalloc+0x17c>)
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	4b18      	ldr	r3, [pc, #96]	; (800805c <pvPortMalloc+0x184>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d203      	bcs.n	800800a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008002:	4b14      	ldr	r3, [pc, #80]	; (8008054 <pvPortMalloc+0x17c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a15      	ldr	r2, [pc, #84]	; (800805c <pvPortMalloc+0x184>)
 8008008:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	4b10      	ldr	r3, [pc, #64]	; (8008050 <pvPortMalloc+0x178>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	431a      	orrs	r2, r3
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	2200      	movs	r2, #0
 800801c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800801e:	f7fe fcc1 	bl	80069a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	f003 0307 	and.w	r3, r3, #7
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00a      	beq.n	8008042 <pvPortMalloc+0x16a>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	60fb      	str	r3, [r7, #12]
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <pvPortMalloc+0x168>
	return pvReturn;
 8008042:	69fb      	ldr	r3, [r7, #28]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3728      	adds	r7, #40	; 0x28
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	200025d4 	.word	0x200025d4
 8008050:	200025e0 	.word	0x200025e0
 8008054:	200025d8 	.word	0x200025d8
 8008058:	200025cc 	.word	0x200025cc
 800805c:	200025dc 	.word	0x200025dc

08008060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d048      	beq.n	8008104 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008072:	2308      	movs	r3, #8
 8008074:	425b      	negs	r3, r3
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	4413      	add	r3, r2
 800807a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	4b21      	ldr	r3, [pc, #132]	; (800810c <vPortFree+0xac>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4013      	ands	r3, r2
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10a      	bne.n	80080a4 <vPortFree+0x44>
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	60fb      	str	r3, [r7, #12]
}
 80080a0:	bf00      	nop
 80080a2:	e7fe      	b.n	80080a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <vPortFree+0x62>
	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	60bb      	str	r3, [r7, #8]
}
 80080be:	bf00      	nop
 80080c0:	e7fe      	b.n	80080c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	4b11      	ldr	r3, [pc, #68]	; (800810c <vPortFree+0xac>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4013      	ands	r3, r2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d019      	beq.n	8008104 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d115      	bne.n	8008104 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	4b0b      	ldr	r3, [pc, #44]	; (800810c <vPortFree+0xac>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	43db      	mvns	r3, r3
 80080e2:	401a      	ands	r2, r3
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80080e8:	f7fe fc4e 	bl	8006988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	685a      	ldr	r2, [r3, #4]
 80080f0:	4b07      	ldr	r3, [pc, #28]	; (8008110 <vPortFree+0xb0>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4413      	add	r3, r2
 80080f6:	4a06      	ldr	r2, [pc, #24]	; (8008110 <vPortFree+0xb0>)
 80080f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080fa:	6938      	ldr	r0, [r7, #16]
 80080fc:	f000 f86c 	bl	80081d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008100:	f7fe fc50 	bl	80069a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008104:	bf00      	nop
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	200025e0 	.word	0x200025e0
 8008110:	200025d8 	.word	0x200025d8

08008114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800811a:	f641 3358 	movw	r3, #7000	; 0x1b58
 800811e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008120:	4b27      	ldr	r3, [pc, #156]	; (80081c0 <prvHeapInit+0xac>)
 8008122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f003 0307 	and.w	r3, r3, #7
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00c      	beq.n	8008148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3307      	adds	r3, #7
 8008132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 0307 	bic.w	r3, r3, #7
 800813a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	4a1f      	ldr	r2, [pc, #124]	; (80081c0 <prvHeapInit+0xac>)
 8008144:	4413      	add	r3, r2
 8008146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800814c:	4a1d      	ldr	r2, [pc, #116]	; (80081c4 <prvHeapInit+0xb0>)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008152:	4b1c      	ldr	r3, [pc, #112]	; (80081c4 <prvHeapInit+0xb0>)
 8008154:	2200      	movs	r2, #0
 8008156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	4413      	add	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008160:	2208      	movs	r2, #8
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	1a9b      	subs	r3, r3, r2
 8008166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f023 0307 	bic.w	r3, r3, #7
 800816e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4a15      	ldr	r2, [pc, #84]	; (80081c8 <prvHeapInit+0xb4>)
 8008174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008176:	4b14      	ldr	r3, [pc, #80]	; (80081c8 <prvHeapInit+0xb4>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2200      	movs	r2, #0
 800817c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800817e:	4b12      	ldr	r3, [pc, #72]	; (80081c8 <prvHeapInit+0xb4>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	1ad2      	subs	r2, r2, r3
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008194:	4b0c      	ldr	r3, [pc, #48]	; (80081c8 <prvHeapInit+0xb4>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	4a0a      	ldr	r2, [pc, #40]	; (80081cc <prvHeapInit+0xb8>)
 80081a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	4a09      	ldr	r2, [pc, #36]	; (80081d0 <prvHeapInit+0xbc>)
 80081aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081ac:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <prvHeapInit+0xc0>)
 80081ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081b2:	601a      	str	r2, [r3, #0]
}
 80081b4:	bf00      	nop
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	20000a74 	.word	0x20000a74
 80081c4:	200025cc 	.word	0x200025cc
 80081c8:	200025d4 	.word	0x200025d4
 80081cc:	200025dc 	.word	0x200025dc
 80081d0:	200025d8 	.word	0x200025d8
 80081d4:	200025e0 	.word	0x200025e0

080081d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80081e0:	4b28      	ldr	r3, [pc, #160]	; (8008284 <prvInsertBlockIntoFreeList+0xac>)
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	e002      	b.n	80081ec <prvInsertBlockIntoFreeList+0x14>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d8f7      	bhi.n	80081e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	4413      	add	r3, r2
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	429a      	cmp	r2, r3
 8008206:	d108      	bne.n	800821a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	441a      	add	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	441a      	add	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	429a      	cmp	r2, r3
 800822c:	d118      	bne.n	8008260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	4b15      	ldr	r3, [pc, #84]	; (8008288 <prvInsertBlockIntoFreeList+0xb0>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	429a      	cmp	r2, r3
 8008238:	d00d      	beq.n	8008256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	441a      	add	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	e008      	b.n	8008268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008256:	4b0c      	ldr	r3, [pc, #48]	; (8008288 <prvInsertBlockIntoFreeList+0xb0>)
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	e003      	b.n	8008268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	429a      	cmp	r2, r3
 800826e:	d002      	beq.n	8008276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008276:	bf00      	nop
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	200025cc 	.word	0x200025cc
 8008288:	200025d4 	.word	0x200025d4

0800828c <__libc_init_array>:
 800828c:	b570      	push	{r4, r5, r6, lr}
 800828e:	4d0d      	ldr	r5, [pc, #52]	; (80082c4 <__libc_init_array+0x38>)
 8008290:	4c0d      	ldr	r4, [pc, #52]	; (80082c8 <__libc_init_array+0x3c>)
 8008292:	1b64      	subs	r4, r4, r5
 8008294:	10a4      	asrs	r4, r4, #2
 8008296:	2600      	movs	r6, #0
 8008298:	42a6      	cmp	r6, r4
 800829a:	d109      	bne.n	80082b0 <__libc_init_array+0x24>
 800829c:	4d0b      	ldr	r5, [pc, #44]	; (80082cc <__libc_init_array+0x40>)
 800829e:	4c0c      	ldr	r4, [pc, #48]	; (80082d0 <__libc_init_array+0x44>)
 80082a0:	f000 f82e 	bl	8008300 <_init>
 80082a4:	1b64      	subs	r4, r4, r5
 80082a6:	10a4      	asrs	r4, r4, #2
 80082a8:	2600      	movs	r6, #0
 80082aa:	42a6      	cmp	r6, r4
 80082ac:	d105      	bne.n	80082ba <__libc_init_array+0x2e>
 80082ae:	bd70      	pop	{r4, r5, r6, pc}
 80082b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082b4:	4798      	blx	r3
 80082b6:	3601      	adds	r6, #1
 80082b8:	e7ee      	b.n	8008298 <__libc_init_array+0xc>
 80082ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80082be:	4798      	blx	r3
 80082c0:	3601      	adds	r6, #1
 80082c2:	e7f2      	b.n	80082aa <__libc_init_array+0x1e>
 80082c4:	080083e4 	.word	0x080083e4
 80082c8:	080083e4 	.word	0x080083e4
 80082cc:	080083e4 	.word	0x080083e4
 80082d0:	080083e8 	.word	0x080083e8

080082d4 <memcpy>:
 80082d4:	440a      	add	r2, r1
 80082d6:	4291      	cmp	r1, r2
 80082d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80082dc:	d100      	bne.n	80082e0 <memcpy+0xc>
 80082de:	4770      	bx	lr
 80082e0:	b510      	push	{r4, lr}
 80082e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ea:	4291      	cmp	r1, r2
 80082ec:	d1f9      	bne.n	80082e2 <memcpy+0xe>
 80082ee:	bd10      	pop	{r4, pc}

080082f0 <memset>:
 80082f0:	4402      	add	r2, r0
 80082f2:	4603      	mov	r3, r0
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d100      	bne.n	80082fa <memset+0xa>
 80082f8:	4770      	bx	lr
 80082fa:	f803 1b01 	strb.w	r1, [r3], #1
 80082fe:	e7f9      	b.n	80082f4 <memset+0x4>

08008300 <_init>:
 8008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008302:	bf00      	nop
 8008304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008306:	bc08      	pop	{r3}
 8008308:	469e      	mov	lr, r3
 800830a:	4770      	bx	lr

0800830c <_fini>:
 800830c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830e:	bf00      	nop
 8008310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008312:	bc08      	pop	{r3}
 8008314:	469e      	mov	lr, r3
 8008316:	4770      	bx	lr
