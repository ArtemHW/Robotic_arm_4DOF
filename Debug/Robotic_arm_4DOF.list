
Robotic_arm_4DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007744  08007744  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007744  08007744  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007744  08007744  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007744  08007744  00017744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007748  08007748  00017748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800774c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025c8  20000010  0800775c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025d8  0800775c  000225d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001829d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037e9  00000000  00000000  000382dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  0003bac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  0003d010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003dee  00000000  00000000  0003e3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4b6  00000000  00000000  000421be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1524  00000000  00000000  0005c674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010db98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005908  00000000  00000000  0010dbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007660 	.word	0x08007660

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007660 	.word	0x08007660

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2240      	movs	r2, #64	; 0x40
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000080 	.word	0x20000080

08000204 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	4a07      	ldr	r2, [pc, #28]	; (8000230 <vApplicationGetTimerTaskMemory+0x2c>)
 8000214:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <vApplicationGetTimerTaskMemory+0x30>)
 800021a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2240      	movs	r2, #64	; 0x40
 8000220:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000222:	bf00      	nop
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000180 	.word	0x20000180
 8000234:	200001d4 	.word	0x200001d4

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b5b0      	push	{r4, r5, r7, lr}
 800023a:	b098      	sub	sp, #96	; 0x60
 800023c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	myEventGroup.flag1 = 0;
 800023e:	4a75      	ldr	r2, [pc, #468]	; (8000414 <main+0x1dc>)
 8000240:	7813      	ldrb	r3, [r2, #0]
 8000242:	f36f 0300 	bfc	r3, #0, #1
 8000246:	7013      	strb	r3, [r2, #0]
	myEventGroup.flag2 = 0;
 8000248:	4a72      	ldr	r2, [pc, #456]	; (8000414 <main+0x1dc>)
 800024a:	7813      	ldrb	r3, [r2, #0]
 800024c:	f36f 0341 	bfc	r3, #1, #1
 8000250:	7013      	strb	r3, [r2, #0]
	myEventGroup.flag3 = 0;
 8000252:	4a70      	ldr	r2, [pc, #448]	; (8000414 <main+0x1dc>)
 8000254:	7813      	ldrb	r3, [r2, #0]
 8000256:	f36f 0382 	bfc	r3, #2, #1
 800025a:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025c:	f000 fe74 	bl	8000f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000260:	f000 f8f8 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000264:	f000 faea 	bl	800083c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000268:	f000 fa16 	bl	8000698 <MX_TIM1_Init>
  MX_I2C1_Init();
 800026c:	f000 f9d4 	bl	8000618 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000270:	f000 f948 	bl	8000504 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000274:	2100      	movs	r1, #0
 8000276:	4868      	ldr	r0, [pc, #416]	; (8000418 <main+0x1e0>)
 8000278:	f003 fc0c 	bl	8003a94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800027c:	2104      	movs	r1, #4
 800027e:	4866      	ldr	r0, [pc, #408]	; (8000418 <main+0x1e0>)
 8000280:	f003 fc08 	bl	8003a94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000284:	2108      	movs	r1, #8
 8000286:	4864      	ldr	r0, [pc, #400]	; (8000418 <main+0x1e0>)
 8000288:	f003 fc04 	bl	8003a94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800028c:	210c      	movs	r1, #12
 800028e:	4862      	ldr	r0, [pc, #392]	; (8000418 <main+0x1e0>)
 8000290:	f003 fc00 	bl	8003a94 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 750;
 8000294:	4b61      	ldr	r3, [pc, #388]	; (800041c <main+0x1e4>)
 8000296:	f240 22ee 	movw	r2, #750	; 0x2ee
 800029a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 300;
 800029c:	4b5f      	ldr	r3, [pc, #380]	; (800041c <main+0x1e4>)
 800029e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002a2:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 1350;
 80002a4:	4b5d      	ldr	r3, [pc, #372]	; (800041c <main+0x1e4>)
 80002a6:	f240 5246 	movw	r2, #1350	; 0x546
 80002aa:	63da      	str	r2, [r3, #60]	; 0x3c

  GPIOC->ODR |= GPIO_ODR_11;
 80002ac:	4b5c      	ldr	r3, [pc, #368]	; (8000420 <main+0x1e8>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a5b      	ldr	r2, [pc, #364]	; (8000420 <main+0x1e8>)
 80002b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002b6:	6153      	str	r3, [r2, #20]

	ADC1->CFGR |= ADC_CFGR_DMACFG; //1: DMA Circular Mode selected
 80002b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002bc:	68db      	ldr	r3, [r3, #12]
 80002be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002c2:	f043 0302 	orr.w	r3, r3, #2
 80002c6:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= ADC_CFGR_DMAEN; //Direct memory access enable
 80002c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002cc:	68db      	ldr	r3, [r3, #12]
 80002ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	60d3      	str	r3, [r2, #12]

	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // DMA1 clock enable
 80002d8:	4b52      	ldr	r3, [pc, #328]	; (8000424 <main+0x1ec>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	4a51      	ldr	r2, [pc, #324]	; (8000424 <main+0x1ec>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CCR |= (1<<10); // memory size 16 bits
 80002e4:	4b50      	ldr	r3, [pc, #320]	; (8000428 <main+0x1f0>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a4f      	ldr	r2, [pc, #316]	; (8000428 <main+0x1f0>)
 80002ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ee:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (1<<8); // peripheral size 16 bits
 80002f0:	4b4d      	ldr	r3, [pc, #308]	; (8000428 <main+0x1f0>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a4c      	ldr	r2, [pc, #304]	; (8000428 <main+0x1f0>)
 80002f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002fa:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC; //memory increment mode
 80002fc:	4b4a      	ldr	r3, [pc, #296]	; (8000428 <main+0x1f0>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a49      	ldr	r2, [pc, #292]	; (8000428 <main+0x1f0>)
 8000302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000306:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8000308:	4b47      	ldr	r3, [pc, #284]	; (8000428 <main+0x1f0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a46      	ldr	r2, [pc, #280]	; (8000428 <main+0x1f0>)
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CNDTR = 4;
 8000314:	4b44      	ldr	r3, [pc, #272]	; (8000428 <main+0x1f0>)
 8000316:	2204      	movs	r2, #4
 8000318:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CPAR = &(ADC1->DR);
 800031a:	4b43      	ldr	r3, [pc, #268]	; (8000428 <main+0x1f0>)
 800031c:	4a43      	ldr	r2, [pc, #268]	; (800042c <main+0x1f4>)
 800031e:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = buffer.adc_buffer;
 8000320:	4b41      	ldr	r3, [pc, #260]	; (8000428 <main+0x1f0>)
 8000322:	4a43      	ldr	r2, [pc, #268]	; (8000430 <main+0x1f8>)
 8000324:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CCR |= DMA_CCR_EN;
 8000326:	4b40      	ldr	r3, [pc, #256]	; (8000428 <main+0x1f0>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a3f      	ldr	r2, [pc, #252]	; (8000428 <main+0x1f0>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6013      	str	r3, [r2, #0]

	ADC1->CR |= ADC_CR_ADEN; //ADC enable control
 8000332:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6093      	str	r3, [r2, #8]
	while(ADC1->ISR & ADC_ISR_ADRDY) __asm__ volatile("NOP");
 8000342:	e000      	b.n	8000346 <main+0x10e>
 8000344:	bf00      	nop
 8000346:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f003 0301 	and.w	r3, r3, #1
 8000350:	2b00      	cmp	r3, #0
 8000352:	d1f7      	bne.n	8000344 <main+0x10c>
	ADC1->CR |= ADC_CR_ADSTART; // ADC start of regular conversion
 8000354:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6093      	str	r3, [r2, #8]

	buffer.xEventGroup1 = xEventGroupCreate();
 8000364:	f004 fcf1 	bl	8004d4a <xEventGroupCreate>
 8000368:	4603      	mov	r3, r0
 800036a:	4a31      	ldr	r2, [pc, #196]	; (8000430 <main+0x1f8>)
 800036c:	60d3      	str	r3, [r2, #12]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
	buffer.xTimer1Handle = xTimerCreate("Timer1", pdMS_TO_TICKS(50), pdTRUE, 0, timer1Callback);
 800036e:	4b31      	ldr	r3, [pc, #196]	; (8000434 <main+0x1fc>)
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	2300      	movs	r3, #0
 8000374:	2201      	movs	r2, #1
 8000376:	2132      	movs	r1, #50	; 0x32
 8000378:	482f      	ldr	r0, [pc, #188]	; (8000438 <main+0x200>)
 800037a:	f006 f9f3 	bl	8006764 <xTimerCreate>
 800037e:	4603      	mov	r3, r0
 8000380:	4a2b      	ldr	r2, [pc, #172]	; (8000430 <main+0x1f8>)
 8000382:	6093      	str	r3, [r2, #8]
	xTimerStart(buffer.xTimer1Handle, portMAX_DELAY);
 8000384:	4b2a      	ldr	r3, [pc, #168]	; (8000430 <main+0x1f8>)
 8000386:	689c      	ldr	r4, [r3, #8]
 8000388:	f005 fd5e 	bl	8005e48 <xTaskGetTickCount>
 800038c:	4602      	mov	r2, r0
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
 8000392:	9300      	str	r3, [sp, #0]
 8000394:	2300      	movs	r3, #0
 8000396:	2101      	movs	r1, #1
 8000398:	4620      	mov	r0, r4
 800039a:	f006 fa37 	bl	800680c <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ServoMotors */
  osThreadDef(ServoMotors, servo_motors, osPriorityNormal, 0, 64);
 800039e:	4b27      	ldr	r3, [pc, #156]	; (800043c <main+0x204>)
 80003a0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80003a4:	461d      	mov	r5, r3
 80003a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ServoMotorsHandle = osThreadCreate(osThread(ServoMotors), NULL);
 80003b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003b6:	2100      	movs	r1, #0
 80003b8:	4618      	mov	r0, r3
 80003ba:	f004 fc66 	bl	8004c8a <osThreadCreate>
 80003be:	4603      	mov	r3, r0
 80003c0:	4a1f      	ldr	r2, [pc, #124]	; (8000440 <main+0x208>)
 80003c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of EEPROMsave */
  osThreadDef(EEPROMsave, eeprom_save, osPriorityAboveNormal, 0, 250);
 80003c4:	4b1f      	ldr	r3, [pc, #124]	; (8000444 <main+0x20c>)
 80003c6:	f107 0420 	add.w	r4, r7, #32
 80003ca:	461d      	mov	r5, r3
 80003cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EEPROMsaveHandle = osThreadCreate(osThread(EEPROMsave), NULL);
 80003d8:	f107 0320 	add.w	r3, r7, #32
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f004 fc53 	bl	8004c8a <osThreadCreate>
 80003e4:	4603      	mov	r3, r0
 80003e6:	4a18      	ldr	r2, [pc, #96]	; (8000448 <main+0x210>)
 80003e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Path */
  osThreadDef(Path, path, osPriorityNormal, 0, 128);
 80003ea:	4b18      	ldr	r3, [pc, #96]	; (800044c <main+0x214>)
 80003ec:	1d3c      	adds	r4, r7, #4
 80003ee:	461d      	mov	r5, r3
 80003f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PathHandle = osThreadCreate(osThread(Path), NULL);
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2100      	movs	r1, #0
 8000400:	4618      	mov	r0, r3
 8000402:	f004 fc42 	bl	8004c8a <osThreadCreate>
 8000406:	4603      	mov	r3, r0
 8000408:	4a11      	ldr	r2, [pc, #68]	; (8000450 <main+0x218>)
 800040a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800040c:	f004 fc36 	bl	8004c7c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000410:	e7fe      	b.n	8000410 <main+0x1d8>
 8000412:	bf00      	nop
 8000414:	2000041c 	.word	0x2000041c
 8000418:	20000378 	.word	0x20000378
 800041c:	40012c00 	.word	0x40012c00
 8000420:	48000800 	.word	0x48000800
 8000424:	40021000 	.word	0x40021000
 8000428:	40020008 	.word	0x40020008
 800042c:	50000040 	.word	0x50000040
 8000430:	200003d0 	.word	0x200003d0
 8000434:	08000929 	.word	0x08000929
 8000438:	08007698 	.word	0x08007698
 800043c:	080076a0 	.word	0x080076a0
 8000440:	200003c4 	.word	0x200003c4
 8000444:	080076bc 	.word	0x080076bc
 8000448:	200003c8 	.word	0x200003c8
 800044c:	080076d8 	.word	0x080076d8
 8000450:	200003cc 	.word	0x200003cc

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b09c      	sub	sp, #112	; 0x70
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800045e:	2228      	movs	r2, #40	; 0x28
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f007 f8f4 	bl	8007650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000468:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
 8000476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000478:	463b      	mov	r3, r7
 800047a:	2234      	movs	r2, #52	; 0x34
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f007 f8e6 	bl	8007650 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000484:	2302      	movs	r3, #2
 8000486:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000488:	2301      	movs	r3, #1
 800048a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048c:	2310      	movs	r3, #16
 800048e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000490:	2302      	movs	r3, #2
 8000492:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000494:	2300      	movs	r3, #0
 8000496:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000498:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800049c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004a2:	4618      	mov	r0, r3
 80004a4:	f001 fdd2 	bl	800204c <HAL_RCC_OscConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004ae:	f000 fb4a 	bl	8000b46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b2:	230f      	movs	r3, #15
 80004b4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b6:	2302      	movs	r3, #2
 80004b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004ca:	2100      	movs	r1, #0
 80004cc:	4618      	mov	r0, r3
 80004ce:	f002 fdfb 	bl	80030c8 <HAL_RCC_ClockConfig>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004d8:	f000 fb35 	bl	8000b46 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 80004dc:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80004e0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004e6:	2300      	movs	r3, #0
 80004e8:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ea:	463b      	mov	r3, r7
 80004ec:	4618      	mov	r0, r3
 80004ee:	f003 f831 	bl	8003554 <HAL_RCCEx_PeriphCLKConfig>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80004f8:	f000 fb25 	bl	8000b46 <Error_Handler>
  }
}
 80004fc:	bf00      	nop
 80004fe:	3770      	adds	r7, #112	; 0x70
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
 8000518:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800051a:	4b3e      	ldr	r3, [pc, #248]	; (8000614 <MX_ADC1_Init+0x110>)
 800051c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000520:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000522:	4b3c      	ldr	r3, [pc, #240]	; (8000614 <MX_ADC1_Init+0x110>)
 8000524:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000528:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800052a:	4b3a      	ldr	r3, [pc, #232]	; (8000614 <MX_ADC1_Init+0x110>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000530:	4b38      	ldr	r3, [pc, #224]	; (8000614 <MX_ADC1_Init+0x110>)
 8000532:	2201      	movs	r2, #1
 8000534:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000536:	4b37      	ldr	r3, [pc, #220]	; (8000614 <MX_ADC1_Init+0x110>)
 8000538:	2200      	movs	r2, #0
 800053a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053c:	4b35      	ldr	r3, [pc, #212]	; (8000614 <MX_ADC1_Init+0x110>)
 800053e:	2200      	movs	r2, #0
 8000540:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000544:	4b33      	ldr	r3, [pc, #204]	; (8000614 <MX_ADC1_Init+0x110>)
 8000546:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800054a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 800054c:	4b31      	ldr	r3, [pc, #196]	; (8000614 <MX_ADC1_Init+0x110>)
 800054e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000552:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000554:	4b2f      	ldr	r3, [pc, #188]	; (8000614 <MX_ADC1_Init+0x110>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800055a:	4b2e      	ldr	r3, [pc, #184]	; (8000614 <MX_ADC1_Init+0x110>)
 800055c:	2204      	movs	r2, #4
 800055e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000560:	4b2c      	ldr	r3, [pc, #176]	; (8000614 <MX_ADC1_Init+0x110>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000568:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <MX_ADC1_Init+0x110>)
 800056a:	2204      	movs	r2, #4
 800056c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800056e:	4b29      	ldr	r3, [pc, #164]	; (8000614 <MX_ADC1_Init+0x110>)
 8000570:	2200      	movs	r2, #0
 8000572:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <MX_ADC1_Init+0x110>)
 8000576:	2200      	movs	r2, #0
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800057a:	4826      	ldr	r0, [pc, #152]	; (8000614 <MX_ADC1_Init+0x110>)
 800057c:	f000 fd1a 	bl	8000fb4 <HAL_ADC_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000586:	f000 fade 	bl	8000b46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800058a:	2301      	movs	r3, #1
 800058c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800058e:	2301      	movs	r3, #1
 8000590:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000596:	2303      	movs	r3, #3
 8000598:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	4619      	mov	r1, r3
 80005a6:	481b      	ldr	r0, [pc, #108]	; (8000614 <MX_ADC1_Init+0x110>)
 80005a8:	f000 fe8a 	bl	80012c0 <HAL_ADC_ConfigChannel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005b2:	f000 fac8 	bl	8000b46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005be:	463b      	mov	r3, r7
 80005c0:	4619      	mov	r1, r3
 80005c2:	4814      	ldr	r0, [pc, #80]	; (8000614 <MX_ADC1_Init+0x110>)
 80005c4:	f000 fe7c 	bl	80012c0 <HAL_ADC_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80005ce:	f000 faba 	bl	8000b46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005d2:	2305      	movs	r3, #5
 80005d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005d6:	2303      	movs	r3, #3
 80005d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	4619      	mov	r1, r3
 80005de:	480d      	ldr	r0, [pc, #52]	; (8000614 <MX_ADC1_Init+0x110>)
 80005e0:	f000 fe6e 	bl	80012c0 <HAL_ADC_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80005ea:	f000 faac 	bl	8000b46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005ee:	230b      	movs	r3, #11
 80005f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005f2:	2304      	movs	r3, #4
 80005f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	4619      	mov	r1, r3
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <MX_ADC1_Init+0x110>)
 80005fc:	f000 fe60 	bl	80012c0 <HAL_ADC_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000606:	f000 fa9e 	bl	8000b46 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200002d4 	.word	0x200002d4

08000618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_I2C1_Init+0x74>)
 800061e:	4a1c      	ldr	r2, [pc, #112]	; (8000690 <MX_I2C1_Init+0x78>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_I2C1_Init+0x74>)
 8000624:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <MX_I2C1_Init+0x7c>)
 8000626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_I2C1_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_I2C1_Init+0x74>)
 8000630:	2201      	movs	r2, #1
 8000632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_I2C1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_I2C1_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_I2C1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_I2C1_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000652:	480e      	ldr	r0, [pc, #56]	; (800068c <MX_I2C1_Init+0x74>)
 8000654:	f001 fbd4 	bl	8001e00 <HAL_I2C_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800065e:	f000 fa72 	bl	8000b46 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000662:	2100      	movs	r1, #0
 8000664:	4809      	ldr	r0, [pc, #36]	; (800068c <MX_I2C1_Init+0x74>)
 8000666:	f001 fc5a 	bl	8001f1e <HAL_I2CEx_ConfigAnalogFilter>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000670:	f000 fa69 	bl	8000b46 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000674:	2100      	movs	r1, #0
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_I2C1_Init+0x74>)
 8000678:	f001 fc9c 	bl	8001fb4 <HAL_I2CEx_ConfigDigitalFilter>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000682:	f000 fa60 	bl	8000b46 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000324 	.word	0x20000324
 8000690:	40005400 	.word	0x40005400
 8000694:	2000090e 	.word	0x2000090e

08000698 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b09a      	sub	sp, #104	; 0x68
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
 80006c8:	615a      	str	r2, [r3, #20]
 80006ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	222c      	movs	r2, #44	; 0x2c
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f006 ffbc 	bl	8007650 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006d8:	4b56      	ldr	r3, [pc, #344]	; (8000834 <MX_TIM1_Init+0x19c>)
 80006da:	4a57      	ldr	r2, [pc, #348]	; (8000838 <MX_TIM1_Init+0x1a0>)
 80006dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 80006de:	4b55      	ldr	r3, [pc, #340]	; (8000834 <MX_TIM1_Init+0x19c>)
 80006e0:	221f      	movs	r2, #31
 80006e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e4:	4b53      	ldr	r3, [pc, #332]	; (8000834 <MX_TIM1_Init+0x19c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80006ea:	4b52      	ldr	r3, [pc, #328]	; (8000834 <MX_TIM1_Init+0x19c>)
 80006ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80006f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f2:	4b50      	ldr	r3, [pc, #320]	; (8000834 <MX_TIM1_Init+0x19c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006f8:	4b4e      	ldr	r3, [pc, #312]	; (8000834 <MX_TIM1_Init+0x19c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fe:	4b4d      	ldr	r3, [pc, #308]	; (8000834 <MX_TIM1_Init+0x19c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000704:	484b      	ldr	r0, [pc, #300]	; (8000834 <MX_TIM1_Init+0x19c>)
 8000706:	f003 f8b7 	bl	8003878 <HAL_TIM_Base_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000710:	f000 fa19 	bl	8000b46 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800071a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800071e:	4619      	mov	r1, r3
 8000720:	4844      	ldr	r0, [pc, #272]	; (8000834 <MX_TIM1_Init+0x19c>)
 8000722:	f003 fcd1 	bl	80040c8 <HAL_TIM_ConfigClockSource>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800072c:	f000 fa0b 	bl	8000b46 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000730:	4840      	ldr	r0, [pc, #256]	; (8000834 <MX_TIM1_Init+0x19c>)
 8000732:	f003 f94d 	bl	80039d0 <HAL_TIM_PWM_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800073c:	f000 fa03 	bl	8000b46 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000740:	2320      	movs	r3, #32
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000744:	2300      	movs	r3, #0
 8000746:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800074c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000750:	4619      	mov	r1, r3
 8000752:	4838      	ldr	r0, [pc, #224]	; (8000834 <MX_TIM1_Init+0x19c>)
 8000754:	f004 f97e 	bl	8004a54 <HAL_TIMEx_MasterConfigSynchronization>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800075e:	f000 f9f2 	bl	8000b46 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000762:	2360      	movs	r3, #96	; 0x60
 8000764:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 750;
 8000766:	f240 23ee 	movw	r3, #750	; 0x2ee
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076c:	2300      	movs	r3, #0
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000770:	2300      	movs	r3, #0
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000778:	2300      	movs	r3, #0
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000780:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000784:	2200      	movs	r2, #0
 8000786:	4619      	mov	r1, r3
 8000788:	482a      	ldr	r0, [pc, #168]	; (8000834 <MX_TIM1_Init+0x19c>)
 800078a:	f003 fb89 	bl	8003ea0 <HAL_TIM_PWM_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000794:	f000 f9d7 	bl	8000b46 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000798:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800079c:	2204      	movs	r2, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	4824      	ldr	r0, [pc, #144]	; (8000834 <MX_TIM1_Init+0x19c>)
 80007a2:	f003 fb7d 	bl	8003ea0 <HAL_TIM_PWM_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80007ac:	f000 f9cb 	bl	8000b46 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007b4:	2208      	movs	r2, #8
 80007b6:	4619      	mov	r1, r3
 80007b8:	481e      	ldr	r0, [pc, #120]	; (8000834 <MX_TIM1_Init+0x19c>)
 80007ba:	f003 fb71 	bl	8003ea0 <HAL_TIM_PWM_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80007c4:	f000 f9bf 	bl	8000b46 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007cc:	220c      	movs	r2, #12
 80007ce:	4619      	mov	r1, r3
 80007d0:	4818      	ldr	r0, [pc, #96]	; (8000834 <MX_TIM1_Init+0x19c>)
 80007d2:	f003 fb65 	bl	8003ea0 <HAL_TIM_PWM_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80007dc:	f000 f9b3 	bl	8000b46 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4619      	mov	r1, r3
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <MX_TIM1_Init+0x19c>)
 8000816:	f004 f983 	bl	8004b20 <HAL_TIMEx_ConfigBreakDeadTime>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8000820:	f000 f991 	bl	8000b46 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000824:	4803      	ldr	r0, [pc, #12]	; (8000834 <MX_TIM1_Init+0x19c>)
 8000826:	f000 fa75 	bl	8000d14 <HAL_TIM_MspPostInit>

}
 800082a:	bf00      	nop
 800082c:	3768      	adds	r7, #104	; 0x68
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000378 	.word	0x20000378
 8000838:	40012c00 	.word	0x40012c00

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b33      	ldr	r3, [pc, #204]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	4a32      	ldr	r2, [pc, #200]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000858:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800085c:	6153      	str	r3, [r2, #20]
 800085e:	4b30      	ldr	r3, [pc, #192]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <MX_GPIO_Init+0xe4>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a2c      	ldr	r2, [pc, #176]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b27      	ldr	r3, [pc, #156]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a26      	ldr	r2, [pc, #152]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b24      	ldr	r3, [pc, #144]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800089a:	2201      	movs	r2, #1
 800089c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a0:	4820      	ldr	r0, [pc, #128]	; (8000924 <MX_GPIO_Init+0xe8>)
 80008a2:	f001 fa7d 	bl	8001da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80008ac:	481d      	ldr	r0, [pc, #116]	; (8000924 <MX_GPIO_Init+0xe8>)
 80008ae:	f001 fa77 	bl	8001da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4619      	mov	r1, r3
 80008c8:	4816      	ldr	r0, [pc, #88]	; (8000924 <MX_GPIO_Init+0xe8>)
 80008ca:	f001 f8f7 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80008ce:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80008d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	4619      	mov	r1, r3
 80008e6:	480f      	ldr	r0, [pc, #60]	; (8000924 <MX_GPIO_Init+0xe8>)
 80008e8:	f001 f8e8 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008f8:	2302      	movs	r3, #2
 80008fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4619      	mov	r1, r3
 8000902:	4808      	ldr	r0, [pc, #32]	; (8000924 <MX_GPIO_Init+0xe8>)
 8000904:	f001 f8da 	bl	8001abc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2105      	movs	r1, #5
 800090c:	2028      	movs	r0, #40	; 0x28
 800090e:	f001 f8ab 	bl	8001a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000912:	2028      	movs	r0, #40	; 0x28
 8000914:	f001 f8c4 	bl	8001aa0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000918:	bf00      	nop
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000
 8000924:	48000800 	.word	0x48000800

08000928 <timer1Callback>:

/* USER CODE BEGIN 4 */
void timer1Callback( TimerHandle_t xTimer )
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	//xEventGroupSetBits(buffer.xEventGroup1, 0x1);
//	xEventGroupSetBitsFromISR(buffer.xEventGroup1, 0x1, pdFALSE);
	myEventGroup.flag1 = 1;
 8000930:	4a05      	ldr	r2, [pc, #20]	; (8000948 <timer1Callback+0x20>)
 8000932:	7813      	ldrb	r3, [r2, #0]
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	7013      	strb	r3, [r2, #0]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	2000041c 	.word	0x2000041c

0800094c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800095c:	d104      	bne.n	8000968 <HAL_GPIO_EXTI_Callback+0x1c>
	{
//		xEventGroupSetBitsFromISR(buffer.xEventGroup1, 0x2, pdFALSE);
		myEventGroup.flag2 = 1;
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000960:	7813      	ldrb	r3, [r2, #0]
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	7013      	strb	r3, [r2, #0]
	}
	if(GPIO_Pin == GPIO_PIN_12)
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800096e:	d104      	bne.n	800097a <HAL_GPIO_EXTI_Callback+0x2e>
	{
//		xEventGroupSetBitsFromISR(buffer.xEventGroup1, 0x4, pdFALSE);
		myEventGroup.flag3 = 1;
 8000970:	4a05      	ldr	r2, [pc, #20]	; (8000988 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000972:	7813      	ldrb	r3, [r2, #0]
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	7013      	strb	r3, [r2, #0]
	}
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	2000041c 	.word	0x2000041c

0800098c <servo_motors>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_servo_motors */
void servo_motors(void const * argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	  xEventGroupWaitBits(buffer.xEventGroup1, 0x1, pdTRUE, pdTRUE, portMAX_DELAY);
//	  EventBits_t result = 0;
//	  result = xEventGroupGetBits(buffer.xEventGroup1);
	  while(myEventGroup.flag1 != 1)
 8000994:	e002      	b.n	800099c <servo_motors+0x10>
	  {
		  vTaskDelay(15);
 8000996:	200f      	movs	r0, #15
 8000998:	f005 f912 	bl	8005bc0 <vTaskDelay>
	  while(myEventGroup.flag1 != 1)
 800099c:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <servo_motors+0xbc>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d0f5      	beq.n	8000996 <servo_motors+0xa>
	  }
	  TIM1->CCR1 = ((float)buffer.adc_buffer[0]/4096)*1000 + 250;
 80009aa:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <servo_motors+0xc0>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	ee07 3a90 	vmov	s15, r3
 80009b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8000a50 <servo_motors+0xc4>
 80009ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009be:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000a54 <servo_motors+0xc8>
 80009c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009c6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000a58 <servo_motors+0xcc>
 80009ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <servo_motors+0xd0>)
 80009d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009d4:	ee17 2a90 	vmov	r2, s15
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR2 = ((float)buffer.adc_buffer[1]/4096)*1000 - 350;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <servo_motors+0xc0>)
 80009dc:	885b      	ldrh	r3, [r3, #2]
 80009de:	ee07 3a90 	vmov	s15, r3
 80009e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009e6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000a50 <servo_motors+0xc4>
 80009ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000a54 <servo_motors+0xc8>
 80009f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000a60 <servo_motors+0xd4>
 80009fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <servo_motors+0xd0>)
 8000a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a04:	ee17 2a90 	vmov	r2, s15
 8000a08:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM1->CCR3 = ((float)buffer.adc_buffer[2]/4096)*1000 + 550;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <servo_motors+0xc0>)
 8000a0c:	889b      	ldrh	r3, [r3, #4]
 8000a0e:	ee07 3a90 	vmov	s15, r3
 8000a12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a16:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000a50 <servo_motors+0xc4>
 8000a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a1e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000a54 <servo_motors+0xc8>
 8000a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a26:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000a64 <servo_motors+0xd8>
 8000a2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <servo_motors+0xd0>)
 8000a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a34:	ee17 2a90 	vmov	r2, s15
 8000a38:	63da      	str	r2, [r3, #60]	; 0x3c
	  __asm__ volatile("NOP");
 8000a3a:	bf00      	nop
	  myEventGroup.flag1 = 0;
 8000a3c:	4a02      	ldr	r2, [pc, #8]	; (8000a48 <servo_motors+0xbc>)
 8000a3e:	7813      	ldrb	r3, [r2, #0]
 8000a40:	f36f 0300 	bfc	r3, #0, #1
 8000a44:	7013      	strb	r3, [r2, #0]
	  while(myEventGroup.flag1 != 1)
 8000a46:	e7a9      	b.n	800099c <servo_motors+0x10>
 8000a48:	2000041c 	.word	0x2000041c
 8000a4c:	200003d0 	.word	0x200003d0
 8000a50:	45800000 	.word	0x45800000
 8000a54:	447a0000 	.word	0x447a0000
 8000a58:	437a0000 	.word	0x437a0000
 8000a5c:	40012c00 	.word	0x40012c00
 8000a60:	43af0000 	.word	0x43af0000
 8000a64:	44098000 	.word	0x44098000

08000a68 <eeprom_save>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_eeprom_save */
void eeprom_save(void const * argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN eeprom_save */
	uint8_t number_of_points[10] = {0};
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	809a      	strh	r2, [r3, #4]
	uint16_t i = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	82fb      	strh	r3, [r7, #22]
//		at24c256b_sequential_read(&hi2c1, I2C_ADDRESS_AT24C256B, (int8_t*)buffer_for_seqread, sizeof(buffer_for_seqread), address, GPIOC, GPIO_ODR_10);
//		vTaskDelay(100);
	  //xEventGroupWaitBits(buffer.xEventGroup1, 0x2, pdTRUE, pdTRUE, portMAX_DELAY);
//	  uint32_t result = 0;
//	  result = xEventGroupGetBits(buffer.xEventGroup1);
	  while(myEventGroup.flag2 != 1)
 8000a82:	e002      	b.n	8000a8a <eeprom_save+0x22>
	  {
		  vTaskDelay(15);
 8000a84:	200f      	movs	r0, #15
 8000a86:	f005 f89b 	bl	8005bc0 <vTaskDelay>
	  while(myEventGroup.flag2 != 1)
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <eeprom_save+0xa4>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d0f5      	beq.n	8000a84 <eeprom_save+0x1c>
	  }
	  buffer.points[i] = TIM1->CCR1;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <eeprom_save+0xa8>)
 8000a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9c:	8afb      	ldrh	r3, [r7, #22]
 8000a9e:	b291      	uxth	r1, r2
 8000aa0:	4a1c      	ldr	r2, [pc, #112]	; (8000b14 <eeprom_save+0xac>)
 8000aa2:	3308      	adds	r3, #8
 8000aa4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  buffer.points[i+1] = TIM1->CCR2;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <eeprom_save+0xa8>)
 8000aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000aac:	8afb      	ldrh	r3, [r7, #22]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	b291      	uxth	r1, r2
 8000ab2:	4a18      	ldr	r2, [pc, #96]	; (8000b14 <eeprom_save+0xac>)
 8000ab4:	3308      	adds	r3, #8
 8000ab6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  buffer.points[i+2] = TIM1->CCR3;
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <eeprom_save+0xa8>)
 8000abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000abe:	8afb      	ldrh	r3, [r7, #22]
 8000ac0:	3302      	adds	r3, #2
 8000ac2:	b291      	uxth	r1, r2
 8000ac4:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <eeprom_save+0xac>)
 8000ac6:	3308      	adds	r3, #8
 8000ac8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  i+=3;
 8000acc:	8afb      	ldrh	r3, [r7, #22]
 8000ace:	3303      	adds	r3, #3
 8000ad0:	82fb      	strh	r3, [r7, #22]
	    uint8_t sum = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	757b      	strb	r3, [r7, #21]
	    for (uint8_t i = 0; i < sizeof(number_of_points); i++) {
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	753b      	strb	r3, [r7, #20]
 8000ada:	e00a      	b.n	8000af2 <eeprom_save+0x8a>
	        sum += number_of_points[i];
 8000adc:	7d3b      	ldrb	r3, [r7, #20]
 8000ade:	3318      	adds	r3, #24
 8000ae0:	443b      	add	r3, r7
 8000ae2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000ae6:	7d7b      	ldrb	r3, [r7, #21]
 8000ae8:	4413      	add	r3, r2
 8000aea:	757b      	strb	r3, [r7, #21]
	    for (uint8_t i = 0; i < sizeof(number_of_points); i++) {
 8000aec:	7d3b      	ldrb	r3, [r7, #20]
 8000aee:	3301      	adds	r3, #1
 8000af0:	753b      	strb	r3, [r7, #20]
 8000af2:	7d3b      	ldrb	r3, [r7, #20]
 8000af4:	2b09      	cmp	r3, #9
 8000af6:	d9f1      	bls.n	8000adc <eeprom_save+0x74>
	    }
	  vTaskDelay(100);
 8000af8:	2064      	movs	r0, #100	; 0x64
 8000afa:	f005 f861 	bl	8005bc0 <vTaskDelay>
//	  xEventGroupClearBits(buffer.xEventGroup1, 0x2);
	  myEventGroup.flag2 = 0;
 8000afe:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <eeprom_save+0xa4>)
 8000b00:	7813      	ldrb	r3, [r2, #0]
 8000b02:	f36f 0341 	bfc	r3, #1, #1
 8000b06:	7013      	strb	r3, [r2, #0]
  {
 8000b08:	e7bb      	b.n	8000a82 <eeprom_save+0x1a>
 8000b0a:	bf00      	nop
 8000b0c:	2000041c 	.word	0x2000041c
 8000b10:	40012c00 	.word	0x40012c00
 8000b14:	200003d0 	.word	0x200003d0

08000b18 <path>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_path */
void path(void const * argument)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN path */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f004 f8fe 	bl	8004d22 <osDelay>
 8000b26:	e7fb      	b.n	8000b20 <path+0x8>

08000b28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b38:	d101      	bne.n	8000b3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b3a:	f000 fa1b 	bl	8000f74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4a:	b672      	cpsid	i
}
 8000b4c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <Error_Handler+0x8>

08000b50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6193      	str	r3, [r2, #24]
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b78:	61d3      	str	r3, [r2, #28]
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	210f      	movs	r1, #15
 8000b8a:	f06f 0001 	mvn.w	r0, #1
 8000b8e:	f000 ff6b 	bl	8001a68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bc0:	d13c      	bne.n	8000c3c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bc2:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <HAL_ADC_MspInit+0xa4>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <HAL_ADC_MspInit+0xa4>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	6153      	str	r3, [r2, #20]
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <HAL_ADC_MspInit+0xa4>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <HAL_ADC_MspInit+0xa4>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a19      	ldr	r2, [pc, #100]	; (8000c44 <HAL_ADC_MspInit+0xa4>)
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_ADC_MspInit+0xa4>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_ADC_MspInit+0xa4>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <HAL_ADC_MspInit+0xa4>)
 8000bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bfc:	6153      	str	r3, [r2, #20]
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_ADC_MspInit+0xa4>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA4     ------> ADC1_IN5
    PB0     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000c0a:	2313      	movs	r3, #19
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f000 ff4c 	bl	8001abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c24:	2301      	movs	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4804      	ldr	r0, [pc, #16]	; (8000c48 <HAL_ADC_MspInit+0xa8>)
 8000c38:	f000 ff40 	bl	8001abc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000
 8000c48:	48000400 	.word	0x48000400

08000c4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <HAL_I2C_MspInit+0x7c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d128      	bne.n	8000cc0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_I2C_MspInit+0x80>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	4a16      	ldr	r2, [pc, #88]	; (8000ccc <HAL_I2C_MspInit+0x80>)
 8000c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c78:	6153      	str	r3, [r2, #20]
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <HAL_I2C_MspInit+0x80>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8c:	2312      	movs	r3, #18
 8000c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c98:	2304      	movs	r3, #4
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <HAL_I2C_MspInit+0x84>)
 8000ca4:	f000 ff0a 	bl	8001abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_I2C_MspInit+0x80>)
 8000caa:	69db      	ldr	r3, [r3, #28]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_I2C_MspInit+0x80>)
 8000cae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb2:	61d3      	str	r3, [r2, #28]
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_I2C_MspInit+0x80>)
 8000cb6:	69db      	ldr	r3, [r3, #28]
 8000cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3728      	adds	r7, #40	; 0x28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40005400 	.word	0x40005400
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	48000400 	.word	0x48000400

08000cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_TIM_Base_MspInit+0x38>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d10b      	bne.n	8000cfe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_TIM_Base_MspInit+0x3c>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <HAL_TIM_Base_MspInit+0x3c>)
 8000cec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40012c00 	.word	0x40012c00
 8000d10:	40021000 	.word	0x40021000

08000d14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a11      	ldr	r2, [pc, #68]	; (8000d78 <HAL_TIM_MspPostInit+0x64>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d11b      	bne.n	8000d6e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_TIM_MspPostInit+0x68>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_TIM_MspPostInit+0x68>)
 8000d3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d40:	6153      	str	r3, [r2, #20]
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_TIM_MspPostInit+0x68>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d4e:	230f      	movs	r3, #15
 8000d50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <HAL_TIM_MspPostInit+0x6c>)
 8000d6a:	f000 fea7 	bl	8001abc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3720      	adds	r7, #32
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40012c00 	.word	0x40012c00
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48000800 	.word	0x48000800

08000d84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08e      	sub	sp, #56	; 0x38
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000d94:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <HAL_InitTick+0xe4>)
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	4a33      	ldr	r2, [pc, #204]	; (8000e68 <HAL_InitTick+0xe4>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	61d3      	str	r3, [r2, #28]
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <HAL_InitTick+0xe4>)
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dac:	f107 0210 	add.w	r2, r7, #16
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fb9a 	bl	80034f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d103      	bne.n	8000dce <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dc6:	f002 fb71 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8000dca:	6378      	str	r0, [r7, #52]	; 0x34
 8000dcc:	e004      	b.n	8000dd8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dce:	f002 fb6d 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dda:	4a24      	ldr	r2, [pc, #144]	; (8000e6c <HAL_InitTick+0xe8>)
 8000ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8000de0:	0c9b      	lsrs	r3, r3, #18
 8000de2:	3b01      	subs	r3, #1
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <HAL_InitTick+0xec>)
 8000de8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <HAL_InitTick+0xec>)
 8000df0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000df4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000df6:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <HAL_InitTick+0xec>)
 8000df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfa:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <HAL_InitTick+0xec>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_InitTick+0xec>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <HAL_InitTick+0xec>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000e0e:	4818      	ldr	r0, [pc, #96]	; (8000e70 <HAL_InitTick+0xec>)
 8000e10:	f002 fd32 	bl	8003878 <HAL_TIM_Base_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d11b      	bne.n	8000e5a <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000e22:	4813      	ldr	r0, [pc, #76]	; (8000e70 <HAL_InitTick+0xec>)
 8000e24:	f002 fd80 	bl	8003928 <HAL_TIM_Base_Start_IT>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d111      	bne.n	8000e5a <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e36:	201c      	movs	r0, #28
 8000e38:	f000 fe32 	bl	8001aa0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b0f      	cmp	r3, #15
 8000e40:	d808      	bhi.n	8000e54 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000e42:	2200      	movs	r2, #0
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	201c      	movs	r0, #28
 8000e48:	f000 fe0e 	bl	8001a68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e4c:	4a09      	ldr	r2, [pc, #36]	; (8000e74 <HAL_InitTick+0xf0>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e002      	b.n	8000e5a <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3738      	adds	r7, #56	; 0x38
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	431bde83 	.word	0x431bde83
 8000e70:	20000420 	.word	0x20000420
 8000e74:	20000004 	.word	0x20000004

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <NMI_Handler+0x4>

08000e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <TIM2_IRQHandler+0x10>)
 8000eaa:	f002 fed9 	bl	8003c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000420 	.word	0x20000420

08000eb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000ebc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ec0:	f000 ff86 	bl	8001dd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ec4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ec8:	f000 ff82 	bl	8001dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <SystemInit+0x20>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <SystemInit+0x20>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f2c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ef8:	f7ff ffea 	bl	8000ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000efe:	490d      	ldr	r1, [pc, #52]	; (8000f34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <LoopForever+0xe>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f14:	4c0a      	ldr	r4, [pc, #40]	; (8000f40 <LoopForever+0x16>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f22:	f006 fb63 	bl	80075ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f26:	f7ff f987 	bl	8000238 <main>

08000f2a <LoopForever>:

LoopForever:
    b LoopForever
 8000f2a:	e7fe      	b.n	8000f2a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f2c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f34:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f38:	0800774c 	.word	0x0800774c
  ldr r2, =_sbss
 8000f3c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f40:	200025d8 	.word	0x200025d8

08000f44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC1_IRQHandler>
	...

08000f48 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_Init+0x28>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <HAL_Init+0x28>)
 8000f52:	f043 0310 	orr.w	r3, r3, #16
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 fd7a 	bl	8001a52 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f7ff ff10 	bl	8000d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f64:	f7ff fdf4 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40022000 	.word	0x40022000

08000f74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008
 8000f98:	2000046c 	.word	0x2000046c

08000f9c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000046c 	.word	0x2000046c

08000fb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b09a      	sub	sp, #104	; 0x68
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e169      	b.n	80012a8 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d176      	bne.n	80010d4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d152      	bne.n	8001094 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff fdc9 	bl	8000ba0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d13b      	bne.n	8001094 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 fc05 	bl	800182c <ADC_Disable>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f003 0310 	and.w	r3, r3, #16
 8001030:	2b00      	cmp	r3, #0
 8001032:	d12f      	bne.n	8001094 <HAL_ADC_Init+0xe0>
 8001034:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001038:	2b00      	cmp	r3, #0
 800103a:	d12b      	bne.n	8001094 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001044:	f023 0302 	bic.w	r3, r3, #2
 8001048:	f043 0202 	orr.w	r2, r3, #2
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800105e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800106e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001070:	4b8f      	ldr	r3, [pc, #572]	; (80012b0 <HAL_ADC_Init+0x2fc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a8f      	ldr	r2, [pc, #572]	; (80012b4 <HAL_ADC_Init+0x300>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	0c9a      	lsrs	r2, r3, #18
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001086:	e002      	b.n	800108e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	3b01      	subs	r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f9      	bne.n	8001088 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d007      	beq.n	80010b2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010b0:	d110      	bne.n	80010d4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f023 0312 	bic.w	r3, r3, #18
 80010ba:	f043 0210 	orr.w	r2, r3, #16
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f040 80d6 	bne.w	800128e <HAL_ADC_Init+0x2da>
 80010e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f040 80d1 	bne.w	800128e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 80c9 	bne.w	800128e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001104:	f043 0202 	orr.w	r2, r3, #2
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800110c:	4b6a      	ldr	r3, [pc, #424]	; (80012b8 <HAL_ADC_Init+0x304>)
 800110e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	2b01      	cmp	r3, #1
 8001120:	d108      	bne.n	8001134 <HAL_ADC_Init+0x180>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b01      	cmp	r3, #1
 800112e:	d101      	bne.n	8001134 <HAL_ADC_Init+0x180>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <HAL_ADC_Init+0x182>
 8001134:	2300      	movs	r3, #0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d11c      	bne.n	8001174 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800113a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800113c:	2b00      	cmp	r3, #0
 800113e:	d010      	beq.n	8001162 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b01      	cmp	r3, #1
 800114a:	d107      	bne.n	800115c <HAL_ADC_Init+0x1a8>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d101      	bne.n	800115c <HAL_ADC_Init+0x1a8>
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <HAL_ADC_Init+0x1aa>
 800115c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800115e:	2b00      	cmp	r3, #0
 8001160:	d108      	bne.n	8001174 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	431a      	orrs	r2, r3
 8001170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001172:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7e5b      	ldrb	r3, [r3, #25]
 8001178:	035b      	lsls	r3, r3, #13
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800117e:	2a01      	cmp	r2, #1
 8001180:	d002      	beq.n	8001188 <HAL_ADC_Init+0x1d4>
 8001182:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001186:	e000      	b.n	800118a <HAL_ADC_Init+0x1d6>
 8001188:	2200      	movs	r2, #0
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	4313      	orrs	r3, r2
 8001198:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800119a:	4313      	orrs	r3, r2
 800119c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d11b      	bne.n	80011e0 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7e5b      	ldrb	r3, [r3, #25]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d109      	bne.n	80011c4 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	3b01      	subs	r3, #1
 80011b6:	045a      	lsls	r2, r3, #17
 80011b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011ba:	4313      	orrs	r3, r2
 80011bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c0:	663b      	str	r3, [r7, #96]	; 0x60
 80011c2:	e00d      	b.n	80011e0 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80011cc:	f043 0220 	orr.w	r2, r3, #32
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d8:	f043 0201 	orr.w	r2, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d007      	beq.n	80011f8 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	4313      	orrs	r3, r2
 80011f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011f4:	4313      	orrs	r3, r2
 80011f6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b00      	cmp	r3, #0
 8001204:	d114      	bne.n	8001230 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001214:	f023 0302 	bic.w	r3, r3, #2
 8001218:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7e1b      	ldrb	r3, [r3, #24]
 800121e:	039a      	lsls	r2, r3, #14
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4313      	orrs	r3, r2
 800122a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800122c:	4313      	orrs	r3, r2
 800122e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_ADC_Init+0x308>)
 8001238:	4013      	ands	r3, r2
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001240:	430b      	orrs	r3, r1
 8001242:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d10c      	bne.n	8001266 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f023 010f 	bic.w	r1, r3, #15
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	1e5a      	subs	r2, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	631a      	str	r2, [r3, #48]	; 0x30
 8001264:	e007      	b.n	8001276 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 020f 	bic.w	r2, r2, #15
 8001274:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f023 0303 	bic.w	r3, r3, #3
 8001284:	f043 0201 	orr.w	r2, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	641a      	str	r2, [r3, #64]	; 0x40
 800128c:	e00a      	b.n	80012a4 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f023 0312 	bic.w	r3, r3, #18
 8001296:	f043 0210 	orr.w	r2, r3, #16
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800129e:	2301      	movs	r3, #1
 80012a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80012a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3768      	adds	r7, #104	; 0x68
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000000 	.word	0x20000000
 80012b4:	431bde83 	.word	0x431bde83
 80012b8:	50000300 	.word	0x50000300
 80012bc:	fff0c007 	.word	0xfff0c007

080012c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b09b      	sub	sp, #108	; 0x6c
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x22>
 80012de:	2302      	movs	r3, #2
 80012e0:	e299      	b.n	8001816 <HAL_ADC_ConfigChannel+0x556>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f040 827d 	bne.w	80017f4 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d81c      	bhi.n	800133c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	461a      	mov	r2, r3
 8001316:	231f      	movs	r3, #31
 8001318:	4093      	lsls	r3, r2
 800131a:	43db      	mvns	r3, r3
 800131c:	4019      	ands	r1, r3
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fa00 f203 	lsl.w	r2, r0, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	631a      	str	r2, [r3, #48]	; 0x30
 800133a:	e063      	b.n	8001404 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b09      	cmp	r3, #9
 8001342:	d81e      	bhi.n	8001382 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	3b1e      	subs	r3, #30
 8001358:	221f      	movs	r2, #31
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	4019      	ands	r1, r3
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	3b1e      	subs	r3, #30
 8001374:	fa00 f203 	lsl.w	r2, r0, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	635a      	str	r2, [r3, #52]	; 0x34
 8001380:	e040      	b.n	8001404 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b0e      	cmp	r3, #14
 8001388:	d81e      	bhi.n	80013c8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	3b3c      	subs	r3, #60	; 0x3c
 800139e:	221f      	movs	r2, #31
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	4019      	ands	r1, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	3b3c      	subs	r3, #60	; 0x3c
 80013ba:	fa00 f203 	lsl.w	r2, r0, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	639a      	str	r2, [r3, #56]	; 0x38
 80013c6:	e01d      	b.n	8001404 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	3b5a      	subs	r3, #90	; 0x5a
 80013dc:	221f      	movs	r2, #31
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	4019      	ands	r1, r3
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	3b5a      	subs	r3, #90	; 0x5a
 80013f8:	fa00 f203 	lsl.w	r2, r0, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b00      	cmp	r3, #0
 8001410:	f040 80e5 	bne.w	80015de <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b09      	cmp	r3, #9
 800141a:	d91c      	bls.n	8001456 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6999      	ldr	r1, [r3, #24]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	3b1e      	subs	r3, #30
 800142e:	2207      	movs	r2, #7
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	4019      	ands	r1, r3
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	6898      	ldr	r0, [r3, #8]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	3b1e      	subs	r3, #30
 8001448:	fa00 f203 	lsl.w	r2, r0, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	619a      	str	r2, [r3, #24]
 8001454:	e019      	b.n	800148a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6959      	ldr	r1, [r3, #20]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	2207      	movs	r2, #7
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	4019      	ands	r1, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	6898      	ldr	r0, [r3, #8]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	fa00 f203 	lsl.w	r2, r0, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	08db      	lsrs	r3, r3, #3
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d84f      	bhi.n	800154c <HAL_ADC_ConfigChannel+0x28c>
 80014ac:	a201      	add	r2, pc, #4	; (adr r2, 80014b4 <HAL_ADC_ConfigChannel+0x1f4>)
 80014ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b2:	bf00      	nop
 80014b4:	080014c5 	.word	0x080014c5
 80014b8:	080014e7 	.word	0x080014e7
 80014bc:	08001509 	.word	0x08001509
 80014c0:	0800152b 	.word	0x0800152b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014ca:	4b99      	ldr	r3, [pc, #612]	; (8001730 <HAL_ADC_ConfigChannel+0x470>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	0691      	lsls	r1, r2, #26
 80014d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014d6:	430a      	orrs	r2, r1
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014e2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014e4:	e07e      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014ec:	4b90      	ldr	r3, [pc, #576]	; (8001730 <HAL_ADC_ConfigChannel+0x470>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	0691      	lsls	r1, r2, #26
 80014f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014f8:	430a      	orrs	r2, r1
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001504:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001506:	e06d      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800150e:	4b88      	ldr	r3, [pc, #544]	; (8001730 <HAL_ADC_ConfigChannel+0x470>)
 8001510:	4013      	ands	r3, r2
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	0691      	lsls	r1, r2, #26
 8001518:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800151a:	430a      	orrs	r2, r1
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001526:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001528:	e05c      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001530:	4b7f      	ldr	r3, [pc, #508]	; (8001730 <HAL_ADC_ConfigChannel+0x470>)
 8001532:	4013      	ands	r3, r2
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	0691      	lsls	r1, r2, #26
 800153a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800153c:	430a      	orrs	r2, r1
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001548:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800154a:	e04b      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001552:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	069b      	lsls	r3, r3, #26
 800155c:	429a      	cmp	r2, r3
 800155e:	d107      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800156e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001576:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	069b      	lsls	r3, r3, #26
 8001580:	429a      	cmp	r2, r3
 8001582:	d107      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001592:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800159a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	069b      	lsls	r3, r3, #26
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d107      	bne.n	80015b8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015b6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	069b      	lsls	r3, r3, #26
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d10a      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015da:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80015dc:	e001      	b.n	80015e2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80015de:	bf00      	nop
 80015e0:	e000      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80015e2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d108      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x344>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x344>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_ADC_ConfigChannel+0x346>
 8001604:	2300      	movs	r3, #0
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 80ff 	bne.w	800180a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d00f      	beq.n	8001634 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2201      	movs	r2, #1
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	400a      	ands	r2, r1
 800162e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001632:	e049      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2201      	movs	r2, #1
 8001642:	409a      	lsls	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b09      	cmp	r3, #9
 8001654:	d91c      	bls.n	8001690 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6999      	ldr	r1, [r3, #24]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	3b1b      	subs	r3, #27
 8001668:	2207      	movs	r2, #7
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	4019      	ands	r1, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	6898      	ldr	r0, [r3, #8]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	3b1b      	subs	r3, #27
 8001682:	fa00 f203 	lsl.w	r2, r0, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	619a      	str	r2, [r3, #24]
 800168e:	e01b      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6959      	ldr	r1, [r3, #20]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	2207      	movs	r2, #7
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4019      	ands	r1, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	6898      	ldr	r0, [r3, #8]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	fa00 f203 	lsl.w	r2, r0, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c8:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_ADC_ConfigChannel+0x474>)
 80016ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b10      	cmp	r3, #16
 80016d2:	d105      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d014      	beq.n	800170a <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016e4:	2b11      	cmp	r3, #17
 80016e6:	d105      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00a      	beq.n	800170a <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016f8:	2b12      	cmp	r3, #18
 80016fa:	f040 8086 	bne.w	800180a <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80016fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001706:	2b00      	cmp	r3, #0
 8001708:	d17f      	bne.n	800180a <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b01      	cmp	r3, #1
 800171a:	d10d      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x478>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b01      	cmp	r3, #1
 8001728:	d106      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x478>
 800172a:	2301      	movs	r3, #1
 800172c:	e005      	b.n	800173a <HAL_ADC_ConfigChannel+0x47a>
 800172e:	bf00      	nop
 8001730:	83fff000 	.word	0x83fff000
 8001734:	50000300 	.word	0x50000300
 8001738:	2300      	movs	r3, #0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d150      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800173e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001740:	2b00      	cmp	r3, #0
 8001742:	d010      	beq.n	8001766 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b01      	cmp	r3, #1
 800174e:	d107      	bne.n	8001760 <HAL_ADC_ConfigChannel+0x4a0>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_ADC_ConfigChannel+0x4a0>
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <HAL_ADC_ConfigChannel+0x4a2>
 8001760:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001762:	2b00      	cmp	r3, #0
 8001764:	d13c      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b10      	cmp	r3, #16
 800176c:	d11d      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x4ea>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001776:	d118      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001782:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_ADC_ConfigChannel+0x564>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a27      	ldr	r2, [pc, #156]	; (8001828 <HAL_ADC_ConfigChannel+0x568>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0c9a      	lsrs	r2, r3, #18
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800179a:	e002      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	3b01      	subs	r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f9      	bne.n	800179c <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017a8:	e02e      	b.n	8001808 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b11      	cmp	r3, #17
 80017b0:	d10b      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x50a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017ba:	d106      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80017bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80017c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017c8:	e01e      	b.n	8001808 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b12      	cmp	r3, #18
 80017d0:	d11a      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80017d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017dc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017de:	e013      	b.n	8001808 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f043 0220 	orr.w	r2, r3, #32
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80017f2:	e00a      	b.n	800180a <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f043 0220 	orr.w	r2, r3, #32
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001806:	e000      	b.n	800180a <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001808:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001812:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001816:	4618      	mov	r0, r3
 8001818:	376c      	adds	r7, #108	; 0x6c
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000000 	.word	0x20000000
 8001828:	431bde83 	.word	0x431bde83

0800182c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b01      	cmp	r3, #1
 8001844:	d108      	bne.n	8001858 <ADC_Disable+0x2c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <ADC_Disable+0x2c>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <ADC_Disable+0x2e>
 8001858:	2300      	movs	r3, #0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d047      	beq.n	80018ee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 030d 	and.w	r3, r3, #13
 8001868:	2b01      	cmp	r3, #1
 800186a:	d10f      	bne.n	800188c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0202 	orr.w	r2, r2, #2
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2203      	movs	r2, #3
 8001882:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001884:	f7ff fb8a 	bl	8000f9c <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800188a:	e029      	b.n	80018e0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f043 0210 	orr.w	r2, r3, #16
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189c:	f043 0201 	orr.w	r2, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e023      	b.n	80018f0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018a8:	f7ff fb78 	bl	8000f9c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d914      	bls.n	80018e0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d10d      	bne.n	80018e0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f043 0210 	orr.w	r2, r3, #16
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	f043 0201 	orr.w	r2, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e007      	b.n	80018f0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d0dc      	beq.n	80018a8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db0b      	blt.n	8001986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	f003 021f 	and.w	r2, r3, #31
 8001974:	4907      	ldr	r1, [pc, #28]	; (8001994 <__NVIC_EnableIRQ+0x38>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	2001      	movs	r0, #1
 800197e:	fa00 f202 	lsl.w	r2, r0, r2
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000e100 	.word	0xe000e100

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	; (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	; (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ff4c 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7a:	f7ff ff61 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001a7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	68b9      	ldr	r1, [r7, #8]
 8001a84:	6978      	ldr	r0, [r7, #20]
 8001a86:	f7ff ffb1 	bl	80019ec <NVIC_EncodePriority>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff80 	bl	8001998 <__NVIC_SetPriority>
}
 8001a98:	bf00      	nop
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff54 	bl	800195c <__NVIC_EnableIRQ>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aca:	e14e      	b.n	8001d6a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8140 	beq.w	8001d64 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d005      	beq.n	8001afc <HAL_GPIO_Init+0x40>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d130      	bne.n	8001b5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b32:	2201      	movs	r2, #1
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	f003 0201 	and.w	r2, r3, #1
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d017      	beq.n	8001b9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d123      	bne.n	8001bee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	08da      	lsrs	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3208      	adds	r2, #8
 8001be8:	6939      	ldr	r1, [r7, #16]
 8001bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0203 	and.w	r2, r3, #3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 809a 	beq.w	8001d64 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c30:	4b55      	ldr	r3, [pc, #340]	; (8001d88 <HAL_GPIO_Init+0x2cc>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	4a54      	ldr	r2, [pc, #336]	; (8001d88 <HAL_GPIO_Init+0x2cc>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6193      	str	r3, [r2, #24]
 8001c3c:	4b52      	ldr	r3, [pc, #328]	; (8001d88 <HAL_GPIO_Init+0x2cc>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c48:	4a50      	ldr	r2, [pc, #320]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c72:	d013      	beq.n	8001c9c <HAL_GPIO_Init+0x1e0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a46      	ldr	r2, [pc, #280]	; (8001d90 <HAL_GPIO_Init+0x2d4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d00d      	beq.n	8001c98 <HAL_GPIO_Init+0x1dc>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a45      	ldr	r2, [pc, #276]	; (8001d94 <HAL_GPIO_Init+0x2d8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d007      	beq.n	8001c94 <HAL_GPIO_Init+0x1d8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a44      	ldr	r2, [pc, #272]	; (8001d98 <HAL_GPIO_Init+0x2dc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d101      	bne.n	8001c90 <HAL_GPIO_Init+0x1d4>
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e006      	b.n	8001c9e <HAL_GPIO_Init+0x1e2>
 8001c90:	2305      	movs	r3, #5
 8001c92:	e004      	b.n	8001c9e <HAL_GPIO_Init+0x1e2>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e002      	b.n	8001c9e <HAL_GPIO_Init+0x1e2>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <HAL_GPIO_Init+0x1e2>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	f002 0203 	and.w	r2, r2, #3
 8001ca4:	0092      	lsls	r2, r2, #2
 8001ca6:	4093      	lsls	r3, r2
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cae:	4937      	ldr	r1, [pc, #220]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cbc:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <HAL_GPIO_Init+0x2e0>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ce0:	4a2e      	ldr	r2, [pc, #184]	; (8001d9c <HAL_GPIO_Init+0x2e0>)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_GPIO_Init+0x2e0>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d0a:	4a24      	ldr	r2, [pc, #144]	; (8001d9c <HAL_GPIO_Init+0x2e0>)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d10:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_GPIO_Init+0x2e0>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_GPIO_Init+0x2e0>)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <HAL_GPIO_Init+0x2e0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d5e:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <HAL_GPIO_Init+0x2e0>)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3301      	adds	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f47f aea9 	bne.w	8001acc <HAL_GPIO_Init+0x10>
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40010000 	.word	0x40010000
 8001d90:	48000400 	.word	0x48000400
 8001d94:	48000800 	.word	0x48000800
 8001d98:	48000c00 	.word	0x48000c00
 8001d9c:	40010400 	.word	0x40010400

08001da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	807b      	strh	r3, [r7, #2]
 8001dac:	4613      	mov	r3, r2
 8001dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db0:	787b      	ldrb	r3, [r7, #1]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001db6:	887a      	ldrh	r2, [r7, #2]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d006      	beq.n	8001df4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001de6:	4a05      	ldr	r2, [pc, #20]	; (8001dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fdac 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40010400 	.word	0x40010400

08001e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e081      	b.n	8001f16 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7fe ff10 	bl	8000c4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2224      	movs	r2, #36	; 0x24
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d107      	bne.n	8001e7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	e006      	b.n	8001e88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d104      	bne.n	8001e9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ebc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691a      	ldr	r2, [r3, #16]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69d9      	ldr	r1, [r3, #28]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1a      	ldr	r2, [r3, #32]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d138      	bne.n	8001fa6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e032      	b.n	8001fa8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2224      	movs	r2, #36	; 0x24
 8001f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0201 	bic.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f70:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6819      	ldr	r1, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0201 	orr.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e000      	b.n	8001fa8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fa6:	2302      	movs	r3, #2
  }
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d139      	bne.n	800203e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e033      	b.n	8002040 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2224      	movs	r2, #36	; 0x24
 8001fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002006:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0201 	orr.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	e000      	b.n	8002040 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800203e:	2302      	movs	r3, #2
  }
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002052:	af00      	add	r7, sp, #0
 8002054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002058:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800205c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800205e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002062:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	f001 b823 	b.w	80030b8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 817d 	beq.w	8002382 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002088:	4bbc      	ldr	r3, [pc, #752]	; (800237c <HAL_RCC_OscConfig+0x330>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b04      	cmp	r3, #4
 8002092:	d00c      	beq.n	80020ae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002094:	4bb9      	ldr	r3, [pc, #740]	; (800237c <HAL_RCC_OscConfig+0x330>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	2b08      	cmp	r3, #8
 800209e:	d15c      	bne.n	800215a <HAL_RCC_OscConfig+0x10e>
 80020a0:	4bb6      	ldr	r3, [pc, #728]	; (800237c <HAL_RCC_OscConfig+0x330>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ac:	d155      	bne.n	800215a <HAL_RCC_OscConfig+0x10e>
 80020ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	095b      	lsrs	r3, r3, #5
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d102      	bne.n	80020e0 <HAL_RCC_OscConfig+0x94>
 80020da:	4ba8      	ldr	r3, [pc, #672]	; (800237c <HAL_RCC_OscConfig+0x330>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	e015      	b.n	800210c <HAL_RCC_OscConfig+0xc0>
 80020e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80020f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80020fc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002108:	4b9c      	ldr	r3, [pc, #624]	; (800237c <HAL_RCC_OscConfig+0x330>)
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002110:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002114:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002118:	fa92 f2a2 	rbit	r2, r2
 800211c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002120:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002124:	fab2 f282 	clz	r2, r2
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	f042 0220 	orr.w	r2, r2, #32
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	f002 021f 	and.w	r2, r2, #31
 8002134:	2101      	movs	r1, #1
 8002136:	fa01 f202 	lsl.w	r2, r1, r2
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 811f 	beq.w	8002380 <HAL_RCC_OscConfig+0x334>
 8002142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002146:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 8116 	bne.w	8002380 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	f000 bfaf 	b.w	80030b8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x12e>
 800216c:	4b83      	ldr	r3, [pc, #524]	; (800237c <HAL_RCC_OscConfig+0x330>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a82      	ldr	r2, [pc, #520]	; (800237c <HAL_RCC_OscConfig+0x330>)
 8002172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	e036      	b.n	80021e8 <HAL_RCC_OscConfig+0x19c>
 800217a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x158>
 800218a:	4b7c      	ldr	r3, [pc, #496]	; (800237c <HAL_RCC_OscConfig+0x330>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a7b      	ldr	r2, [pc, #492]	; (800237c <HAL_RCC_OscConfig+0x330>)
 8002190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b79      	ldr	r3, [pc, #484]	; (800237c <HAL_RCC_OscConfig+0x330>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a78      	ldr	r2, [pc, #480]	; (800237c <HAL_RCC_OscConfig+0x330>)
 800219c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e021      	b.n	80021e8 <HAL_RCC_OscConfig+0x19c>
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x184>
 80021b6:	4b71      	ldr	r3, [pc, #452]	; (800237c <HAL_RCC_OscConfig+0x330>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a70      	ldr	r2, [pc, #448]	; (800237c <HAL_RCC_OscConfig+0x330>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b6e      	ldr	r3, [pc, #440]	; (800237c <HAL_RCC_OscConfig+0x330>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a6d      	ldr	r2, [pc, #436]	; (800237c <HAL_RCC_OscConfig+0x330>)
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e00b      	b.n	80021e8 <HAL_RCC_OscConfig+0x19c>
 80021d0:	4b6a      	ldr	r3, [pc, #424]	; (800237c <HAL_RCC_OscConfig+0x330>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a69      	ldr	r2, [pc, #420]	; (800237c <HAL_RCC_OscConfig+0x330>)
 80021d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b67      	ldr	r3, [pc, #412]	; (800237c <HAL_RCC_OscConfig+0x330>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a66      	ldr	r2, [pc, #408]	; (800237c <HAL_RCC_OscConfig+0x330>)
 80021e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021e8:	4b64      	ldr	r3, [pc, #400]	; (800237c <HAL_RCC_OscConfig+0x330>)
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	f023 020f 	bic.w	r2, r3, #15
 80021f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	495f      	ldr	r1, [pc, #380]	; (800237c <HAL_RCC_OscConfig+0x330>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002206:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d059      	beq.n	80022c6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7fe fec3 	bl	8000f9c <HAL_GetTick>
 8002216:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	e00a      	b.n	8002232 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800221c:	f7fe febe 	bl	8000f9c <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b64      	cmp	r3, #100	; 0x64
 800222a:	d902      	bls.n	8002232 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	f000 bf43 	b.w	80030b8 <HAL_RCC_OscConfig+0x106c>
 8002232:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002236:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002246:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d102      	bne.n	8002264 <HAL_RCC_OscConfig+0x218>
 800225e:	4b47      	ldr	r3, [pc, #284]	; (800237c <HAL_RCC_OscConfig+0x330>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	e015      	b.n	8002290 <HAL_RCC_OscConfig+0x244>
 8002264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002268:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800227c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002280:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800228c:	4b3b      	ldr	r3, [pc, #236]	; (800237c <HAL_RCC_OscConfig+0x330>)
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002294:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002298:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800229c:	fa92 f2a2 	rbit	r2, r2
 80022a0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80022a4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80022a8:	fab2 f282 	clz	r2, r2
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	f042 0220 	orr.w	r2, r2, #32
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	f002 021f 	and.w	r2, r2, #31
 80022b8:	2101      	movs	r1, #1
 80022ba:	fa01 f202 	lsl.w	r2, r1, r2
 80022be:	4013      	ands	r3, r2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0ab      	beq.n	800221c <HAL_RCC_OscConfig+0x1d0>
 80022c4:	e05d      	b.n	8002382 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7fe fe69 	bl	8000f9c <HAL_GetTick>
 80022ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d0:	f7fe fe64 	bl	8000f9c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b64      	cmp	r3, #100	; 0x64
 80022de:	d902      	bls.n	80022e6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	f000 bee9 	b.w	80030b8 <HAL_RCC_OscConfig+0x106c>
 80022e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80022fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b01      	cmp	r3, #1
 8002310:	d102      	bne.n	8002318 <HAL_RCC_OscConfig+0x2cc>
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <HAL_RCC_OscConfig+0x330>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	e015      	b.n	8002344 <HAL_RCC_OscConfig+0x2f8>
 8002318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800232c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002330:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002334:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <HAL_RCC_OscConfig+0x330>)
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002348:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800234c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002350:	fa92 f2a2 	rbit	r2, r2
 8002354:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002358:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800235c:	fab2 f282 	clz	r2, r2
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	f042 0220 	orr.w	r2, r2, #32
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	f002 021f 	and.w	r2, r2, #31
 800236c:	2101      	movs	r1, #1
 800236e:	fa01 f202 	lsl.w	r2, r1, r2
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ab      	bne.n	80022d0 <HAL_RCC_OscConfig+0x284>
 8002378:	e003      	b.n	8002382 <HAL_RCC_OscConfig+0x336>
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 817d 	beq.w	8002692 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002398:	4ba6      	ldr	r3, [pc, #664]	; (8002634 <HAL_RCC_OscConfig+0x5e8>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00b      	beq.n	80023bc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023a4:	4ba3      	ldr	r3, [pc, #652]	; (8002634 <HAL_RCC_OscConfig+0x5e8>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 030c 	and.w	r3, r3, #12
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d172      	bne.n	8002496 <HAL_RCC_OscConfig+0x44a>
 80023b0:	4ba0      	ldr	r3, [pc, #640]	; (8002634 <HAL_RCC_OscConfig+0x5e8>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d16c      	bne.n	8002496 <HAL_RCC_OscConfig+0x44a>
 80023bc:	2302      	movs	r3, #2
 80023be:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80023ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d102      	bne.n	80023ec <HAL_RCC_OscConfig+0x3a0>
 80023e6:	4b93      	ldr	r3, [pc, #588]	; (8002634 <HAL_RCC_OscConfig+0x5e8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	e013      	b.n	8002414 <HAL_RCC_OscConfig+0x3c8>
 80023ec:	2302      	movs	r3, #2
 80023ee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80023fe:	2302      	movs	r3, #2
 8002400:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002404:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002408:	fa93 f3a3 	rbit	r3, r3
 800240c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002410:	4b88      	ldr	r3, [pc, #544]	; (8002634 <HAL_RCC_OscConfig+0x5e8>)
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	2202      	movs	r2, #2
 8002416:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800241a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800241e:	fa92 f2a2 	rbit	r2, r2
 8002422:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002426:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800242a:	fab2 f282 	clz	r2, r2
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	f042 0220 	orr.w	r2, r2, #32
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	f002 021f 	and.w	r2, r2, #31
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f202 	lsl.w	r2, r1, r2
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCC_OscConfig+0x410>
 8002446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d002      	beq.n	800245c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	f000 be2e 	b.w	80030b8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245c:	4b75      	ldr	r3, [pc, #468]	; (8002634 <HAL_RCC_OscConfig+0x5e8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	21f8      	movs	r1, #248	; 0xf8
 8002472:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800247a:	fa91 f1a1 	rbit	r1, r1
 800247e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002482:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002486:	fab1 f181 	clz	r1, r1
 800248a:	b2c9      	uxtb	r1, r1
 800248c:	408b      	lsls	r3, r1
 800248e:	4969      	ldr	r1, [pc, #420]	; (8002634 <HAL_RCC_OscConfig+0x5e8>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002494:	e0fd      	b.n	8002692 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8088 	beq.w	80025b8 <HAL_RCC_OscConfig+0x56c>
 80024a8:	2301      	movs	r3, #1
 80024aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80024ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	461a      	mov	r2, r3
 80024d0:	2301      	movs	r3, #1
 80024d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fe fd62 	bl	8000f9c <HAL_GetTick>
 80024d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024de:	f7fe fd5d 	bl	8000f9c <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d902      	bls.n	80024f4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	f000 bde2 	b.w	80030b8 <HAL_RCC_OscConfig+0x106c>
 80024f4:	2302      	movs	r3, #2
 80024f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002506:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d102      	bne.n	8002524 <HAL_RCC_OscConfig+0x4d8>
 800251e:	4b45      	ldr	r3, [pc, #276]	; (8002634 <HAL_RCC_OscConfig+0x5e8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	e013      	b.n	800254c <HAL_RCC_OscConfig+0x500>
 8002524:	2302      	movs	r3, #2
 8002526:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002536:	2302      	movs	r3, #2
 8002538:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800253c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002548:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <HAL_RCC_OscConfig+0x5e8>)
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	2202      	movs	r2, #2
 800254e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002552:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002556:	fa92 f2a2 	rbit	r2, r2
 800255a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800255e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002562:	fab2 f282 	clz	r2, r2
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	f042 0220 	orr.w	r2, r2, #32
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	f002 021f 	and.w	r2, r2, #31
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f202 	lsl.w	r2, r1, r2
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0af      	beq.n	80024de <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257e:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_RCC_OscConfig+0x5e8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	21f8      	movs	r1, #248	; 0xf8
 8002594:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800259c:	fa91 f1a1 	rbit	r1, r1
 80025a0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80025a4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80025a8:	fab1 f181 	clz	r1, r1
 80025ac:	b2c9      	uxtb	r1, r1
 80025ae:	408b      	lsls	r3, r1
 80025b0:	4920      	ldr	r1, [pc, #128]	; (8002634 <HAL_RCC_OscConfig+0x5e8>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
 80025b6:	e06c      	b.n	8002692 <HAL_RCC_OscConfig+0x646>
 80025b8:	2301      	movs	r3, #1
 80025ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80025ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	461a      	mov	r2, r3
 80025e0:	2300      	movs	r3, #0
 80025e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fcda 	bl	8000f9c <HAL_GetTick>
 80025e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ee:	f7fe fcd5 	bl	8000f9c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d902      	bls.n	8002604 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	f000 bd5a 	b.w	80030b8 <HAL_RCC_OscConfig+0x106c>
 8002604:	2302      	movs	r3, #2
 8002606:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	b2db      	uxtb	r3, r3
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d104      	bne.n	8002638 <HAL_RCC_OscConfig+0x5ec>
 800262e:	4b01      	ldr	r3, [pc, #4]	; (8002634 <HAL_RCC_OscConfig+0x5e8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	e015      	b.n	8002660 <HAL_RCC_OscConfig+0x614>
 8002634:	40021000 	.word	0x40021000
 8002638:	2302      	movs	r3, #2
 800263a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800264a:	2302      	movs	r3, #2
 800264c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002650:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800265c:	4bc8      	ldr	r3, [pc, #800]	; (8002980 <HAL_RCC_OscConfig+0x934>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	2202      	movs	r2, #2
 8002662:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002666:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800266a:	fa92 f2a2 	rbit	r2, r2
 800266e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002672:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002676:	fab2 f282 	clz	r2, r2
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	f042 0220 	orr.w	r2, r2, #32
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	f002 021f 	and.w	r2, r2, #31
 8002686:	2101      	movs	r1, #1
 8002688:	fa01 f202 	lsl.w	r2, r1, r2
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1ad      	bne.n	80025ee <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002696:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8110 	beq.w	80028c8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d079      	beq.n	80027ac <HAL_RCC_OscConfig+0x760>
 80026b8:	2301      	movs	r3, #1
 80026ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80026ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	4bab      	ldr	r3, [pc, #684]	; (8002984 <HAL_RCC_OscConfig+0x938>)
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	461a      	mov	r2, r3
 80026de:	2301      	movs	r3, #1
 80026e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e2:	f7fe fc5b 	bl	8000f9c <HAL_GetTick>
 80026e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ec:	f7fe fc56 	bl	8000f9c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d902      	bls.n	8002702 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	f000 bcdb 	b.w	80030b8 <HAL_RCC_OscConfig+0x106c>
 8002702:	2302      	movs	r3, #2
 8002704:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800271c:	2202      	movs	r2, #2
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	fa93 f2a3 	rbit	r2, r3
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002740:	2202      	movs	r2, #2
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	fa93 f2a3 	rbit	r2, r3
 8002752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002756:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800275a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275c:	4b88      	ldr	r3, [pc, #544]	; (8002980 <HAL_RCC_OscConfig+0x934>)
 800275e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002764:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002768:	2102      	movs	r1, #2
 800276a:	6019      	str	r1, [r3, #0]
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	fa93 f1a3 	rbit	r1, r3
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002782:	6019      	str	r1, [r3, #0]
  return result;
 8002784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002788:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002798:	b2db      	uxtb	r3, r3
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	2101      	movs	r1, #1
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0a0      	beq.n	80026ec <HAL_RCC_OscConfig+0x6a0>
 80027aa:	e08d      	b.n	80028c8 <HAL_RCC_OscConfig+0x87c>
 80027ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	fa93 f2a3 	rbit	r2, r3
 80027c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80027ce:	601a      	str	r2, [r3, #0]
  return result;
 80027d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80027d8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b68      	ldr	r3, [pc, #416]	; (8002984 <HAL_RCC_OscConfig+0x938>)
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	461a      	mov	r2, r3
 80027ea:	2300      	movs	r3, #0
 80027ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ee:	f7fe fbd5 	bl	8000f9c <HAL_GetTick>
 80027f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f6:	e00a      	b.n	800280e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f8:	f7fe fbd0 	bl	8000f9c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d902      	bls.n	800280e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	f000 bc55 	b.w	80030b8 <HAL_RCC_OscConfig+0x106c>
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002816:	2202      	movs	r2, #2
 8002818:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	fa93 f2a3 	rbit	r2, r3
 8002828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800283a:	2202      	movs	r2, #2
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	fa93 f2a3 	rbit	r2, r3
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800285e:	2202      	movs	r2, #2
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	fa93 f2a3 	rbit	r2, r3
 8002870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002874:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002878:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287a:	4b41      	ldr	r3, [pc, #260]	; (8002980 <HAL_RCC_OscConfig+0x934>)
 800287c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800287e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002882:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002886:	2102      	movs	r1, #2
 8002888:	6019      	str	r1, [r3, #0]
 800288a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	fa93 f1a3 	rbit	r1, r3
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80028a0:	6019      	str	r1, [r3, #0]
  return result;
 80028a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	fab3 f383 	clz	r3, r3
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	2101      	movs	r1, #1
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d197      	bne.n	80027f8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 81a1 	beq.w	8002c20 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e4:	4b26      	ldr	r3, [pc, #152]	; (8002980 <HAL_RCC_OscConfig+0x934>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d116      	bne.n	800291e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f0:	4b23      	ldr	r3, [pc, #140]	; (8002980 <HAL_RCC_OscConfig+0x934>)
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	4a22      	ldr	r2, [pc, #136]	; (8002980 <HAL_RCC_OscConfig+0x934>)
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fa:	61d3      	str	r3, [r2, #28]
 80028fc:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_RCC_OscConfig+0x934>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002908:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002916:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002918:	2301      	movs	r3, #1
 800291a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291e:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <HAL_RCC_OscConfig+0x93c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d11a      	bne.n	8002960 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <HAL_RCC_OscConfig+0x93c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a16      	ldr	r2, [pc, #88]	; (8002988 <HAL_RCC_OscConfig+0x93c>)
 8002930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002934:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002936:	f7fe fb31 	bl	8000f9c <HAL_GetTick>
 800293a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293e:	e009      	b.n	8002954 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002940:	f7fe fb2c 	bl	8000f9c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b64      	cmp	r3, #100	; 0x64
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e3b1      	b.n	80030b8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <HAL_RCC_OscConfig+0x93c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ef      	beq.n	8002940 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d10d      	bne.n	800298c <HAL_RCC_OscConfig+0x940>
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <HAL_RCC_OscConfig+0x934>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	4a02      	ldr	r2, [pc, #8]	; (8002980 <HAL_RCC_OscConfig+0x934>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6213      	str	r3, [r2, #32]
 800297c:	e03c      	b.n	80029f8 <HAL_RCC_OscConfig+0x9ac>
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	10908120 	.word	0x10908120
 8002988:	40007000 	.word	0x40007000
 800298c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002990:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10c      	bne.n	80029b6 <HAL_RCC_OscConfig+0x96a>
 800299c:	4bc1      	ldr	r3, [pc, #772]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4ac0      	ldr	r2, [pc, #768]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	6213      	str	r3, [r2, #32]
 80029a8:	4bbe      	ldr	r3, [pc, #760]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	4abd      	ldr	r2, [pc, #756]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 80029ae:	f023 0304 	bic.w	r3, r3, #4
 80029b2:	6213      	str	r3, [r2, #32]
 80029b4:	e020      	b.n	80029f8 <HAL_RCC_OscConfig+0x9ac>
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x994>
 80029c6:	4bb7      	ldr	r3, [pc, #732]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	4ab6      	ldr	r2, [pc, #728]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	6213      	str	r3, [r2, #32]
 80029d2:	4bb4      	ldr	r3, [pc, #720]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4ab3      	ldr	r2, [pc, #716]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6213      	str	r3, [r2, #32]
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0x9ac>
 80029e0:	4bb0      	ldr	r3, [pc, #704]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4aaf      	ldr	r2, [pc, #700]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	6213      	str	r3, [r2, #32]
 80029ec:	4bad      	ldr	r3, [pc, #692]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	4aac      	ldr	r2, [pc, #688]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 80029f2:	f023 0304 	bic.w	r3, r3, #4
 80029f6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 8081 	beq.w	8002b0c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fac7 	bl	8000f9c <HAL_GetTick>
 8002a0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a12:	e00b      	b.n	8002a2c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a14:	f7fe fac2 	bl	8000f9c <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e345      	b.n	80030b8 <HAL_RCC_OscConfig+0x106c>
 8002a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a30:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a34:	2202      	movs	r2, #2
 8002a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	fa93 f2a3 	rbit	r2, r3
 8002a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a58:	2202      	movs	r2, #2
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a60:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	fa93 f2a3 	rbit	r2, r3
 8002a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a72:	601a      	str	r2, [r3, #0]
  return result;
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d102      	bne.n	8002a98 <HAL_RCC_OscConfig+0xa4c>
 8002a92:	4b84      	ldr	r3, [pc, #528]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	e013      	b.n	8002ac0 <HAL_RCC_OscConfig+0xa74>
 8002a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	fa93 f2a3 	rbit	r2, r3
 8002ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	4b79      	ldr	r3, [pc, #484]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ac4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002ac8:	2102      	movs	r1, #2
 8002aca:	6011      	str	r1, [r2, #0]
 8002acc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ad0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	fa92 f1a2 	rbit	r1, r2
 8002ada:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ade:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002ae2:	6011      	str	r1, [r2, #0]
  return result;
 8002ae4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ae8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	fab2 f282 	clz	r2, r2
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	f002 021f 	and.w	r2, r2, #31
 8002afe:	2101      	movs	r1, #1
 8002b00:	fa01 f202 	lsl.w	r2, r1, r2
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d084      	beq.n	8002a14 <HAL_RCC_OscConfig+0x9c8>
 8002b0a:	e07f      	b.n	8002c0c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0c:	f7fe fa46 	bl	8000f9c <HAL_GetTick>
 8002b10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b14:	e00b      	b.n	8002b2e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fe fa41 	bl	8000f9c <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e2c4      	b.n	80030b8 <HAL_RCC_OscConfig+0x106c>
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002b36:	2202      	movs	r2, #2
 8002b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	fa93 f2a3 	rbit	r2, r3
 8002b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	fa93 f2a3 	rbit	r2, r3
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b74:	601a      	str	r2, [r3, #0]
  return result;
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b80:	fab3 f383 	clz	r3, r3
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f043 0302 	orr.w	r3, r3, #2
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d102      	bne.n	8002b9a <HAL_RCC_OscConfig+0xb4e>
 8002b94:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	e013      	b.n	8002bc2 <HAL_RCC_OscConfig+0xb76>
 8002b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002baa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	fa93 f2a3 	rbit	r2, r3
 8002bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bc6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002bca:	2102      	movs	r1, #2
 8002bcc:	6011      	str	r1, [r2, #0]
 8002bce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bd2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	fa92 f1a2 	rbit	r1, r2
 8002bdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002be0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002be4:	6011      	str	r1, [r2, #0]
  return result;
 8002be6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bea:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	fab2 f282 	clz	r2, r2
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f002 021f 	and.w	r2, r2, #31
 8002c00:	2101      	movs	r1, #1
 8002c02:	fa01 f202 	lsl.w	r2, r1, r2
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d184      	bne.n	8002b16 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c0c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d105      	bne.n	8002c20 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c14:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	4a22      	ldr	r2, [pc, #136]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 8002c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8242 	beq.w	80030b6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c32:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <HAL_RCC_OscConfig+0xc58>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	f000 8213 	beq.w	8003066 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	f040 8162 	bne.w	8002f16 <HAL_RCC_OscConfig+0xeca>
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	fa93 f2a3 	rbit	r2, r3
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c76:	601a      	str	r2, [r3, #0]
  return result;
 8002c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c80:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	461a      	mov	r2, r3
 8002c94:	2300      	movs	r3, #0
 8002c96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe f980 	bl	8000f9c <HAL_GetTick>
 8002c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca0:	e00c      	b.n	8002cbc <HAL_RCC_OscConfig+0xc70>
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe f978 	bl	8000f9c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e1fd      	b.n	80030b8 <HAL_RCC_OscConfig+0x106c>
 8002cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002cc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cce:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	fa93 f2a3 	rbit	r2, r3
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002ce0:	601a      	str	r2, [r3, #0]
  return result;
 8002ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002cea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d102      	bne.n	8002d06 <HAL_RCC_OscConfig+0xcba>
 8002d00:	4bb0      	ldr	r3, [pc, #704]	; (8002fc4 <HAL_RCC_OscConfig+0xf78>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	e027      	b.n	8002d56 <HAL_RCC_OscConfig+0xd0a>
 8002d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d18:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	fa93 f2a3 	rbit	r2, r3
 8002d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d26:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d30:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	fa93 f2a3 	rbit	r2, r3
 8002d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	4b9c      	ldr	r3, [pc, #624]	; (8002fc4 <HAL_RCC_OscConfig+0xf78>)
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d5a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d62:	6011      	str	r1, [r2, #0]
 8002d64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d68:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	fa92 f1a2 	rbit	r1, r2
 8002d72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d76:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d7a:	6011      	str	r1, [r2, #0]
  return result;
 8002d7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d80:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	fab2 f282 	clz	r2, r2
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	f042 0220 	orr.w	r2, r2, #32
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	f002 021f 	and.w	r2, r2, #31
 8002d96:	2101      	movs	r1, #1
 8002d98:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d182      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da2:	4b88      	ldr	r3, [pc, #544]	; (8002fc4 <HAL_RCC_OscConfig+0xf78>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	430b      	orrs	r3, r1
 8002dc4:	497f      	ldr	r1, [pc, #508]	; (8002fc4 <HAL_RCC_OscConfig+0xf78>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002dd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	fa93 f2a3 	rbit	r2, r3
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002dee:	601a      	str	r2, [r3, #0]
  return result;
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002df8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7fe f8c4 	bl	8000f9c <HAL_GetTick>
 8002e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e18:	e009      	b.n	8002e2e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe f8bf 	bl	8000f9c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e144      	b.n	80030b8 <HAL_RCC_OscConfig+0x106c>
 8002e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e32:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e40:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f2a3 	rbit	r2, r3
 8002e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e52:	601a      	str	r2, [r3, #0]
  return result;
 8002e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e58:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d102      	bne.n	8002e78 <HAL_RCC_OscConfig+0xe2c>
 8002e72:	4b54      	ldr	r3, [pc, #336]	; (8002fc4 <HAL_RCC_OscConfig+0xf78>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e027      	b.n	8002ec8 <HAL_RCC_OscConfig+0xe7c>
 8002e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	fa93 f2a3 	rbit	r2, r3
 8002e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e98:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002ea6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f2a3 	rbit	r2, r3
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	4b3f      	ldr	r3, [pc, #252]	; (8002fc4 <HAL_RCC_OscConfig+0xf78>)
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ecc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ed0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ed4:	6011      	str	r1, [r2, #0]
 8002ed6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eda:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	fa92 f1a2 	rbit	r1, r2
 8002ee4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ee8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002eec:	6011      	str	r1, [r2, #0]
  return result;
 8002eee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ef2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	fab2 f282 	clz	r2, r2
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	f042 0220 	orr.w	r2, r2, #32
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	f002 021f 	and.w	r2, r2, #31
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d082      	beq.n	8002e1a <HAL_RCC_OscConfig+0xdce>
 8002f14:	e0cf      	b.n	80030b6 <HAL_RCC_OscConfig+0x106a>
 8002f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f28:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	fa93 f2a3 	rbit	r2, r3
 8002f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f36:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f3a:	601a      	str	r2, [r3, #0]
  return result;
 8002f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f40:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f44:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	461a      	mov	r2, r3
 8002f58:	2300      	movs	r3, #0
 8002f5a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe f81e 	bl	8000f9c <HAL_GetTick>
 8002f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f64:	e009      	b.n	8002f7a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f66:	f7fe f819 	bl	8000f9c <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e09e      	b.n	80030b8 <HAL_RCC_OscConfig+0x106c>
 8002f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	fa93 f2a3 	rbit	r2, r3
 8002f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f9e:	601a      	str	r2, [r3, #0]
  return result;
 8002fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002fa8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d104      	bne.n	8002fc8 <HAL_RCC_OscConfig+0xf7c>
 8002fbe:	4b01      	ldr	r3, [pc, #4]	; (8002fc4 <HAL_RCC_OscConfig+0xf78>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	e029      	b.n	8003018 <HAL_RCC_OscConfig+0xfcc>
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fcc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002fd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fda:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	fa93 f2a3 	rbit	r2, r3
 8002fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ff6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003000:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	fa93 f2a3 	rbit	r2, r3
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <HAL_RCC_OscConfig+0x1078>)
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800301c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003020:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003024:	6011      	str	r1, [r2, #0]
 8003026:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800302a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	fa92 f1a2 	rbit	r1, r2
 8003034:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003038:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800303c:	6011      	str	r1, [r2, #0]
  return result;
 800303e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003042:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	fab2 f282 	clz	r2, r2
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	f042 0220 	orr.w	r2, r2, #32
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	f002 021f 	and.w	r2, r2, #31
 8003058:	2101      	movs	r1, #1
 800305a:	fa01 f202 	lsl.w	r2, r1, r2
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d180      	bne.n	8002f66 <HAL_RCC_OscConfig+0xf1a>
 8003064:	e027      	b.n	80030b6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e01e      	b.n	80030b8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <HAL_RCC_OscConfig+0x1078>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003082:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003086:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800308a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	429a      	cmp	r2, r3
 8003098:	d10b      	bne.n	80030b2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800309a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800309e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000

080030c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b09e      	sub	sp, #120	; 0x78
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e162      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e0:	4b90      	ldr	r3, [pc, #576]	; (8003324 <HAL_RCC_ClockConfig+0x25c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d910      	bls.n	8003110 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	4b8d      	ldr	r3, [pc, #564]	; (8003324 <HAL_RCC_ClockConfig+0x25c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 0207 	bic.w	r2, r3, #7
 80030f6:	498b      	ldr	r1, [pc, #556]	; (8003324 <HAL_RCC_ClockConfig+0x25c>)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b89      	ldr	r3, [pc, #548]	; (8003324 <HAL_RCC_ClockConfig+0x25c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e14a      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b82      	ldr	r3, [pc, #520]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	497f      	ldr	r1, [pc, #508]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80dc 	beq.w	80032f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d13c      	bne.n	80031be <HAL_RCC_ClockConfig+0xf6>
 8003144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003148:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003154:	fab3 f383 	clz	r3, r3
 8003158:	b2db      	uxtb	r3, r3
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	b2db      	uxtb	r3, r3
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d102      	bne.n	800316e <HAL_RCC_ClockConfig+0xa6>
 8003168:	4b6f      	ldr	r3, [pc, #444]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	e00f      	b.n	800318e <HAL_RCC_ClockConfig+0xc6>
 800316e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003172:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	667b      	str	r3, [r7, #100]	; 0x64
 800317c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003180:	663b      	str	r3, [r7, #96]	; 0x60
 8003182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800318a:	4b67      	ldr	r3, [pc, #412]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003192:	65ba      	str	r2, [r7, #88]	; 0x58
 8003194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003196:	fa92 f2a2 	rbit	r2, r2
 800319a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800319c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800319e:	fab2 f282 	clz	r2, r2
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	f042 0220 	orr.w	r2, r2, #32
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	f002 021f 	and.w	r2, r2, #31
 80031ae:	2101      	movs	r1, #1
 80031b0:	fa01 f202 	lsl.w	r2, r1, r2
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d17b      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e0f3      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d13c      	bne.n	8003240 <HAL_RCC_ClockConfig+0x178>
 80031c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d102      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x128>
 80031ea:	4b4f      	ldr	r3, [pc, #316]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	e00f      	b.n	8003210 <HAL_RCC_ClockConfig+0x148>
 80031f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	647b      	str	r3, [r7, #68]	; 0x44
 80031fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003202:	643b      	str	r3, [r7, #64]	; 0x40
 8003204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800320c:	4b46      	ldr	r3, [pc, #280]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003214:	63ba      	str	r2, [r7, #56]	; 0x38
 8003216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003218:	fa92 f2a2 	rbit	r2, r2
 800321c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800321e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003220:	fab2 f282 	clz	r2, r2
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	f042 0220 	orr.w	r2, r2, #32
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	f002 021f 	and.w	r2, r2, #31
 8003230:	2101      	movs	r1, #1
 8003232:	fa01 f202 	lsl.w	r2, r1, r2
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d13a      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0b2      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
 8003240:	2302      	movs	r3, #2
 8003242:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d102      	bne.n	8003268 <HAL_RCC_ClockConfig+0x1a0>
 8003262:	4b31      	ldr	r3, [pc, #196]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	e00d      	b.n	8003284 <HAL_RCC_ClockConfig+0x1bc>
 8003268:	2302      	movs	r3, #2
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
 8003274:	2302      	movs	r3, #2
 8003276:	623b      	str	r3, [r7, #32]
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	61fb      	str	r3, [r7, #28]
 8003280:	4b29      	ldr	r3, [pc, #164]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	2202      	movs	r2, #2
 8003286:	61ba      	str	r2, [r7, #24]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	fa92 f2a2 	rbit	r2, r2
 800328e:	617a      	str	r2, [r7, #20]
  return result;
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	fab2 f282 	clz	r2, r2
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	f042 0220 	orr.w	r2, r2, #32
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f002 021f 	and.w	r2, r2, #31
 80032a2:	2101      	movs	r1, #1
 80032a4:	fa01 f202 	lsl.w	r2, r1, r2
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e079      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b2:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f023 0203 	bic.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	491a      	ldr	r1, [pc, #104]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c4:	f7fd fe6a 	bl	8000f9c <HAL_GetTick>
 80032c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032cc:	f7fd fe66 	bl	8000f9c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e061      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 020c 	and.w	r2, r3, #12
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1eb      	bne.n	80032cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCC_ClockConfig+0x25c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d214      	bcs.n	800332c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_RCC_ClockConfig+0x25c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 0207 	bic.w	r2, r3, #7
 800330a:	4906      	ldr	r1, [pc, #24]	; (8003324 <HAL_RCC_ClockConfig+0x25c>)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b04      	ldr	r3, [pc, #16]	; (8003324 <HAL_RCC_ClockConfig+0x25c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d005      	beq.n	800332c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e040      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
 8003324:	40022000 	.word	0x40022000
 8003328:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003338:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <HAL_RCC_ClockConfig+0x2e8>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	491a      	ldr	r1, [pc, #104]	; (80033b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003346:	4313      	orrs	r3, r2
 8003348:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003356:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4912      	ldr	r1, [pc, #72]	; (80033b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003366:	4313      	orrs	r3, r2
 8003368:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800336a:	f000 f829 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 800336e:	4601      	mov	r1, r0
 8003370:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003378:	22f0      	movs	r2, #240	; 0xf0
 800337a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	fa92 f2a2 	rbit	r2, r2
 8003382:	60fa      	str	r2, [r7, #12]
  return result;
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	fab2 f282 	clz	r2, r2
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	40d3      	lsrs	r3, r2
 800338e:	4a09      	ldr	r2, [pc, #36]	; (80033b4 <HAL_RCC_ClockConfig+0x2ec>)
 8003390:	5cd3      	ldrb	r3, [r2, r3]
 8003392:	fa21 f303 	lsr.w	r3, r1, r3
 8003396:	4a08      	ldr	r2, [pc, #32]	; (80033b8 <HAL_RCC_ClockConfig+0x2f0>)
 8003398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_RCC_ClockConfig+0x2f4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd fcf0 	bl	8000d84 <HAL_InitTick>
  
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3778      	adds	r7, #120	; 0x78
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
 80033b4:	0800770c 	.word	0x0800770c
 80033b8:	20000000 	.word	0x20000000
 80033bc:	20000004 	.word	0x20000004

080033c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b08b      	sub	sp, #44	; 0x2c
 80033c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	2300      	movs	r3, #0
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80033da:	4b29      	ldr	r3, [pc, #164]	; (8003480 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d002      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x30>
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d003      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0x36>
 80033ee:	e03c      	b.n	800346a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033f0:	4b24      	ldr	r3, [pc, #144]	; (8003484 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033f2:	623b      	str	r3, [r7, #32]
      break;
 80033f4:	e03c      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003400:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	fa92 f2a2 	rbit	r2, r2
 8003408:	607a      	str	r2, [r7, #4]
  return result;
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	fab2 f282 	clz	r2, r2
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	40d3      	lsrs	r3, r2
 8003414:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003416:	5cd3      	ldrb	r3, [r2, r3]
 8003418:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800341a:	4b19      	ldr	r3, [pc, #100]	; (8003480 <HAL_RCC_GetSysClockFreq+0xc0>)
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	220f      	movs	r2, #15
 8003424:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	fa92 f2a2 	rbit	r2, r2
 800342c:	60fa      	str	r2, [r7, #12]
  return result;
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	fab2 f282 	clz	r2, r2
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	40d3      	lsrs	r3, r2
 8003438:	4a14      	ldr	r2, [pc, #80]	; (800348c <HAL_RCC_GetSysClockFreq+0xcc>)
 800343a:	5cd3      	ldrb	r3, [r2, r3]
 800343c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003448:	4a0e      	ldr	r2, [pc, #56]	; (8003484 <HAL_RCC_GetSysClockFreq+0xc4>)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	fb02 f303 	mul.w	r3, r2, r3
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
 8003458:	e004      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	4a0c      	ldr	r2, [pc, #48]	; (8003490 <HAL_RCC_GetSysClockFreq+0xd0>)
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	623b      	str	r3, [r7, #32]
      break;
 8003468:	e002      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_RCC_GetSysClockFreq+0xc4>)
 800346c:	623b      	str	r3, [r7, #32]
      break;
 800346e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003470:	6a3b      	ldr	r3, [r7, #32]
}
 8003472:	4618      	mov	r0, r3
 8003474:	372c      	adds	r7, #44	; 0x2c
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	007a1200 	.word	0x007a1200
 8003488:	08007724 	.word	0x08007724
 800348c:	08007734 	.word	0x08007734
 8003490:	003d0900 	.word	0x003d0900

08003494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000000 	.word	0x20000000

080034ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034b2:	f7ff ffef 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034b6:	4601      	mov	r1, r0
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	fa92 f2a2 	rbit	r2, r2
 80034cc:	603a      	str	r2, [r7, #0]
  return result;
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	fab2 f282 	clz	r2, r2
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	40d3      	lsrs	r3, r2
 80034d8:	4a04      	ldr	r2, [pc, #16]	; (80034ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80034da:	5cd3      	ldrb	r3, [r2, r3]
 80034dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000
 80034ec:	0800771c 	.word	0x0800771c

080034f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	220f      	movs	r2, #15
 80034fe:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003500:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_RCC_GetClockConfig+0x5c>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 0203 	and.w	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_RCC_GetClockConfig+0x5c>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <HAL_RCC_GetClockConfig+0x5c>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_RCC_GetClockConfig+0x5c>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	08db      	lsrs	r3, r3, #3
 800352a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003532:	4b07      	ldr	r3, [pc, #28]	; (8003550 <HAL_RCC_GetClockConfig+0x60>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0207 	and.w	r2, r3, #7
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	601a      	str	r2, [r3, #0]
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	40022000 	.word	0x40022000

08003554 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b092      	sub	sp, #72	; 0x48
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003564:	2300      	movs	r3, #0
 8003566:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 80d4 	beq.w	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003578:	4b4e      	ldr	r3, [pc, #312]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10e      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003584:	4b4b      	ldr	r3, [pc, #300]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	4a4a      	ldr	r2, [pc, #296]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358e:	61d3      	str	r3, [r2, #28]
 8003590:	4b48      	ldr	r3, [pc, #288]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359c:	2301      	movs	r3, #1
 800359e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	4b45      	ldr	r3, [pc, #276]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d118      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ae:	4b42      	ldr	r3, [pc, #264]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a41      	ldr	r2, [pc, #260]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fd fcef 	bl	8000f9c <HAL_GetTick>
 80035be:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	e008      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c2:	f7fd fceb 	bl	8000f9c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b64      	cmp	r3, #100	; 0x64
 80035ce:	d901      	bls.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e14b      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	4b38      	ldr	r3, [pc, #224]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035e0:	4b34      	ldr	r3, [pc, #208]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8084 	beq.w	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d07c      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003600:	4b2c      	ldr	r3, [pc, #176]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800360a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800360e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	4b26      	ldr	r3, [pc, #152]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	461a      	mov	r2, r3
 800362a:	2301      	movs	r3, #1
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003632:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800363c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	461a      	mov	r2, r3
 800364e:	2300      	movs	r3, #0
 8003650:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003652:	4a18      	ldr	r2, [pc, #96]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003656:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d04b      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003662:	f7fd fc9b 	bl	8000f9c <HAL_GetTick>
 8003666:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003668:	e00a      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366a:	f7fd fc97 	bl	8000f9c <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	f241 3288 	movw	r2, #5000	; 0x1388
 8003678:	4293      	cmp	r3, r2
 800367a:	d901      	bls.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e0f5      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003680:	2302      	movs	r3, #2
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
 800368c:	2302      	movs	r3, #2
 800368e:	623b      	str	r3, [r7, #32]
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	61fb      	str	r3, [r7, #28]
  return result;
 8003698:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369a:	fab3 f383 	clz	r3, r3
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	095b      	lsrs	r3, r3, #5
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	f043 0302 	orr.w	r3, r3, #2
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d108      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036ae:	4b01      	ldr	r3, [pc, #4]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	e00d      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40007000 	.word	0x40007000
 80036bc:	10908100 	.word	0x10908100
 80036c0:	2302      	movs	r3, #2
 80036c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	4b69      	ldr	r3, [pc, #420]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	2202      	movs	r2, #2
 80036d2:	613a      	str	r2, [r7, #16]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	fa92 f2a2 	rbit	r2, r2
 80036da:	60fa      	str	r2, [r7, #12]
  return result;
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	fab2 f282 	clz	r2, r2
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	f002 021f 	and.w	r2, r2, #31
 80036ee:	2101      	movs	r1, #1
 80036f0:	fa01 f202 	lsl.w	r2, r1, r2
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0b7      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036fa:	4b5e      	ldr	r3, [pc, #376]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	495b      	ldr	r1, [pc, #364]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003708:	4313      	orrs	r3, r2
 800370a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800370c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003714:	4b57      	ldr	r3, [pc, #348]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	4a56      	ldr	r2, [pc, #344]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800371a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800372c:	4b51      	ldr	r3, [pc, #324]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	f023 0203 	bic.w	r2, r3, #3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	494e      	ldr	r1, [pc, #312]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800373a:	4313      	orrs	r3, r2
 800373c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800374a:	4b4a      	ldr	r3, [pc, #296]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	f023 0210 	bic.w	r2, r3, #16
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	4947      	ldr	r1, [pc, #284]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003758:	4313      	orrs	r3, r2
 800375a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003768:	4b42      	ldr	r3, [pc, #264]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	493f      	ldr	r1, [pc, #252]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003776:	4313      	orrs	r3, r2
 8003778:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003786:	4b3b      	ldr	r3, [pc, #236]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f023 0220 	bic.w	r2, r3, #32
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	4938      	ldr	r1, [pc, #224]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003794:	4313      	orrs	r3, r2
 8003796:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037a4:	4b33      	ldr	r3, [pc, #204]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	4930      	ldr	r1, [pc, #192]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037c2:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	4929      	ldr	r1, [pc, #164]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80037e0:	4b24      	ldr	r3, [pc, #144]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	4921      	ldr	r1, [pc, #132]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80037fe:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	491a      	ldr	r1, [pc, #104]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800380c:	4313      	orrs	r3, r2
 800380e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800381c:	4b15      	ldr	r3, [pc, #84]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	4912      	ldr	r1, [pc, #72]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800382a:	4313      	orrs	r3, r2
 800382c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800383a:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	490b      	ldr	r1, [pc, #44]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003848:	4313      	orrs	r3, r2
 800384a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	4903      	ldr	r1, [pc, #12]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003866:	4313      	orrs	r3, r2
 8003868:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3748      	adds	r7, #72	; 0x48
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000

08003878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e049      	b.n	800391e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd fa18 	bl	8000cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	4610      	mov	r0, r2
 80038b8:	f000 fcf8 	bl	80042ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d001      	beq.n	8003940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e03b      	b.n	80039b8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a19      	ldr	r2, [pc, #100]	; (80039c4 <HAL_TIM_Base_Start_IT+0x9c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d009      	beq.n	8003976 <HAL_TIM_Base_Start_IT+0x4e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396a:	d004      	beq.n	8003976 <HAL_TIM_Base_Start_IT+0x4e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d115      	bne.n	80039a2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	4b13      	ldr	r3, [pc, #76]	; (80039cc <HAL_TIM_Base_Start_IT+0xa4>)
 800397e:	4013      	ands	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b06      	cmp	r3, #6
 8003986:	d015      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x8c>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398e:	d011      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a0:	e008      	b.n	80039b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	e000      	b.n	80039b6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	40012c00 	.word	0x40012c00
 80039c8:	40014000 	.word	0x40014000
 80039cc:	00010007 	.word	0x00010007

080039d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e049      	b.n	8003a76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f841 	bl	8003a7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f000 fc4c 	bl	80042ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <HAL_TIM_PWM_Start+0x24>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	bf14      	ite	ne
 8003ab0:	2301      	movne	r3, #1
 8003ab2:	2300      	moveq	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	e03c      	b.n	8003b32 <HAL_TIM_PWM_Start+0x9e>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d109      	bne.n	8003ad2 <HAL_TIM_PWM_Start+0x3e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	bf14      	ite	ne
 8003aca:	2301      	movne	r3, #1
 8003acc:	2300      	moveq	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	e02f      	b.n	8003b32 <HAL_TIM_PWM_Start+0x9e>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d109      	bne.n	8003aec <HAL_TIM_PWM_Start+0x58>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e022      	b.n	8003b32 <HAL_TIM_PWM_Start+0x9e>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	d109      	bne.n	8003b06 <HAL_TIM_PWM_Start+0x72>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	e015      	b.n	8003b32 <HAL_TIM_PWM_Start+0x9e>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b10      	cmp	r3, #16
 8003b0a:	d109      	bne.n	8003b20 <HAL_TIM_PWM_Start+0x8c>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	bf14      	ite	ne
 8003b18:	2301      	movne	r3, #1
 8003b1a:	2300      	moveq	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	e008      	b.n	8003b32 <HAL_TIM_PWM_Start+0x9e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	bf14      	ite	ne
 8003b2c:	2301      	movne	r3, #1
 8003b2e:	2300      	moveq	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e083      	b.n	8003c42 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d104      	bne.n	8003b4a <HAL_TIM_PWM_Start+0xb6>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b48:	e023      	b.n	8003b92 <HAL_TIM_PWM_Start+0xfe>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d104      	bne.n	8003b5a <HAL_TIM_PWM_Start+0xc6>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b58:	e01b      	b.n	8003b92 <HAL_TIM_PWM_Start+0xfe>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d104      	bne.n	8003b6a <HAL_TIM_PWM_Start+0xd6>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b68:	e013      	b.n	8003b92 <HAL_TIM_PWM_Start+0xfe>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b0c      	cmp	r3, #12
 8003b6e:	d104      	bne.n	8003b7a <HAL_TIM_PWM_Start+0xe6>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b78:	e00b      	b.n	8003b92 <HAL_TIM_PWM_Start+0xfe>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	d104      	bne.n	8003b8a <HAL_TIM_PWM_Start+0xf6>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b88:	e003      	b.n	8003b92 <HAL_TIM_PWM_Start+0xfe>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2201      	movs	r2, #1
 8003b98:	6839      	ldr	r1, [r7, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 ff34 	bl	8004a08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a29      	ldr	r2, [pc, #164]	; (8003c4c <HAL_TIM_PWM_Start+0x1b8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00e      	beq.n	8003bc8 <HAL_TIM_PWM_Start+0x134>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a28      	ldr	r2, [pc, #160]	; (8003c50 <HAL_TIM_PWM_Start+0x1bc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d009      	beq.n	8003bc8 <HAL_TIM_PWM_Start+0x134>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <HAL_TIM_PWM_Start+0x1c0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_TIM_PWM_Start+0x134>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a25      	ldr	r2, [pc, #148]	; (8003c58 <HAL_TIM_PWM_Start+0x1c4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_TIM_PWM_Start+0x138>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <HAL_TIM_PWM_Start+0x13a>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003be0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <HAL_TIM_PWM_Start+0x1b8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d009      	beq.n	8003c00 <HAL_TIM_PWM_Start+0x16c>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf4:	d004      	beq.n	8003c00 <HAL_TIM_PWM_Start+0x16c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a15      	ldr	r2, [pc, #84]	; (8003c50 <HAL_TIM_PWM_Start+0x1bc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d115      	bne.n	8003c2c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <HAL_TIM_PWM_Start+0x1c8>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b06      	cmp	r3, #6
 8003c10:	d015      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x1aa>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c18:	d011      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0201 	orr.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2a:	e008      	b.n	8003c3e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	e000      	b.n	8003c40 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40014400 	.word	0x40014400
 8003c58:	40014800 	.word	0x40014800
 8003c5c:	00010007 	.word	0x00010007

08003c60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d122      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d11b      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0202 	mvn.w	r2, #2
 8003c8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fae3 	bl	800426e <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fad5 	bl	800425a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fae6 	bl	8004282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d122      	bne.n	8003d10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d11b      	bne.n	8003d10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0204 	mvn.w	r2, #4
 8003ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fab9 	bl	800426e <HAL_TIM_IC_CaptureCallback>
 8003cfc:	e005      	b.n	8003d0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 faab 	bl	800425a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fabc 	bl	8004282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d122      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d11b      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0208 	mvn.w	r2, #8
 8003d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2204      	movs	r2, #4
 8003d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fa8f 	bl	800426e <HAL_TIM_IC_CaptureCallback>
 8003d50:	e005      	b.n	8003d5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fa81 	bl	800425a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fa92 	bl	8004282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d122      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d11b      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0210 	mvn.w	r2, #16
 8003d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fa65 	bl	800426e <HAL_TIM_IC_CaptureCallback>
 8003da4:	e005      	b.n	8003db2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fa57 	bl	800425a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fa68 	bl	8004282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d10e      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d107      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f06f 0201 	mvn.w	r2, #1
 8003ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fc fea2 	bl	8000b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dee:	2b80      	cmp	r3, #128	; 0x80
 8003df0:	d10e      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfc:	2b80      	cmp	r3, #128	; 0x80
 8003dfe:	d107      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 ff0a 	bl	8004c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1e:	d10e      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2a:	2b80      	cmp	r3, #128	; 0x80
 8003e2c:	d107      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fefd 	bl	8004c38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d10e      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d107      	bne.n	8003e6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fa16 	bl	8004296 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d10e      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d107      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f06f 0220 	mvn.w	r2, #32
 8003e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 febd 	bl	8004c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e0ff      	b.n	80040be <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b14      	cmp	r3, #20
 8003eca:	f200 80f0 	bhi.w	80040ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003ece:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed4:	08003f29 	.word	0x08003f29
 8003ed8:	080040af 	.word	0x080040af
 8003edc:	080040af 	.word	0x080040af
 8003ee0:	080040af 	.word	0x080040af
 8003ee4:	08003f69 	.word	0x08003f69
 8003ee8:	080040af 	.word	0x080040af
 8003eec:	080040af 	.word	0x080040af
 8003ef0:	080040af 	.word	0x080040af
 8003ef4:	08003fab 	.word	0x08003fab
 8003ef8:	080040af 	.word	0x080040af
 8003efc:	080040af 	.word	0x080040af
 8003f00:	080040af 	.word	0x080040af
 8003f04:	08003feb 	.word	0x08003feb
 8003f08:	080040af 	.word	0x080040af
 8003f0c:	080040af 	.word	0x080040af
 8003f10:	080040af 	.word	0x080040af
 8003f14:	0800402d 	.word	0x0800402d
 8003f18:	080040af 	.word	0x080040af
 8003f1c:	080040af 	.word	0x080040af
 8003f20:	080040af 	.word	0x080040af
 8003f24:	0800406d 	.word	0x0800406d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fa2a 	bl	8004388 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0208 	orr.w	r2, r2, #8
 8003f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699a      	ldr	r2, [r3, #24]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0204 	bic.w	r2, r2, #4
 8003f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6999      	ldr	r1, [r3, #24]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	619a      	str	r2, [r3, #24]
      break;
 8003f66:	e0a5      	b.n	80040b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fa90 	bl	8004494 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6999      	ldr	r1, [r3, #24]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	021a      	lsls	r2, r3, #8
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	619a      	str	r2, [r3, #24]
      break;
 8003fa8:	e084      	b.n	80040b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 faef 	bl	8004594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69da      	ldr	r2, [r3, #28]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0208 	orr.w	r2, r2, #8
 8003fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0204 	bic.w	r2, r2, #4
 8003fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69d9      	ldr	r1, [r3, #28]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	61da      	str	r2, [r3, #28]
      break;
 8003fe8:	e064      	b.n	80040b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fb4d 	bl	8004690 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69da      	ldr	r2, [r3, #28]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69d9      	ldr	r1, [r3, #28]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	021a      	lsls	r2, r3, #8
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	61da      	str	r2, [r3, #28]
      break;
 800402a:	e043      	b.n	80040b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fb90 	bl	8004758 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0208 	orr.w	r2, r2, #8
 8004046:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0204 	bic.w	r2, r2, #4
 8004056:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800406a:	e023      	b.n	80040b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fbce 	bl	8004814 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004086:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004096:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	021a      	lsls	r2, r3, #8
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040ac:	e002      	b.n	80040b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	75fb      	strb	r3, [r7, #23]
      break;
 80040b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop

080040c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_TIM_ConfigClockSource+0x1c>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e0b6      	b.n	8004252 <HAL_TIM_ConfigClockSource+0x18a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004102:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800410e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004120:	d03e      	beq.n	80041a0 <HAL_TIM_ConfigClockSource+0xd8>
 8004122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004126:	f200 8087 	bhi.w	8004238 <HAL_TIM_ConfigClockSource+0x170>
 800412a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412e:	f000 8086 	beq.w	800423e <HAL_TIM_ConfigClockSource+0x176>
 8004132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004136:	d87f      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x170>
 8004138:	2b70      	cmp	r3, #112	; 0x70
 800413a:	d01a      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0xaa>
 800413c:	2b70      	cmp	r3, #112	; 0x70
 800413e:	d87b      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x170>
 8004140:	2b60      	cmp	r3, #96	; 0x60
 8004142:	d050      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x11e>
 8004144:	2b60      	cmp	r3, #96	; 0x60
 8004146:	d877      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x170>
 8004148:	2b50      	cmp	r3, #80	; 0x50
 800414a:	d03c      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0xfe>
 800414c:	2b50      	cmp	r3, #80	; 0x50
 800414e:	d873      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x170>
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	d058      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0x13e>
 8004154:	2b40      	cmp	r3, #64	; 0x40
 8004156:	d86f      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x170>
 8004158:	2b30      	cmp	r3, #48	; 0x30
 800415a:	d064      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x15e>
 800415c:	2b30      	cmp	r3, #48	; 0x30
 800415e:	d86b      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x170>
 8004160:	2b20      	cmp	r3, #32
 8004162:	d060      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x15e>
 8004164:	2b20      	cmp	r3, #32
 8004166:	d867      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x170>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d05c      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x15e>
 800416c:	2b10      	cmp	r3, #16
 800416e:	d05a      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x15e>
 8004170:	e062      	b.n	8004238 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	6899      	ldr	r1, [r3, #8]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f000 fc21 	bl	80049c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004194:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	609a      	str	r2, [r3, #8]
      break;
 800419e:	e04f      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6899      	ldr	r1, [r3, #8]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f000 fc0a 	bl	80049c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041c2:	609a      	str	r2, [r3, #8]
      break;
 80041c4:	e03c      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6859      	ldr	r1, [r3, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f000 fb7e 	bl	80048d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2150      	movs	r1, #80	; 0x50
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fbd7 	bl	8004992 <TIM_ITRx_SetConfig>
      break;
 80041e4:	e02c      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6859      	ldr	r1, [r3, #4]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	461a      	mov	r2, r3
 80041f4:	f000 fb9d 	bl	8004932 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2160      	movs	r1, #96	; 0x60
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fbc7 	bl	8004992 <TIM_ITRx_SetConfig>
      break;
 8004204:	e01c      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6859      	ldr	r1, [r3, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	461a      	mov	r2, r3
 8004214:	f000 fb5e 	bl	80048d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2140      	movs	r1, #64	; 0x40
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fbb7 	bl	8004992 <TIM_ITRx_SetConfig>
      break;
 8004224:	e00c      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4619      	mov	r1, r3
 8004230:	4610      	mov	r0, r2
 8004232:	f000 fbae 	bl	8004992 <TIM_ITRx_SetConfig>
      break;
 8004236:	e003      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      break;
 800423c:	e000      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800423e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a2e      	ldr	r2, [pc, #184]	; (8004378 <TIM_Base_SetConfig+0xcc>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d003      	beq.n	80042cc <TIM_Base_SetConfig+0x20>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ca:	d108      	bne.n	80042de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a25      	ldr	r2, [pc, #148]	; (8004378 <TIM_Base_SetConfig+0xcc>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00f      	beq.n	8004306 <TIM_Base_SetConfig+0x5a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ec:	d00b      	beq.n	8004306 <TIM_Base_SetConfig+0x5a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a22      	ldr	r2, [pc, #136]	; (800437c <TIM_Base_SetConfig+0xd0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d007      	beq.n	8004306 <TIM_Base_SetConfig+0x5a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a21      	ldr	r2, [pc, #132]	; (8004380 <TIM_Base_SetConfig+0xd4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d003      	beq.n	8004306 <TIM_Base_SetConfig+0x5a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a20      	ldr	r2, [pc, #128]	; (8004384 <TIM_Base_SetConfig+0xd8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d108      	bne.n	8004318 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a0e      	ldr	r2, [pc, #56]	; (8004378 <TIM_Base_SetConfig+0xcc>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00b      	beq.n	800435c <TIM_Base_SetConfig+0xb0>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a0d      	ldr	r2, [pc, #52]	; (800437c <TIM_Base_SetConfig+0xd0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d007      	beq.n	800435c <TIM_Base_SetConfig+0xb0>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a0c      	ldr	r2, [pc, #48]	; (8004380 <TIM_Base_SetConfig+0xd4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d003      	beq.n	800435c <TIM_Base_SetConfig+0xb0>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a0b      	ldr	r2, [pc, #44]	; (8004384 <TIM_Base_SetConfig+0xd8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d103      	bne.n	8004364 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	615a      	str	r2, [r3, #20]
}
 800436a:	bf00      	nop
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40012c00 	.word	0x40012c00
 800437c:	40014000 	.word	0x40014000
 8004380:	40014400 	.word	0x40014400
 8004384:	40014800 	.word	0x40014800

08004388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f023 0201 	bic.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f023 0302 	bic.w	r3, r3, #2
 80043d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a28      	ldr	r2, [pc, #160]	; (8004484 <TIM_OC1_SetConfig+0xfc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00b      	beq.n	8004400 <TIM_OC1_SetConfig+0x78>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a27      	ldr	r2, [pc, #156]	; (8004488 <TIM_OC1_SetConfig+0x100>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d007      	beq.n	8004400 <TIM_OC1_SetConfig+0x78>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a26      	ldr	r2, [pc, #152]	; (800448c <TIM_OC1_SetConfig+0x104>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d003      	beq.n	8004400 <TIM_OC1_SetConfig+0x78>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a25      	ldr	r2, [pc, #148]	; (8004490 <TIM_OC1_SetConfig+0x108>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d10c      	bne.n	800441a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f023 0308 	bic.w	r3, r3, #8
 8004406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f023 0304 	bic.w	r3, r3, #4
 8004418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a19      	ldr	r2, [pc, #100]	; (8004484 <TIM_OC1_SetConfig+0xfc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00b      	beq.n	800443a <TIM_OC1_SetConfig+0xb2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a18      	ldr	r2, [pc, #96]	; (8004488 <TIM_OC1_SetConfig+0x100>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d007      	beq.n	800443a <TIM_OC1_SetConfig+0xb2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a17      	ldr	r2, [pc, #92]	; (800448c <TIM_OC1_SetConfig+0x104>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d003      	beq.n	800443a <TIM_OC1_SetConfig+0xb2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a16      	ldr	r2, [pc, #88]	; (8004490 <TIM_OC1_SetConfig+0x108>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d111      	bne.n	800445e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	621a      	str	r2, [r3, #32]
}
 8004478:	bf00      	nop
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40014000 	.word	0x40014000
 800448c:	40014400 	.word	0x40014400
 8004490:	40014800 	.word	0x40014800

08004494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f023 0210 	bic.w	r2, r3, #16
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	021b      	lsls	r3, r3, #8
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0320 	bic.w	r3, r3, #32
 80044e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a24      	ldr	r2, [pc, #144]	; (8004584 <TIM_OC2_SetConfig+0xf0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d10d      	bne.n	8004514 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004512:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a1b      	ldr	r2, [pc, #108]	; (8004584 <TIM_OC2_SetConfig+0xf0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00b      	beq.n	8004534 <TIM_OC2_SetConfig+0xa0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a1a      	ldr	r2, [pc, #104]	; (8004588 <TIM_OC2_SetConfig+0xf4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d007      	beq.n	8004534 <TIM_OC2_SetConfig+0xa0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a19      	ldr	r2, [pc, #100]	; (800458c <TIM_OC2_SetConfig+0xf8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_OC2_SetConfig+0xa0>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a18      	ldr	r2, [pc, #96]	; (8004590 <TIM_OC2_SetConfig+0xfc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d113      	bne.n	800455c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800453a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004542:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40012c00 	.word	0x40012c00
 8004588:	40014000 	.word	0x40014000
 800458c:	40014400 	.word	0x40014400
 8004590:	40014800 	.word	0x40014800

08004594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0303 	bic.w	r3, r3, #3
 80045ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a23      	ldr	r2, [pc, #140]	; (8004680 <TIM_OC3_SetConfig+0xec>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10d      	bne.n	8004612 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004610:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a1a      	ldr	r2, [pc, #104]	; (8004680 <TIM_OC3_SetConfig+0xec>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00b      	beq.n	8004632 <TIM_OC3_SetConfig+0x9e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a19      	ldr	r2, [pc, #100]	; (8004684 <TIM_OC3_SetConfig+0xf0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d007      	beq.n	8004632 <TIM_OC3_SetConfig+0x9e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a18      	ldr	r2, [pc, #96]	; (8004688 <TIM_OC3_SetConfig+0xf4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d003      	beq.n	8004632 <TIM_OC3_SetConfig+0x9e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a17      	ldr	r2, [pc, #92]	; (800468c <TIM_OC3_SetConfig+0xf8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d113      	bne.n	800465a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	621a      	str	r2, [r3, #32]
}
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40014000 	.word	0x40014000
 8004688:	40014400 	.word	0x40014400
 800468c:	40014800 	.word	0x40014800

08004690 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	021b      	lsls	r3, r3, #8
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	031b      	lsls	r3, r3, #12
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a16      	ldr	r2, [pc, #88]	; (8004748 <TIM_OC4_SetConfig+0xb8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00b      	beq.n	800470c <TIM_OC4_SetConfig+0x7c>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a15      	ldr	r2, [pc, #84]	; (800474c <TIM_OC4_SetConfig+0xbc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d007      	beq.n	800470c <TIM_OC4_SetConfig+0x7c>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a14      	ldr	r2, [pc, #80]	; (8004750 <TIM_OC4_SetConfig+0xc0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d003      	beq.n	800470c <TIM_OC4_SetConfig+0x7c>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a13      	ldr	r2, [pc, #76]	; (8004754 <TIM_OC4_SetConfig+0xc4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d109      	bne.n	8004720 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004712:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	019b      	lsls	r3, r3, #6
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40012c00 	.word	0x40012c00
 800474c:	40014000 	.word	0x40014000
 8004750:	40014400 	.word	0x40014400
 8004754:	40014800 	.word	0x40014800

08004758 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800479c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	041b      	lsls	r3, r3, #16
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a15      	ldr	r2, [pc, #84]	; (8004804 <TIM_OC5_SetConfig+0xac>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00b      	beq.n	80047ca <TIM_OC5_SetConfig+0x72>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a14      	ldr	r2, [pc, #80]	; (8004808 <TIM_OC5_SetConfig+0xb0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d007      	beq.n	80047ca <TIM_OC5_SetConfig+0x72>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a13      	ldr	r2, [pc, #76]	; (800480c <TIM_OC5_SetConfig+0xb4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d003      	beq.n	80047ca <TIM_OC5_SetConfig+0x72>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a12      	ldr	r2, [pc, #72]	; (8004810 <TIM_OC5_SetConfig+0xb8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d109      	bne.n	80047de <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	621a      	str	r2, [r3, #32]
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	40012c00 	.word	0x40012c00
 8004808:	40014000 	.word	0x40014000
 800480c:	40014400 	.word	0x40014400
 8004810:	40014800 	.word	0x40014800

08004814 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4313      	orrs	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800485a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	051b      	lsls	r3, r3, #20
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a16      	ldr	r2, [pc, #88]	; (80048c4 <TIM_OC6_SetConfig+0xb0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00b      	beq.n	8004888 <TIM_OC6_SetConfig+0x74>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a15      	ldr	r2, [pc, #84]	; (80048c8 <TIM_OC6_SetConfig+0xb4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d007      	beq.n	8004888 <TIM_OC6_SetConfig+0x74>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a14      	ldr	r2, [pc, #80]	; (80048cc <TIM_OC6_SetConfig+0xb8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d003      	beq.n	8004888 <TIM_OC6_SetConfig+0x74>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a13      	ldr	r2, [pc, #76]	; (80048d0 <TIM_OC6_SetConfig+0xbc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d109      	bne.n	800489c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	029b      	lsls	r3, r3, #10
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	621a      	str	r2, [r3, #32]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40012c00 	.word	0x40012c00
 80048c8:	40014000 	.word	0x40014000
 80048cc:	40014400 	.word	0x40014400
 80048d0:	40014800 	.word	0x40014800

080048d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	f023 0201 	bic.w	r2, r3, #1
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f023 030a 	bic.w	r3, r3, #10
 8004910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	621a      	str	r2, [r3, #32]
}
 8004926:	bf00      	nop
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004932:	b480      	push	{r7}
 8004934:	b087      	sub	sp, #28
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	f023 0210 	bic.w	r2, r3, #16
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800495c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	031b      	lsls	r3, r3, #12
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800496e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	621a      	str	r2, [r3, #32]
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004992:	b480      	push	{r7}
 8004994:	b085      	sub	sp, #20
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f043 0307 	orr.w	r3, r3, #7
 80049b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	609a      	str	r2, [r3, #8]
}
 80049bc:	bf00      	nop
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	021a      	lsls	r2, r3, #8
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	609a      	str	r2, [r3, #8]
}
 80049fc:	bf00      	nop
 80049fe:	371c      	adds	r7, #28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f003 031f 	and.w	r3, r3, #31
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1a      	ldr	r2, [r3, #32]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	401a      	ands	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a1a      	ldr	r2, [r3, #32]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a40:	431a      	orrs	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	621a      	str	r2, [r3, #32]
}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
	...

08004a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e04f      	b.n	8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a21      	ldr	r2, [pc, #132]	; (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d108      	bne.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a14      	ldr	r2, [pc, #80]	; (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d009      	beq.n	8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad4:	d004      	beq.n	8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a10      	ldr	r2, [pc, #64]	; (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10c      	bne.n	8004afa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	40012c00 	.word	0x40012c00
 8004b1c:	40014000 	.word	0x40014000

08004b20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e060      	b.n	8004bfe <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	041b      	lsls	r3, r3, #16
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d115      	bne.n	8004bec <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	051b      	lsls	r3, r3, #20
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40012c00 	.word	0x40012c00

08004c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c5e:	2b84      	cmp	r3, #132	; 0x84
 8004c60:	d005      	beq.n	8004c6e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004c62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4413      	add	r3, r2
 8004c6a:	3303      	adds	r3, #3
 8004c6c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c80:	f000 ffd2 	bl	8005c28 <vTaskStartScheduler>
  
  return osOK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c8c:	b089      	sub	sp, #36	; 0x24
 8004c8e:	af04      	add	r7, sp, #16
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d020      	beq.n	8004cde <osThreadCreate+0x54>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01c      	beq.n	8004cde <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685c      	ldr	r4, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681d      	ldr	r5, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691e      	ldr	r6, [r3, #16]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff ffc8 	bl	8004c4c <makeFreeRtosPriority>
 8004cbc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cc6:	9202      	str	r2, [sp, #8]
 8004cc8:	9301      	str	r3, [sp, #4]
 8004cca:	9100      	str	r1, [sp, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	4632      	mov	r2, r6
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f000 fdea 	bl	80058ac <xTaskCreateStatic>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	e01c      	b.n	8004d18 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685c      	ldr	r4, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cea:	b29e      	uxth	r6, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff ffaa 	bl	8004c4c <makeFreeRtosPriority>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	f107 030c 	add.w	r3, r7, #12
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	9200      	str	r2, [sp, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	4632      	mov	r2, r6
 8004d06:	4629      	mov	r1, r5
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f000 fe2b 	bl	8005964 <xTaskCreate>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d001      	beq.n	8004d18 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	e000      	b.n	8004d1a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004d18:	68fb      	ldr	r3, [r7, #12]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d22 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <osDelay+0x16>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	e000      	b.n	8004d3a <osDelay+0x18>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 ff40 	bl	8005bc0 <vTaskDelay>
  
  return osOK;
 8004d40:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8004d50:	201c      	movs	r0, #28
 8004d52:	f002 fa71 	bl	8007238 <pvPortMalloc>
 8004d56:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3304      	adds	r3, #4
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 f808 	bl	8004d7e <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004d74:	687b      	ldr	r3, [r7, #4]
	}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f103 0208 	add.w	r2, r3, #8
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f04f 32ff 	mov.w	r2, #4294967295
 8004d96:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f103 0208 	add.w	r2, r3, #8
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f103 0208 	add.w	r2, r3, #8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	601a      	str	r2, [r3, #0]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e36:	d103      	bne.n	8004e40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	e00c      	b.n	8004e5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3308      	adds	r3, #8
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	e002      	b.n	8004e4e <vListInsert+0x2e>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d2f6      	bcs.n	8004e48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	601a      	str	r2, [r3, #0]
}
 8004e86:	bf00      	nop
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e92:	b480      	push	{r7}
 8004e94:	b085      	sub	sp, #20
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6892      	ldr	r2, [r2, #8]
 8004ea8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6852      	ldr	r2, [r2, #4]
 8004eb2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d103      	bne.n	8004ec6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	1e5a      	subs	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
	...

08004ee8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f0e:	bf00      	nop
 8004f10:	e7fe      	b.n	8004f10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004f12:	f002 f86f 	bl	8006ff4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1e:	68f9      	ldr	r1, [r7, #12]
 8004f20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f22:	fb01 f303 	mul.w	r3, r1, r3
 8004f26:	441a      	add	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	3b01      	subs	r3, #1
 8004f44:	68f9      	ldr	r1, [r7, #12]
 8004f46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
 8004f4c:	441a      	add	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	22ff      	movs	r2, #255	; 0xff
 8004f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	22ff      	movs	r2, #255	; 0xff
 8004f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d114      	bne.n	8004f92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01a      	beq.n	8004fa6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3310      	adds	r3, #16
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 f8e1 	bl	800613c <xTaskRemoveFromEventList>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d012      	beq.n	8004fa6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f80:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <xQueueGenericReset+0xcc>)
 8004f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	e009      	b.n	8004fa6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3310      	adds	r3, #16
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff fef1 	bl	8004d7e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3324      	adds	r3, #36	; 0x24
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff feec 	bl	8004d7e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004fa6:	f002 f855 	bl	8007054 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004faa:	2301      	movs	r3, #1
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	e000ed04 	.word	0xe000ed04

08004fb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08e      	sub	sp, #56	; 0x38
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fde:	bf00      	nop
 8004fe0:	e7fe      	b.n	8004fe0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ffa:	bf00      	nop
 8004ffc:	e7fe      	b.n	8004ffc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <xQueueGenericCreateStatic+0x52>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <xQueueGenericCreateStatic+0x56>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <xQueueGenericCreateStatic+0x58>
 800500e:	2300      	movs	r3, #0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	623b      	str	r3, [r7, #32]
}
 8005026:	bf00      	nop
 8005028:	e7fe      	b.n	8005028 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <xQueueGenericCreateStatic+0x7e>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <xQueueGenericCreateStatic+0x82>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <xQueueGenericCreateStatic+0x84>
 800503a:	2300      	movs	r3, #0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	61fb      	str	r3, [r7, #28]
}
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005056:	2348      	movs	r3, #72	; 0x48
 8005058:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b48      	cmp	r3, #72	; 0x48
 800505e:	d00a      	beq.n	8005076 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	61bb      	str	r3, [r7, #24]
}
 8005072:	bf00      	nop
 8005074:	e7fe      	b.n	8005074 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00d      	beq.n	800509c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005088:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800508c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	4613      	mov	r3, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 f805 	bl	80050a6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800509e:	4618      	mov	r0, r3
 80050a0:	3730      	adds	r7, #48	; 0x30
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	607a      	str	r2, [r7, #4]
 80050b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	e002      	b.n	80050c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050d4:	2101      	movs	r1, #1
 80050d6:	69b8      	ldr	r0, [r7, #24]
 80050d8:	f7ff ff06 	bl	8004ee8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050dc:	bf00      	nop
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08e      	sub	sp, #56	; 0x38
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050f2:	2300      	movs	r3, #0
 80050f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10a      	bne.n	8005116 <xQueueGenericSend+0x32>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005112:	bf00      	nop
 8005114:	e7fe      	b.n	8005114 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d103      	bne.n	8005124 <xQueueGenericSend+0x40>
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <xQueueGenericSend+0x44>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <xQueueGenericSend+0x46>
 8005128:	2300      	movs	r3, #0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <xQueueGenericSend+0x60>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005140:	bf00      	nop
 8005142:	e7fe      	b.n	8005142 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d103      	bne.n	8005152 <xQueueGenericSend+0x6e>
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <xQueueGenericSend+0x72>
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <xQueueGenericSend+0x74>
 8005156:	2300      	movs	r3, #0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <xQueueGenericSend+0x8e>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	623b      	str	r3, [r7, #32]
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005172:	f001 f9a5 	bl	80064c0 <xTaskGetSchedulerState>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d102      	bne.n	8005182 <xQueueGenericSend+0x9e>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <xQueueGenericSend+0xa2>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <xQueueGenericSend+0xa4>
 8005186:	2300      	movs	r3, #0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	61fb      	str	r3, [r7, #28]
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051a2:	f001 ff27 	bl	8006ff4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <xQueueGenericSend+0xd4>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d129      	bne.n	800520c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051be:	f000 fa07 	bl	80055d0 <prvCopyDataToQueue>
 80051c2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d010      	beq.n	80051ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	3324      	adds	r3, #36	; 0x24
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 ffb3 	bl	800613c <xTaskRemoveFromEventList>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d013      	beq.n	8005204 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80051dc:	4b3f      	ldr	r3, [pc, #252]	; (80052dc <xQueueGenericSend+0x1f8>)
 80051de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	e00a      	b.n	8005204 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051f4:	4b39      	ldr	r3, [pc, #228]	; (80052dc <xQueueGenericSend+0x1f8>)
 80051f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005204:	f001 ff26 	bl	8007054 <vPortExitCritical>
				return pdPASS;
 8005208:	2301      	movs	r3, #1
 800520a:	e063      	b.n	80052d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d103      	bne.n	800521a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005212:	f001 ff1f 	bl	8007054 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005216:	2300      	movs	r3, #0
 8005218:	e05c      	b.n	80052d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800521a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005220:	f107 0314 	add.w	r3, r7, #20
 8005224:	4618      	mov	r0, r3
 8005226:	f000 ffeb 	bl	8006200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800522a:	2301      	movs	r3, #1
 800522c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800522e:	f001 ff11 	bl	8007054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005232:	f000 fd5f 	bl	8005cf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005236:	f001 fedd 	bl	8006ff4 <vPortEnterCritical>
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005240:	b25b      	sxtb	r3, r3
 8005242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005246:	d103      	bne.n	8005250 <xQueueGenericSend+0x16c>
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005256:	b25b      	sxtb	r3, r3
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d103      	bne.n	8005266 <xQueueGenericSend+0x182>
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005266:	f001 fef5 	bl	8007054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800526a:	1d3a      	adds	r2, r7, #4
 800526c:	f107 0314 	add.w	r3, r7, #20
 8005270:	4611      	mov	r1, r2
 8005272:	4618      	mov	r0, r3
 8005274:	f000 ffda 	bl	800622c <xTaskCheckForTimeOut>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d124      	bne.n	80052c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800527e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005280:	f000 fa9e 	bl	80057c0 <prvIsQueueFull>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d018      	beq.n	80052bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	3310      	adds	r3, #16
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4611      	mov	r1, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f000 ff02 	bl	800609c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800529a:	f000 fa29 	bl	80056f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800529e:	f000 fd37 	bl	8005d10 <xTaskResumeAll>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f47f af7c 	bne.w	80051a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80052aa:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <xQueueGenericSend+0x1f8>)
 80052ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	e772      	b.n	80051a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80052bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052be:	f000 fa17 	bl	80056f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052c2:	f000 fd25 	bl	8005d10 <xTaskResumeAll>
 80052c6:	e76c      	b.n	80051a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80052c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052ca:	f000 fa11 	bl	80056f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052ce:	f000 fd1f 	bl	8005d10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80052d2:	2300      	movs	r3, #0
		}
	}
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3738      	adds	r7, #56	; 0x38
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	e000ed04 	.word	0xe000ed04

080052e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08e      	sub	sp, #56	; 0x38
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10a      	bne.n	800530e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
}
 800530a:	bf00      	nop
 800530c:	e7fe      	b.n	800530c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d103      	bne.n	800531c <xQueueGenericSendFromISR+0x3c>
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <xQueueGenericSendFromISR+0x40>
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <xQueueGenericSendFromISR+0x42>
 8005320:	2300      	movs	r3, #0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	623b      	str	r3, [r7, #32]
}
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	2b02      	cmp	r3, #2
 8005340:	d103      	bne.n	800534a <xQueueGenericSendFromISR+0x6a>
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <xQueueGenericSendFromISR+0x6e>
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <xQueueGenericSendFromISR+0x70>
 800534e:	2300      	movs	r3, #0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	61fb      	str	r3, [r7, #28]
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800536a:	f001 ff25 	bl	80071b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800536e:	f3ef 8211 	mrs	r2, BASEPRI
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	61ba      	str	r2, [r7, #24]
 8005384:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005386:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005388:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005392:	429a      	cmp	r2, r3
 8005394:	d302      	bcc.n	800539c <xQueueGenericSendFromISR+0xbc>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b02      	cmp	r3, #2
 800539a:	d12c      	bne.n	80053f6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053ac:	f000 f910 	bl	80055d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80053b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d112      	bne.n	80053e0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d016      	beq.n	80053f0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	3324      	adds	r3, #36	; 0x24
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 feb8 	bl	800613c <xTaskRemoveFromEventList>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00e      	beq.n	80053f0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00b      	beq.n	80053f0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	e007      	b.n	80053f0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053e4:	3301      	adds	r3, #1
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	b25a      	sxtb	r2, r3
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80053f0:	2301      	movs	r3, #1
 80053f2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80053f4:	e001      	b.n	80053fa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	637b      	str	r3, [r7, #52]	; 0x34
 80053fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005404:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005408:	4618      	mov	r0, r3
 800540a:	3738      	adds	r7, #56	; 0x38
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08c      	sub	sp, #48	; 0x30
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800541c:	2300      	movs	r3, #0
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10a      	bne.n	8005440 <xQueueReceive+0x30>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	623b      	str	r3, [r7, #32]
}
 800543c:	bf00      	nop
 800543e:	e7fe      	b.n	800543e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <xQueueReceive+0x3e>
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <xQueueReceive+0x42>
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <xQueueReceive+0x44>
 8005452:	2300      	movs	r3, #0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <xQueueReceive+0x5e>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	61fb      	str	r3, [r7, #28]
}
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800546e:	f001 f827 	bl	80064c0 <xTaskGetSchedulerState>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d102      	bne.n	800547e <xQueueReceive+0x6e>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <xQueueReceive+0x72>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <xQueueReceive+0x74>
 8005482:	2300      	movs	r3, #0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10a      	bne.n	800549e <xQueueReceive+0x8e>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	61bb      	str	r3, [r7, #24]
}
 800549a:	bf00      	nop
 800549c:	e7fe      	b.n	800549c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800549e:	f001 fda9 	bl	8006ff4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d01f      	beq.n	80054ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054b2:	f000 f8f7 	bl	80056a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	1e5a      	subs	r2, r3, #1
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00f      	beq.n	80054e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	3310      	adds	r3, #16
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fe36 	bl	800613c <xTaskRemoveFromEventList>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d007      	beq.n	80054e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054d6:	4b3d      	ldr	r3, [pc, #244]	; (80055cc <xQueueReceive+0x1bc>)
 80054d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054e6:	f001 fdb5 	bl	8007054 <vPortExitCritical>
				return pdPASS;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e069      	b.n	80055c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d103      	bne.n	80054fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054f4:	f001 fdae 	bl	8007054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054f8:	2300      	movs	r3, #0
 80054fa:	e062      	b.n	80055c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005502:	f107 0310 	add.w	r3, r7, #16
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fe7a 	bl	8006200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800550c:	2301      	movs	r3, #1
 800550e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005510:	f001 fda0 	bl	8007054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005514:	f000 fbee 	bl	8005cf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005518:	f001 fd6c 	bl	8006ff4 <vPortEnterCritical>
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005522:	b25b      	sxtb	r3, r3
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005528:	d103      	bne.n	8005532 <xQueueReceive+0x122>
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005538:	b25b      	sxtb	r3, r3
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553e:	d103      	bne.n	8005548 <xQueueReceive+0x138>
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005548:	f001 fd84 	bl	8007054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800554c:	1d3a      	adds	r2, r7, #4
 800554e:	f107 0310 	add.w	r3, r7, #16
 8005552:	4611      	mov	r1, r2
 8005554:	4618      	mov	r0, r3
 8005556:	f000 fe69 	bl	800622c <xTaskCheckForTimeOut>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d123      	bne.n	80055a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005562:	f000 f917 	bl	8005794 <prvIsQueueEmpty>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d017      	beq.n	800559c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	3324      	adds	r3, #36	; 0x24
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	4611      	mov	r1, r2
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fd91 	bl	800609c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800557a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800557c:	f000 f8b8 	bl	80056f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005580:	f000 fbc6 	bl	8005d10 <xTaskResumeAll>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d189      	bne.n	800549e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800558a:	4b10      	ldr	r3, [pc, #64]	; (80055cc <xQueueReceive+0x1bc>)
 800558c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	e780      	b.n	800549e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800559c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800559e:	f000 f8a7 	bl	80056f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055a2:	f000 fbb5 	bl	8005d10 <xTaskResumeAll>
 80055a6:	e77a      	b.n	800549e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80055a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055aa:	f000 f8a1 	bl	80056f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055ae:	f000 fbaf 	bl	8005d10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055b4:	f000 f8ee 	bl	8005794 <prvIsQueueEmpty>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f43f af6f 	beq.w	800549e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3730      	adds	r7, #48	; 0x30
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	e000ed04 	.word	0xe000ed04

080055d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10d      	bne.n	800560a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d14d      	bne.n	8005692 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 ff7e 	bl	80064fc <xTaskPriorityDisinherit>
 8005600:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	605a      	str	r2, [r3, #4]
 8005608:	e043      	b.n	8005692 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d119      	bne.n	8005644 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6898      	ldr	r0, [r3, #8]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	461a      	mov	r2, r3
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	f002 f80a 	bl	8007634 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005628:	441a      	add	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d32b      	bcc.n	8005692 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	609a      	str	r2, [r3, #8]
 8005642:	e026      	b.n	8005692 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68d8      	ldr	r0, [r3, #12]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	461a      	mov	r2, r3
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	f001 fff0 	bl	8007634 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	425b      	negs	r3, r3
 800565e:	441a      	add	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	429a      	cmp	r2, r3
 800566e:	d207      	bcs.n	8005680 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	425b      	negs	r3, r3
 800567a:	441a      	add	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d105      	bne.n	8005692 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	3b01      	subs	r3, #1
 8005690:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800569a:	697b      	ldr	r3, [r7, #20]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d018      	beq.n	80056e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	441a      	add	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d303      	bcc.n	80056d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68d9      	ldr	r1, [r3, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	461a      	mov	r2, r3
 80056e2:	6838      	ldr	r0, [r7, #0]
 80056e4:	f001 ffa6 	bl	8007634 <memcpy>
	}
}
 80056e8:	bf00      	nop
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056f8:	f001 fc7c 	bl	8006ff4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005702:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005704:	e011      	b.n	800572a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	2b00      	cmp	r3, #0
 800570c:	d012      	beq.n	8005734 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3324      	adds	r3, #36	; 0x24
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fd12 	bl	800613c <xTaskRemoveFromEventList>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800571e:	f000 fde7 	bl	80062f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	3b01      	subs	r3, #1
 8005726:	b2db      	uxtb	r3, r3
 8005728:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800572a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800572e:	2b00      	cmp	r3, #0
 8005730:	dce9      	bgt.n	8005706 <prvUnlockQueue+0x16>
 8005732:	e000      	b.n	8005736 <prvUnlockQueue+0x46>
					break;
 8005734:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	22ff      	movs	r2, #255	; 0xff
 800573a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800573e:	f001 fc89 	bl	8007054 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005742:	f001 fc57 	bl	8006ff4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800574c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800574e:	e011      	b.n	8005774 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d012      	beq.n	800577e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3310      	adds	r3, #16
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fced 	bl	800613c <xTaskRemoveFromEventList>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005768:	f000 fdc2 	bl	80062f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800576c:	7bbb      	ldrb	r3, [r7, #14]
 800576e:	3b01      	subs	r3, #1
 8005770:	b2db      	uxtb	r3, r3
 8005772:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005778:	2b00      	cmp	r3, #0
 800577a:	dce9      	bgt.n	8005750 <prvUnlockQueue+0x60>
 800577c:	e000      	b.n	8005780 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800577e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	22ff      	movs	r2, #255	; 0xff
 8005784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005788:	f001 fc64 	bl	8007054 <vPortExitCritical>
}
 800578c:	bf00      	nop
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800579c:	f001 fc2a 	bl	8006ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d102      	bne.n	80057ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80057a8:	2301      	movs	r3, #1
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e001      	b.n	80057b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057b2:	f001 fc4f 	bl	8007054 <vPortExitCritical>

	return xReturn;
 80057b6:	68fb      	ldr	r3, [r7, #12]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057c8:	f001 fc14 	bl	8006ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d102      	bne.n	80057de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80057d8:	2301      	movs	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	e001      	b.n	80057e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057e2:	f001 fc37 	bl	8007054 <vPortExitCritical>

	return xReturn;
 80057e6:	68fb      	ldr	r3, [r7, #12]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	e014      	b.n	800582a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005800:	4a0f      	ldr	r2, [pc, #60]	; (8005840 <vQueueAddToRegistry+0x50>)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10b      	bne.n	8005824 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800580c:	490c      	ldr	r1, [pc, #48]	; (8005840 <vQueueAddToRegistry+0x50>)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005816:	4a0a      	ldr	r2, [pc, #40]	; (8005840 <vQueueAddToRegistry+0x50>)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	4413      	add	r3, r2
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005822:	e006      	b.n	8005832 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b07      	cmp	r3, #7
 800582e:	d9e7      	bls.n	8005800 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005830:	bf00      	nop
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	20000470 	.word	0x20000470

08005844 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005854:	f001 fbce 	bl	8006ff4 <vPortEnterCritical>
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800585e:	b25b      	sxtb	r3, r3
 8005860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005864:	d103      	bne.n	800586e <vQueueWaitForMessageRestricted+0x2a>
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005874:	b25b      	sxtb	r3, r3
 8005876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587a:	d103      	bne.n	8005884 <vQueueWaitForMessageRestricted+0x40>
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005884:	f001 fbe6 	bl	8007054 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	2b00      	cmp	r3, #0
 800588e:	d106      	bne.n	800589e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	3324      	adds	r3, #36	; 0x24
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	68b9      	ldr	r1, [r7, #8]
 8005898:	4618      	mov	r0, r3
 800589a:	f000 fc23 	bl	80060e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800589e:	6978      	ldr	r0, [r7, #20]
 80058a0:	f7ff ff26 	bl	80056f0 <prvUnlockQueue>
	}
 80058a4:	bf00      	nop
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08e      	sub	sp, #56	; 0x38
 80058b0:	af04      	add	r7, sp, #16
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	623b      	str	r3, [r7, #32]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	61fb      	str	r3, [r7, #28]
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058f2:	2354      	movs	r3, #84	; 0x54
 80058f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	2b54      	cmp	r3, #84	; 0x54
 80058fa:	d00a      	beq.n	8005912 <xTaskCreateStatic+0x66>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	61bb      	str	r3, [r7, #24]
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01e      	beq.n	8005956 <xTaskCreateStatic+0xaa>
 8005918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591a:	2b00      	cmp	r3, #0
 800591c:	d01b      	beq.n	8005956 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005926:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	2202      	movs	r2, #2
 800592c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005930:	2300      	movs	r3, #0
 8005932:	9303      	str	r3, [sp, #12]
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	9302      	str	r3, [sp, #8]
 8005938:	f107 0314 	add.w	r3, r7, #20
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f850 	bl	80059ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800594e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005950:	f000 f8cc 	bl	8005aec <prvAddNewTaskToReadyList>
 8005954:	e001      	b.n	800595a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800595a:	697b      	ldr	r3, [r7, #20]
	}
 800595c:	4618      	mov	r0, r3
 800595e:	3728      	adds	r7, #40	; 0x28
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08c      	sub	sp, #48	; 0x30
 8005968:	af04      	add	r7, sp, #16
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	4613      	mov	r3, r2
 8005972:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4618      	mov	r0, r3
 800597a:	f001 fc5d 	bl	8007238 <pvPortMalloc>
 800597e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00e      	beq.n	80059a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005986:	2054      	movs	r0, #84	; 0x54
 8005988:	f001 fc56 	bl	8007238 <pvPortMalloc>
 800598c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	631a      	str	r2, [r3, #48]	; 0x30
 800599a:	e005      	b.n	80059a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800599c:	6978      	ldr	r0, [r7, #20]
 800599e:	f001 fd0f 	bl	80073c0 <vPortFree>
 80059a2:	e001      	b.n	80059a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059a4:	2300      	movs	r3, #0
 80059a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d017      	beq.n	80059de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059b6:	88fa      	ldrh	r2, [r7, #6]
 80059b8:	2300      	movs	r3, #0
 80059ba:	9303      	str	r3, [sp, #12]
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	9302      	str	r3, [sp, #8]
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	68b9      	ldr	r1, [r7, #8]
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 f80e 	bl	80059ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059d2:	69f8      	ldr	r0, [r7, #28]
 80059d4:	f000 f88a 	bl	8005aec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059d8:	2301      	movs	r3, #1
 80059da:	61bb      	str	r3, [r7, #24]
 80059dc:	e002      	b.n	80059e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059de:	f04f 33ff 	mov.w	r3, #4294967295
 80059e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059e4:	69bb      	ldr	r3, [r7, #24]
	}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3720      	adds	r7, #32
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b088      	sub	sp, #32
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a06:	3b01      	subs	r3, #1
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	f023 0307 	bic.w	r3, r3, #7
 8005a14:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	617b      	str	r3, [r7, #20]
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a36:	2300      	movs	r3, #0
 8005a38:	61fb      	str	r3, [r7, #28]
 8005a3a:	e012      	b.n	8005a62 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	7819      	ldrb	r1, [r3, #0]
 8005a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	3334      	adds	r3, #52	; 0x34
 8005a4c:	460a      	mov	r2, r1
 8005a4e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	4413      	add	r3, r2
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d006      	beq.n	8005a6a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	2b0f      	cmp	r3, #15
 8005a66:	d9e9      	bls.n	8005a3c <prvInitialiseNewTask+0x4e>
 8005a68:	e000      	b.n	8005a6c <prvInitialiseNewTask+0x7e>
		{
			break;
 8005a6a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	2b06      	cmp	r3, #6
 8005a78:	d901      	bls.n	8005a7e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a7a:	2306      	movs	r3, #6
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a82:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a88:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	3304      	adds	r3, #4
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff f992 	bl	8004dbe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	3318      	adds	r3, #24
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff f98d 	bl	8004dbe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	f1c3 0207 	rsb	r2, r3, #7
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	2200      	movs	r2, #0
 8005abe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	68f9      	ldr	r1, [r7, #12]
 8005acc:	69b8      	ldr	r0, [r7, #24]
 8005ace:	f001 f967 	bl	8006da0 <pxPortInitialiseStack>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ae4:	bf00      	nop
 8005ae6:	3720      	adds	r7, #32
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005af4:	f001 fa7e 	bl	8006ff4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005af8:	4b2a      	ldr	r3, [pc, #168]	; (8005ba4 <prvAddNewTaskToReadyList+0xb8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3301      	adds	r3, #1
 8005afe:	4a29      	ldr	r2, [pc, #164]	; (8005ba4 <prvAddNewTaskToReadyList+0xb8>)
 8005b00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b02:	4b29      	ldr	r3, [pc, #164]	; (8005ba8 <prvAddNewTaskToReadyList+0xbc>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b0a:	4a27      	ldr	r2, [pc, #156]	; (8005ba8 <prvAddNewTaskToReadyList+0xbc>)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b10:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <prvAddNewTaskToReadyList+0xb8>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d110      	bne.n	8005b3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b18:	f000 fc0e 	bl	8006338 <prvInitialiseTaskLists>
 8005b1c:	e00d      	b.n	8005b3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b1e:	4b23      	ldr	r3, [pc, #140]	; (8005bac <prvAddNewTaskToReadyList+0xc0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b26:	4b20      	ldr	r3, [pc, #128]	; (8005ba8 <prvAddNewTaskToReadyList+0xbc>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d802      	bhi.n	8005b3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b34:	4a1c      	ldr	r2, [pc, #112]	; (8005ba8 <prvAddNewTaskToReadyList+0xbc>)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b3a:	4b1d      	ldr	r3, [pc, #116]	; (8005bb0 <prvAddNewTaskToReadyList+0xc4>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <prvAddNewTaskToReadyList+0xc4>)
 8005b42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	2201      	movs	r2, #1
 8005b4a:	409a      	lsls	r2, r3
 8005b4c:	4b19      	ldr	r3, [pc, #100]	; (8005bb4 <prvAddNewTaskToReadyList+0xc8>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <prvAddNewTaskToReadyList+0xc8>)
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <prvAddNewTaskToReadyList+0xcc>)
 8005b64:	441a      	add	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	f7ff f933 	bl	8004dd8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b72:	f001 fa6f 	bl	8007054 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b76:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <prvAddNewTaskToReadyList+0xc0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00e      	beq.n	8005b9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <prvAddNewTaskToReadyList+0xbc>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d207      	bcs.n	8005b9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <prvAddNewTaskToReadyList+0xd0>)
 8005b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b9c:	bf00      	nop
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	200005b0 	.word	0x200005b0
 8005ba8:	200004b0 	.word	0x200004b0
 8005bac:	200005bc 	.word	0x200005bc
 8005bb0:	200005cc 	.word	0x200005cc
 8005bb4:	200005b8 	.word	0x200005b8
 8005bb8:	200004b4 	.word	0x200004b4
 8005bbc:	e000ed04 	.word	0xe000ed04

08005bc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d017      	beq.n	8005c02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bd2:	4b13      	ldr	r3, [pc, #76]	; (8005c20 <vTaskDelay+0x60>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <vTaskDelay+0x30>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	60bb      	str	r3, [r7, #8]
}
 8005bec:	bf00      	nop
 8005bee:	e7fe      	b.n	8005bee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005bf0:	f000 f880 	bl	8005cf4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fd06 	bl	8006608 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bfc:	f000 f888 	bl	8005d10 <xTaskResumeAll>
 8005c00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d107      	bne.n	8005c18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005c08:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <vTaskDelay+0x64>)
 8005c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c18:	bf00      	nop
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	200005d8 	.word	0x200005d8
 8005c24:	e000ed04 	.word	0xe000ed04

08005c28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	; 0x28
 8005c2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c36:	463a      	mov	r2, r7
 8005c38:	1d39      	adds	r1, r7, #4
 8005c3a:	f107 0308 	add.w	r3, r7, #8
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fa fac6 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	9202      	str	r2, [sp, #8]
 8005c4c:	9301      	str	r3, [sp, #4]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	2300      	movs	r3, #0
 8005c54:	460a      	mov	r2, r1
 8005c56:	4921      	ldr	r1, [pc, #132]	; (8005cdc <vTaskStartScheduler+0xb4>)
 8005c58:	4821      	ldr	r0, [pc, #132]	; (8005ce0 <vTaskStartScheduler+0xb8>)
 8005c5a:	f7ff fe27 	bl	80058ac <xTaskCreateStatic>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	4a20      	ldr	r2, [pc, #128]	; (8005ce4 <vTaskStartScheduler+0xbc>)
 8005c62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c64:	4b1f      	ldr	r3, [pc, #124]	; (8005ce4 <vTaskStartScheduler+0xbc>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	e001      	b.n	8005c76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d102      	bne.n	8005c82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c7c:	f000 fd2a 	bl	80066d4 <xTimerCreateTimerTask>
 8005c80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d116      	bne.n	8005cb6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	613b      	str	r3, [r7, #16]
}
 8005c9a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c9c:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <vTaskStartScheduler+0xc0>)
 8005c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ca4:	4b11      	ldr	r3, [pc, #68]	; (8005cec <vTaskStartScheduler+0xc4>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005caa:	4b11      	ldr	r3, [pc, #68]	; (8005cf0 <vTaskStartScheduler+0xc8>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cb0:	f001 f8fe 	bl	8006eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cb4:	e00e      	b.n	8005cd4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbc:	d10a      	bne.n	8005cd4 <vTaskStartScheduler+0xac>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	60fb      	str	r3, [r7, #12]
}
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <vTaskStartScheduler+0xaa>
}
 8005cd4:	bf00      	nop
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	080076f4 	.word	0x080076f4
 8005ce0:	08006309 	.word	0x08006309
 8005ce4:	200005d4 	.word	0x200005d4
 8005ce8:	200005d0 	.word	0x200005d0
 8005cec:	200005bc 	.word	0x200005bc
 8005cf0:	200005b4 	.word	0x200005b4

08005cf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005cf8:	4b04      	ldr	r3, [pc, #16]	; (8005d0c <vTaskSuspendAll+0x18>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	4a03      	ldr	r2, [pc, #12]	; (8005d0c <vTaskSuspendAll+0x18>)
 8005d00:	6013      	str	r3, [r2, #0]
}
 8005d02:	bf00      	nop
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	200005d8 	.word	0x200005d8

08005d10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d1e:	4b41      	ldr	r3, [pc, #260]	; (8005e24 <xTaskResumeAll+0x114>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10a      	bne.n	8005d3c <xTaskResumeAll+0x2c>
	__asm volatile
 8005d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	603b      	str	r3, [r7, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	e7fe      	b.n	8005d3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d3c:	f001 f95a 	bl	8006ff4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d40:	4b38      	ldr	r3, [pc, #224]	; (8005e24 <xTaskResumeAll+0x114>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	4a37      	ldr	r2, [pc, #220]	; (8005e24 <xTaskResumeAll+0x114>)
 8005d48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d4a:	4b36      	ldr	r3, [pc, #216]	; (8005e24 <xTaskResumeAll+0x114>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d161      	bne.n	8005e16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d52:	4b35      	ldr	r3, [pc, #212]	; (8005e28 <xTaskResumeAll+0x118>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d05d      	beq.n	8005e16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d5a:	e02e      	b.n	8005dba <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005d5c:	4b33      	ldr	r3, [pc, #204]	; (8005e2c <xTaskResumeAll+0x11c>)
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3318      	adds	r3, #24
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff f892 	bl	8004e92 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3304      	adds	r3, #4
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff f88d 	bl	8004e92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	409a      	lsls	r2, r3
 8005d80:	4b2b      	ldr	r3, [pc, #172]	; (8005e30 <xTaskResumeAll+0x120>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	4a2a      	ldr	r2, [pc, #168]	; (8005e30 <xTaskResumeAll+0x120>)
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8e:	4613      	mov	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4a27      	ldr	r2, [pc, #156]	; (8005e34 <xTaskResumeAll+0x124>)
 8005d98:	441a      	add	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4610      	mov	r0, r2
 8005da2:	f7ff f819 	bl	8004dd8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005daa:	4b23      	ldr	r3, [pc, #140]	; (8005e38 <xTaskResumeAll+0x128>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d302      	bcc.n	8005dba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005db4:	4b21      	ldr	r3, [pc, #132]	; (8005e3c <xTaskResumeAll+0x12c>)
 8005db6:	2201      	movs	r2, #1
 8005db8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dba:	4b1c      	ldr	r3, [pc, #112]	; (8005e2c <xTaskResumeAll+0x11c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1cc      	bne.n	8005d5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dc8:	f000 fb54 	bl	8006474 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005dcc:	4b1c      	ldr	r3, [pc, #112]	; (8005e40 <xTaskResumeAll+0x130>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d010      	beq.n	8005dfa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dd8:	f000 f846 	bl	8005e68 <xTaskIncrementTick>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005de2:	4b16      	ldr	r3, [pc, #88]	; (8005e3c <xTaskResumeAll+0x12c>)
 8005de4:	2201      	movs	r2, #1
 8005de6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1f1      	bne.n	8005dd8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005df4:	4b12      	ldr	r3, [pc, #72]	; (8005e40 <xTaskResumeAll+0x130>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005dfa:	4b10      	ldr	r3, [pc, #64]	; (8005e3c <xTaskResumeAll+0x12c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e02:	2301      	movs	r3, #1
 8005e04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e06:	4b0f      	ldr	r3, [pc, #60]	; (8005e44 <xTaskResumeAll+0x134>)
 8005e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e16:	f001 f91d 	bl	8007054 <vPortExitCritical>

	return xAlreadyYielded;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	200005d8 	.word	0x200005d8
 8005e28:	200005b0 	.word	0x200005b0
 8005e2c:	20000570 	.word	0x20000570
 8005e30:	200005b8 	.word	0x200005b8
 8005e34:	200004b4 	.word	0x200004b4
 8005e38:	200004b0 	.word	0x200004b0
 8005e3c:	200005c4 	.word	0x200005c4
 8005e40:	200005c0 	.word	0x200005c0
 8005e44:	e000ed04 	.word	0xe000ed04

08005e48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e4e:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <xTaskGetTickCount+0x1c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e54:	687b      	ldr	r3, [r7, #4]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	200005b4 	.word	0x200005b4

08005e68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e72:	4b51      	ldr	r3, [pc, #324]	; (8005fb8 <xTaskIncrementTick+0x150>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f040 808d 	bne.w	8005f96 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e7c:	4b4f      	ldr	r3, [pc, #316]	; (8005fbc <xTaskIncrementTick+0x154>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3301      	adds	r3, #1
 8005e82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e84:	4a4d      	ldr	r2, [pc, #308]	; (8005fbc <xTaskIncrementTick+0x154>)
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d120      	bne.n	8005ed2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e90:	4b4b      	ldr	r3, [pc, #300]	; (8005fc0 <xTaskIncrementTick+0x158>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	603b      	str	r3, [r7, #0]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <xTaskIncrementTick+0x46>
 8005eb0:	4b43      	ldr	r3, [pc, #268]	; (8005fc0 <xTaskIncrementTick+0x158>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	4b43      	ldr	r3, [pc, #268]	; (8005fc4 <xTaskIncrementTick+0x15c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a41      	ldr	r2, [pc, #260]	; (8005fc0 <xTaskIncrementTick+0x158>)
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	4a41      	ldr	r2, [pc, #260]	; (8005fc4 <xTaskIncrementTick+0x15c>)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	4b40      	ldr	r3, [pc, #256]	; (8005fc8 <xTaskIncrementTick+0x160>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	4a3f      	ldr	r2, [pc, #252]	; (8005fc8 <xTaskIncrementTick+0x160>)
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	f000 fad1 	bl	8006474 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ed2:	4b3e      	ldr	r3, [pc, #248]	; (8005fcc <xTaskIncrementTick+0x164>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d34d      	bcc.n	8005f78 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005edc:	4b38      	ldr	r3, [pc, #224]	; (8005fc0 <xTaskIncrementTick+0x158>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <xTaskIncrementTick+0x82>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <xTaskIncrementTick+0x84>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d004      	beq.n	8005efa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef0:	4b36      	ldr	r3, [pc, #216]	; (8005fcc <xTaskIncrementTick+0x164>)
 8005ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef6:	601a      	str	r2, [r3, #0]
					break;
 8005ef8:	e03e      	b.n	8005f78 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005efa:	4b31      	ldr	r3, [pc, #196]	; (8005fc0 <xTaskIncrementTick+0x158>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d203      	bcs.n	8005f1a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f12:	4a2e      	ldr	r2, [pc, #184]	; (8005fcc <xTaskIncrementTick+0x164>)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6013      	str	r3, [r2, #0]
						break;
 8005f18:	e02e      	b.n	8005f78 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fe ffb7 	bl	8004e92 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d004      	beq.n	8005f36 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	3318      	adds	r3, #24
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fe ffae 	bl	8004e92 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	409a      	lsls	r2, r3
 8005f3e:	4b24      	ldr	r3, [pc, #144]	; (8005fd0 <xTaskIncrementTick+0x168>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	4a22      	ldr	r2, [pc, #136]	; (8005fd0 <xTaskIncrementTick+0x168>)
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4a1f      	ldr	r2, [pc, #124]	; (8005fd4 <xTaskIncrementTick+0x16c>)
 8005f56:	441a      	add	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	f7fe ff3a 	bl	8004dd8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f68:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <xTaskIncrementTick+0x170>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d3b4      	bcc.n	8005edc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f72:	2301      	movs	r3, #1
 8005f74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f76:	e7b1      	b.n	8005edc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f78:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <xTaskIncrementTick+0x170>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7e:	4915      	ldr	r1, [pc, #84]	; (8005fd4 <xTaskIncrementTick+0x16c>)
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d907      	bls.n	8005fa0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005f90:	2301      	movs	r3, #1
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	e004      	b.n	8005fa0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f96:	4b11      	ldr	r3, [pc, #68]	; (8005fdc <xTaskIncrementTick+0x174>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	4a0f      	ldr	r2, [pc, #60]	; (8005fdc <xTaskIncrementTick+0x174>)
 8005f9e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005fa0:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <xTaskIncrementTick+0x178>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005fac:	697b      	ldr	r3, [r7, #20]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	200005d8 	.word	0x200005d8
 8005fbc:	200005b4 	.word	0x200005b4
 8005fc0:	20000568 	.word	0x20000568
 8005fc4:	2000056c 	.word	0x2000056c
 8005fc8:	200005c8 	.word	0x200005c8
 8005fcc:	200005d0 	.word	0x200005d0
 8005fd0:	200005b8 	.word	0x200005b8
 8005fd4:	200004b4 	.word	0x200004b4
 8005fd8:	200004b0 	.word	0x200004b0
 8005fdc:	200005c0 	.word	0x200005c0
 8005fe0:	200005c4 	.word	0x200005c4

08005fe4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fea:	4b27      	ldr	r3, [pc, #156]	; (8006088 <vTaskSwitchContext+0xa4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ff2:	4b26      	ldr	r3, [pc, #152]	; (800608c <vTaskSwitchContext+0xa8>)
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ff8:	e03f      	b.n	800607a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005ffa:	4b24      	ldr	r3, [pc, #144]	; (800608c <vTaskSwitchContext+0xa8>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006000:	4b23      	ldr	r3, [pc, #140]	; (8006090 <vTaskSwitchContext+0xac>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	fab3 f383 	clz	r3, r3
 800600c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800600e:	7afb      	ldrb	r3, [r7, #11]
 8006010:	f1c3 031f 	rsb	r3, r3, #31
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	491f      	ldr	r1, [pc, #124]	; (8006094 <vTaskSwitchContext+0xb0>)
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	440b      	add	r3, r1
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <vTaskSwitchContext+0x5c>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	607b      	str	r3, [r7, #4]
}
 800603c:	bf00      	nop
 800603e:	e7fe      	b.n	800603e <vTaskSwitchContext+0x5a>
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4a12      	ldr	r2, [pc, #72]	; (8006094 <vTaskSwitchContext+0xb0>)
 800604c:	4413      	add	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	605a      	str	r2, [r3, #4]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	3308      	adds	r3, #8
 8006062:	429a      	cmp	r2, r3
 8006064:	d104      	bne.n	8006070 <vTaskSwitchContext+0x8c>
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	605a      	str	r2, [r3, #4]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	4a08      	ldr	r2, [pc, #32]	; (8006098 <vTaskSwitchContext+0xb4>)
 8006078:	6013      	str	r3, [r2, #0]
}
 800607a:	bf00      	nop
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	200005d8 	.word	0x200005d8
 800608c:	200005c4 	.word	0x200005c4
 8006090:	200005b8 	.word	0x200005b8
 8006094:	200004b4 	.word	0x200004b4
 8006098:	200004b0 	.word	0x200004b0

0800609c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10a      	bne.n	80060c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	60fb      	str	r3, [r7, #12]
}
 80060be:	bf00      	nop
 80060c0:	e7fe      	b.n	80060c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060c2:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <vTaskPlaceOnEventList+0x44>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3318      	adds	r3, #24
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fe fea8 	bl	8004e20 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060d0:	2101      	movs	r1, #1
 80060d2:	6838      	ldr	r0, [r7, #0]
 80060d4:	f000 fa98 	bl	8006608 <prvAddCurrentTaskToDelayedList>
}
 80060d8:	bf00      	nop
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	200004b0 	.word	0x200004b0

080060e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10a      	bne.n	800610c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	617b      	str	r3, [r7, #20]
}
 8006108:	bf00      	nop
 800610a:	e7fe      	b.n	800610a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800610c:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <vTaskPlaceOnEventListRestricted+0x54>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3318      	adds	r3, #24
 8006112:	4619      	mov	r1, r3
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f7fe fe5f 	bl	8004dd8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006120:	f04f 33ff 	mov.w	r3, #4294967295
 8006124:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	68b8      	ldr	r0, [r7, #8]
 800612a:	f000 fa6d 	bl	8006608 <prvAddCurrentTaskToDelayedList>
	}
 800612e:	bf00      	nop
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	200004b0 	.word	0x200004b0

0800613c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10a      	bne.n	8006168 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60fb      	str	r3, [r7, #12]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	3318      	adds	r3, #24
 800616c:	4618      	mov	r0, r3
 800616e:	f7fe fe90 	bl	8004e92 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006172:	4b1d      	ldr	r3, [pc, #116]	; (80061e8 <xTaskRemoveFromEventList+0xac>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d11c      	bne.n	80061b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	3304      	adds	r3, #4
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe fe87 	bl	8004e92 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	2201      	movs	r2, #1
 800618a:	409a      	lsls	r2, r3
 800618c:	4b17      	ldr	r3, [pc, #92]	; (80061ec <xTaskRemoveFromEventList+0xb0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4313      	orrs	r3, r2
 8006192:	4a16      	ldr	r2, [pc, #88]	; (80061ec <xTaskRemoveFromEventList+0xb0>)
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619a:	4613      	mov	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4a13      	ldr	r2, [pc, #76]	; (80061f0 <xTaskRemoveFromEventList+0xb4>)
 80061a4:	441a      	add	r2, r3
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3304      	adds	r3, #4
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f7fe fe13 	bl	8004dd8 <vListInsertEnd>
 80061b2:	e005      	b.n	80061c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	3318      	adds	r3, #24
 80061b8:	4619      	mov	r1, r3
 80061ba:	480e      	ldr	r0, [pc, #56]	; (80061f4 <xTaskRemoveFromEventList+0xb8>)
 80061bc:	f7fe fe0c 	bl	8004dd8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c4:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <xTaskRemoveFromEventList+0xbc>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d905      	bls.n	80061da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061ce:	2301      	movs	r3, #1
 80061d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <xTaskRemoveFromEventList+0xc0>)
 80061d4:	2201      	movs	r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	e001      	b.n	80061de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80061de:	697b      	ldr	r3, [r7, #20]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	200005d8 	.word	0x200005d8
 80061ec:	200005b8 	.word	0x200005b8
 80061f0:	200004b4 	.word	0x200004b4
 80061f4:	20000570 	.word	0x20000570
 80061f8:	200004b0 	.word	0x200004b0
 80061fc:	200005c4 	.word	0x200005c4

08006200 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006208:	4b06      	ldr	r3, [pc, #24]	; (8006224 <vTaskInternalSetTimeOutState+0x24>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006210:	4b05      	ldr	r3, [pc, #20]	; (8006228 <vTaskInternalSetTimeOutState+0x28>)
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	605a      	str	r2, [r3, #4]
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	200005c8 	.word	0x200005c8
 8006228:	200005b4 	.word	0x200005b4

0800622c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b088      	sub	sp, #32
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10a      	bne.n	8006252 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	613b      	str	r3, [r7, #16]
}
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10a      	bne.n	800626e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	60fb      	str	r3, [r7, #12]
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800626e:	f000 fec1 	bl	8006ff4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006272:	4b1d      	ldr	r3, [pc, #116]	; (80062e8 <xTaskCheckForTimeOut+0xbc>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628a:	d102      	bne.n	8006292 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800628c:	2300      	movs	r3, #0
 800628e:	61fb      	str	r3, [r7, #28]
 8006290:	e023      	b.n	80062da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4b15      	ldr	r3, [pc, #84]	; (80062ec <xTaskCheckForTimeOut+0xc0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	429a      	cmp	r2, r3
 800629c:	d007      	beq.n	80062ae <xTaskCheckForTimeOut+0x82>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d302      	bcc.n	80062ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062a8:	2301      	movs	r3, #1
 80062aa:	61fb      	str	r3, [r7, #28]
 80062ac:	e015      	b.n	80062da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d20b      	bcs.n	80062d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	1ad2      	subs	r2, r2, r3
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff ff9b 	bl	8006200 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80062ca:	2300      	movs	r3, #0
 80062cc:	61fb      	str	r3, [r7, #28]
 80062ce:	e004      	b.n	80062da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80062d6:	2301      	movs	r3, #1
 80062d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80062da:	f000 febb 	bl	8007054 <vPortExitCritical>

	return xReturn;
 80062de:	69fb      	ldr	r3, [r7, #28]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3720      	adds	r7, #32
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	200005b4 	.word	0x200005b4
 80062ec:	200005c8 	.word	0x200005c8

080062f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062f4:	4b03      	ldr	r3, [pc, #12]	; (8006304 <vTaskMissedYield+0x14>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
}
 80062fa:	bf00      	nop
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	200005c4 	.word	0x200005c4

08006308 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006310:	f000 f852 	bl	80063b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006314:	4b06      	ldr	r3, [pc, #24]	; (8006330 <prvIdleTask+0x28>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d9f9      	bls.n	8006310 <prvIdleTask+0x8>
			{
				taskYIELD();
 800631c:	4b05      	ldr	r3, [pc, #20]	; (8006334 <prvIdleTask+0x2c>)
 800631e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800632c:	e7f0      	b.n	8006310 <prvIdleTask+0x8>
 800632e:	bf00      	nop
 8006330:	200004b4 	.word	0x200004b4
 8006334:	e000ed04 	.word	0xe000ed04

08006338 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800633e:	2300      	movs	r3, #0
 8006340:	607b      	str	r3, [r7, #4]
 8006342:	e00c      	b.n	800635e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4a12      	ldr	r2, [pc, #72]	; (8006398 <prvInitialiseTaskLists+0x60>)
 8006350:	4413      	add	r3, r2
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe fd13 	bl	8004d7e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3301      	adds	r3, #1
 800635c:	607b      	str	r3, [r7, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b06      	cmp	r3, #6
 8006362:	d9ef      	bls.n	8006344 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006364:	480d      	ldr	r0, [pc, #52]	; (800639c <prvInitialiseTaskLists+0x64>)
 8006366:	f7fe fd0a 	bl	8004d7e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800636a:	480d      	ldr	r0, [pc, #52]	; (80063a0 <prvInitialiseTaskLists+0x68>)
 800636c:	f7fe fd07 	bl	8004d7e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006370:	480c      	ldr	r0, [pc, #48]	; (80063a4 <prvInitialiseTaskLists+0x6c>)
 8006372:	f7fe fd04 	bl	8004d7e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006376:	480c      	ldr	r0, [pc, #48]	; (80063a8 <prvInitialiseTaskLists+0x70>)
 8006378:	f7fe fd01 	bl	8004d7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800637c:	480b      	ldr	r0, [pc, #44]	; (80063ac <prvInitialiseTaskLists+0x74>)
 800637e:	f7fe fcfe 	bl	8004d7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006382:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <prvInitialiseTaskLists+0x78>)
 8006384:	4a05      	ldr	r2, [pc, #20]	; (800639c <prvInitialiseTaskLists+0x64>)
 8006386:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006388:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <prvInitialiseTaskLists+0x7c>)
 800638a:	4a05      	ldr	r2, [pc, #20]	; (80063a0 <prvInitialiseTaskLists+0x68>)
 800638c:	601a      	str	r2, [r3, #0]
}
 800638e:	bf00      	nop
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	200004b4 	.word	0x200004b4
 800639c:	20000540 	.word	0x20000540
 80063a0:	20000554 	.word	0x20000554
 80063a4:	20000570 	.word	0x20000570
 80063a8:	20000584 	.word	0x20000584
 80063ac:	2000059c 	.word	0x2000059c
 80063b0:	20000568 	.word	0x20000568
 80063b4:	2000056c 	.word	0x2000056c

080063b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063be:	e019      	b.n	80063f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063c0:	f000 fe18 	bl	8006ff4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80063c4:	4b10      	ldr	r3, [pc, #64]	; (8006408 <prvCheckTasksWaitingTermination+0x50>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe fd5e 	bl	8004e92 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063d6:	4b0d      	ldr	r3, [pc, #52]	; (800640c <prvCheckTasksWaitingTermination+0x54>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3b01      	subs	r3, #1
 80063dc:	4a0b      	ldr	r2, [pc, #44]	; (800640c <prvCheckTasksWaitingTermination+0x54>)
 80063de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063e0:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <prvCheckTasksWaitingTermination+0x58>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	4a0a      	ldr	r2, [pc, #40]	; (8006410 <prvCheckTasksWaitingTermination+0x58>)
 80063e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063ea:	f000 fe33 	bl	8007054 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f810 	bl	8006414 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063f4:	4b06      	ldr	r3, [pc, #24]	; (8006410 <prvCheckTasksWaitingTermination+0x58>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e1      	bne.n	80063c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063fc:	bf00      	nop
 80063fe:	bf00      	nop
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20000584 	.word	0x20000584
 800640c:	200005b0 	.word	0x200005b0
 8006410:	20000598 	.word	0x20000598

08006414 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006422:	2b00      	cmp	r3, #0
 8006424:	d108      	bne.n	8006438 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642a:	4618      	mov	r0, r3
 800642c:	f000 ffc8 	bl	80073c0 <vPortFree>
				vPortFree( pxTCB );
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 ffc5 	bl	80073c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006436:	e018      	b.n	800646a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800643e:	2b01      	cmp	r3, #1
 8006440:	d103      	bne.n	800644a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 ffbc 	bl	80073c0 <vPortFree>
	}
 8006448:	e00f      	b.n	800646a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006450:	2b02      	cmp	r3, #2
 8006452:	d00a      	beq.n	800646a <prvDeleteTCB+0x56>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	60fb      	str	r3, [r7, #12]
}
 8006466:	bf00      	nop
 8006468:	e7fe      	b.n	8006468 <prvDeleteTCB+0x54>
	}
 800646a:	bf00      	nop
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
	...

08006474 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800647a:	4b0f      	ldr	r3, [pc, #60]	; (80064b8 <prvResetNextTaskUnblockTime+0x44>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <prvResetNextTaskUnblockTime+0x14>
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <prvResetNextTaskUnblockTime+0x16>
 8006488:	2300      	movs	r3, #0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d004      	beq.n	8006498 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800648e:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <prvResetNextTaskUnblockTime+0x48>)
 8006490:	f04f 32ff 	mov.w	r2, #4294967295
 8006494:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006496:	e008      	b.n	80064aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006498:	4b07      	ldr	r3, [pc, #28]	; (80064b8 <prvResetNextTaskUnblockTime+0x44>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	4a05      	ldr	r2, [pc, #20]	; (80064bc <prvResetNextTaskUnblockTime+0x48>)
 80064a8:	6013      	str	r3, [r2, #0]
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	20000568 	.word	0x20000568
 80064bc:	200005d0 	.word	0x200005d0

080064c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064c6:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <xTaskGetSchedulerState+0x34>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d102      	bne.n	80064d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064ce:	2301      	movs	r3, #1
 80064d0:	607b      	str	r3, [r7, #4]
 80064d2:	e008      	b.n	80064e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064d4:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <xTaskGetSchedulerState+0x38>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d102      	bne.n	80064e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80064dc:	2302      	movs	r3, #2
 80064de:	607b      	str	r3, [r7, #4]
 80064e0:	e001      	b.n	80064e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80064e2:	2300      	movs	r3, #0
 80064e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80064e6:	687b      	ldr	r3, [r7, #4]
	}
 80064e8:	4618      	mov	r0, r3
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	200005bc 	.word	0x200005bc
 80064f8:	200005d8 	.word	0x200005d8

080064fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006508:	2300      	movs	r3, #0
 800650a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d06e      	beq.n	80065f0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006512:	4b3a      	ldr	r3, [pc, #232]	; (80065fc <xTaskPriorityDisinherit+0x100>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	429a      	cmp	r2, r3
 800651a:	d00a      	beq.n	8006532 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	60fb      	str	r3, [r7, #12]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	60bb      	str	r3, [r7, #8]
}
 800654c:	bf00      	nop
 800654e:	e7fe      	b.n	800654e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006554:	1e5a      	subs	r2, r3, #1
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006562:	429a      	cmp	r2, r3
 8006564:	d044      	beq.n	80065f0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800656a:	2b00      	cmp	r3, #0
 800656c:	d140      	bne.n	80065f0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	3304      	adds	r3, #4
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe fc8d 	bl	8004e92 <uxListRemove>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d115      	bne.n	80065aa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006582:	491f      	ldr	r1, [pc, #124]	; (8006600 <xTaskPriorityDisinherit+0x104>)
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	440b      	add	r3, r1
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <xTaskPriorityDisinherit+0xae>
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	2201      	movs	r2, #1
 800659a:	fa02 f303 	lsl.w	r3, r2, r3
 800659e:	43da      	mvns	r2, r3
 80065a0:	4b18      	ldr	r3, [pc, #96]	; (8006604 <xTaskPriorityDisinherit+0x108>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4013      	ands	r3, r2
 80065a6:	4a17      	ldr	r2, [pc, #92]	; (8006604 <xTaskPriorityDisinherit+0x108>)
 80065a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b6:	f1c3 0207 	rsb	r2, r3, #7
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c2:	2201      	movs	r2, #1
 80065c4:	409a      	lsls	r2, r3
 80065c6:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <xTaskPriorityDisinherit+0x108>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	4a0d      	ldr	r2, [pc, #52]	; (8006604 <xTaskPriorityDisinherit+0x108>)
 80065ce:	6013      	str	r3, [r2, #0]
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d4:	4613      	mov	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4a08      	ldr	r2, [pc, #32]	; (8006600 <xTaskPriorityDisinherit+0x104>)
 80065de:	441a      	add	r2, r3
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4619      	mov	r1, r3
 80065e6:	4610      	mov	r0, r2
 80065e8:	f7fe fbf6 	bl	8004dd8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065ec:	2301      	movs	r3, #1
 80065ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065f0:	697b      	ldr	r3, [r7, #20]
	}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	200004b0 	.word	0x200004b0
 8006600:	200004b4 	.word	0x200004b4
 8006604:	200005b8 	.word	0x200005b8

08006608 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006612:	4b29      	ldr	r3, [pc, #164]	; (80066b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006618:	4b28      	ldr	r3, [pc, #160]	; (80066bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3304      	adds	r3, #4
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe fc37 	bl	8004e92 <uxListRemove>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10b      	bne.n	8006642 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800662a:	4b24      	ldr	r3, [pc, #144]	; (80066bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	2201      	movs	r2, #1
 8006632:	fa02 f303 	lsl.w	r3, r2, r3
 8006636:	43da      	mvns	r2, r3
 8006638:	4b21      	ldr	r3, [pc, #132]	; (80066c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4013      	ands	r3, r2
 800663e:	4a20      	ldr	r2, [pc, #128]	; (80066c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006640:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d10a      	bne.n	8006660 <prvAddCurrentTaskToDelayedList+0x58>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006650:	4b1a      	ldr	r3, [pc, #104]	; (80066bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3304      	adds	r3, #4
 8006656:	4619      	mov	r1, r3
 8006658:	481a      	ldr	r0, [pc, #104]	; (80066c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800665a:	f7fe fbbd 	bl	8004dd8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800665e:	e026      	b.n	80066ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4413      	add	r3, r2
 8006666:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006668:	4b14      	ldr	r3, [pc, #80]	; (80066bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	429a      	cmp	r2, r3
 8006676:	d209      	bcs.n	800668c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006678:	4b13      	ldr	r3, [pc, #76]	; (80066c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	4b0f      	ldr	r3, [pc, #60]	; (80066bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3304      	adds	r3, #4
 8006682:	4619      	mov	r1, r3
 8006684:	4610      	mov	r0, r2
 8006686:	f7fe fbcb 	bl	8004e20 <vListInsert>
}
 800668a:	e010      	b.n	80066ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800668c:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	4b0a      	ldr	r3, [pc, #40]	; (80066bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3304      	adds	r3, #4
 8006696:	4619      	mov	r1, r3
 8006698:	4610      	mov	r0, r2
 800669a:	f7fe fbc1 	bl	8004e20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800669e:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d202      	bcs.n	80066ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80066a8:	4a09      	ldr	r2, [pc, #36]	; (80066d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6013      	str	r3, [r2, #0]
}
 80066ae:	bf00      	nop
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	200005b4 	.word	0x200005b4
 80066bc:	200004b0 	.word	0x200004b0
 80066c0:	200005b8 	.word	0x200005b8
 80066c4:	2000059c 	.word	0x2000059c
 80066c8:	2000056c 	.word	0x2000056c
 80066cc:	20000568 	.word	0x20000568
 80066d0:	200005d0 	.word	0x200005d0

080066d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	; 0x28
 80066d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80066da:	2300      	movs	r3, #0
 80066dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80066de:	f000 fb1f 	bl	8006d20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80066e2:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <xTimerCreateTimerTask+0x80>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d021      	beq.n	800672e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066f2:	1d3a      	adds	r2, r7, #4
 80066f4:	f107 0108 	add.w	r1, r7, #8
 80066f8:	f107 030c 	add.w	r3, r7, #12
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7f9 fd81 	bl	8000204 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	9202      	str	r2, [sp, #8]
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	2302      	movs	r3, #2
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	2300      	movs	r3, #0
 8006712:	460a      	mov	r2, r1
 8006714:	4910      	ldr	r1, [pc, #64]	; (8006758 <xTimerCreateTimerTask+0x84>)
 8006716:	4811      	ldr	r0, [pc, #68]	; (800675c <xTimerCreateTimerTask+0x88>)
 8006718:	f7ff f8c8 	bl	80058ac <xTaskCreateStatic>
 800671c:	4603      	mov	r3, r0
 800671e:	4a10      	ldr	r2, [pc, #64]	; (8006760 <xTimerCreateTimerTask+0x8c>)
 8006720:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006722:	4b0f      	ldr	r3, [pc, #60]	; (8006760 <xTimerCreateTimerTask+0x8c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800672a:	2301      	movs	r3, #1
 800672c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10a      	bne.n	800674a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	613b      	str	r3, [r7, #16]
}
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800674a:	697b      	ldr	r3, [r7, #20]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3718      	adds	r7, #24
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	2000060c 	.word	0x2000060c
 8006758:	080076fc 	.word	0x080076fc
 800675c:	08006929 	.word	0x08006929
 8006760:	20000610 	.word	0x20000610

08006764 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af02      	add	r7, sp, #8
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006772:	202c      	movs	r0, #44	; 0x2c
 8006774:	f000 fd60 	bl	8007238 <pvPortMalloc>
 8006778:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00d      	beq.n	800679c <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	9301      	str	r3, [sp, #4]
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 f809 	bl	80067a6 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800679c:	697b      	ldr	r3, [r7, #20]
	}
 800679e:	4618      	mov	r0, r3
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b086      	sub	sp, #24
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
 80067b2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10a      	bne.n	80067d0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	617b      	str	r3, [r7, #20]
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d015      	beq.n	8006802 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80067d6:	f000 faa3 	bl	8006d20 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	6a3a      	ldr	r2, [r7, #32]
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	3304      	adds	r3, #4
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fe fade 	bl	8004dbe <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006802:	bf00      	nop
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08a      	sub	sp, #40	; 0x28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800681a:	2300      	movs	r3, #0
 800681c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	623b      	str	r3, [r7, #32]
}
 8006836:	bf00      	nop
 8006838:	e7fe      	b.n	8006838 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800683a:	4b1a      	ldr	r3, [pc, #104]	; (80068a4 <xTimerGenericCommand+0x98>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d02a      	beq.n	8006898 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b05      	cmp	r3, #5
 8006852:	dc18      	bgt.n	8006886 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006854:	f7ff fe34 	bl	80064c0 <xTaskGetSchedulerState>
 8006858:	4603      	mov	r3, r0
 800685a:	2b02      	cmp	r3, #2
 800685c:	d109      	bne.n	8006872 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800685e:	4b11      	ldr	r3, [pc, #68]	; (80068a4 <xTimerGenericCommand+0x98>)
 8006860:	6818      	ldr	r0, [r3, #0]
 8006862:	f107 0110 	add.w	r1, r7, #16
 8006866:	2300      	movs	r3, #0
 8006868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800686a:	f7fe fc3b 	bl	80050e4 <xQueueGenericSend>
 800686e:	6278      	str	r0, [r7, #36]	; 0x24
 8006870:	e012      	b.n	8006898 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006872:	4b0c      	ldr	r3, [pc, #48]	; (80068a4 <xTimerGenericCommand+0x98>)
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	f107 0110 	add.w	r1, r7, #16
 800687a:	2300      	movs	r3, #0
 800687c:	2200      	movs	r2, #0
 800687e:	f7fe fc31 	bl	80050e4 <xQueueGenericSend>
 8006882:	6278      	str	r0, [r7, #36]	; 0x24
 8006884:	e008      	b.n	8006898 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006886:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <xTimerGenericCommand+0x98>)
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	f107 0110 	add.w	r1, r7, #16
 800688e:	2300      	movs	r3, #0
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	f7fe fd25 	bl	80052e0 <xQueueGenericSendFromISR>
 8006896:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800689a:	4618      	mov	r0, r3
 800689c:	3728      	adds	r7, #40	; 0x28
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	2000060c 	.word	0x2000060c

080068a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af02      	add	r7, sp, #8
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068b2:	4b1c      	ldr	r3, [pc, #112]	; (8006924 <prvProcessExpiredTimer+0x7c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	3304      	adds	r3, #4
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7fe fae6 	bl	8004e92 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d122      	bne.n	8006914 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	699a      	ldr	r2, [r3, #24]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	18d1      	adds	r1, r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	6978      	ldr	r0, [r7, #20]
 80068dc:	f000 f8c8 	bl	8006a70 <prvInsertTimerInActiveList>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d016      	beq.n	8006914 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068e6:	2300      	movs	r3, #0
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	2300      	movs	r3, #0
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	2100      	movs	r1, #0
 80068f0:	6978      	ldr	r0, [r7, #20]
 80068f2:	f7ff ff8b 	bl	800680c <xTimerGenericCommand>
 80068f6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10a      	bne.n	8006914 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	60fb      	str	r3, [r7, #12]
}
 8006910:	bf00      	nop
 8006912:	e7fe      	b.n	8006912 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	6978      	ldr	r0, [r7, #20]
 800691a:	4798      	blx	r3
}
 800691c:	bf00      	nop
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	20000604 	.word	0x20000604

08006928 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006930:	f107 0308 	add.w	r3, r7, #8
 8006934:	4618      	mov	r0, r3
 8006936:	f000 f857 	bl	80069e8 <prvGetNextExpireTime>
 800693a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4619      	mov	r1, r3
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 f803 	bl	800694c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006946:	f000 f8d5 	bl	8006af4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800694a:	e7f1      	b.n	8006930 <prvTimerTask+0x8>

0800694c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006956:	f7ff f9cd 	bl	8005cf4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800695a:	f107 0308 	add.w	r3, r7, #8
 800695e:	4618      	mov	r0, r3
 8006960:	f000 f866 	bl	8006a30 <prvSampleTimeNow>
 8006964:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d130      	bne.n	80069ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10a      	bne.n	8006988 <prvProcessTimerOrBlockTask+0x3c>
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	429a      	cmp	r2, r3
 8006978:	d806      	bhi.n	8006988 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800697a:	f7ff f9c9 	bl	8005d10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800697e:	68f9      	ldr	r1, [r7, #12]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff ff91 	bl	80068a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006986:	e024      	b.n	80069d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d008      	beq.n	80069a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800698e:	4b13      	ldr	r3, [pc, #76]	; (80069dc <prvProcessTimerOrBlockTask+0x90>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	bf0c      	ite	eq
 8006998:	2301      	moveq	r3, #1
 800699a:	2300      	movne	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80069a0:	4b0f      	ldr	r3, [pc, #60]	; (80069e0 <prvProcessTimerOrBlockTask+0x94>)
 80069a2:	6818      	ldr	r0, [r3, #0]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	4619      	mov	r1, r3
 80069ae:	f7fe ff49 	bl	8005844 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80069b2:	f7ff f9ad 	bl	8005d10 <xTaskResumeAll>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80069bc:	4b09      	ldr	r3, [pc, #36]	; (80069e4 <prvProcessTimerOrBlockTask+0x98>)
 80069be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	f3bf 8f6f 	isb	sy
}
 80069cc:	e001      	b.n	80069d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80069ce:	f7ff f99f 	bl	8005d10 <xTaskResumeAll>
}
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20000608 	.word	0x20000608
 80069e0:	2000060c 	.word	0x2000060c
 80069e4:	e000ed04 	.word	0xe000ed04

080069e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80069f0:	4b0e      	ldr	r3, [pc, #56]	; (8006a2c <prvGetNextExpireTime+0x44>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	bf0c      	ite	eq
 80069fa:	2301      	moveq	r3, #1
 80069fc:	2300      	movne	r3, #0
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	461a      	mov	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d105      	bne.n	8006a1a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a0e:	4b07      	ldr	r3, [pc, #28]	; (8006a2c <prvGetNextExpireTime+0x44>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	e001      	b.n	8006a1e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	20000604 	.word	0x20000604

08006a30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a38:	f7ff fa06 	bl	8005e48 <xTaskGetTickCount>
 8006a3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a3e:	4b0b      	ldr	r3, [pc, #44]	; (8006a6c <prvSampleTimeNow+0x3c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d205      	bcs.n	8006a54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006a48:	f000 f908 	bl	8006c5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	e002      	b.n	8006a5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a5a:	4a04      	ldr	r2, [pc, #16]	; (8006a6c <prvSampleTimeNow+0x3c>)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a60:	68fb      	ldr	r3, [r7, #12]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000614 	.word	0x20000614

08006a70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d812      	bhi.n	8006abc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	1ad2      	subs	r2, r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d302      	bcc.n	8006aaa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	e01b      	b.n	8006ae2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006aaa:	4b10      	ldr	r3, [pc, #64]	; (8006aec <prvInsertTimerInActiveList+0x7c>)
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	f7fe f9b3 	bl	8004e20 <vListInsert>
 8006aba:	e012      	b.n	8006ae2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d206      	bcs.n	8006ad2 <prvInsertTimerInActiveList+0x62>
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d302      	bcc.n	8006ad2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006acc:	2301      	movs	r3, #1
 8006ace:	617b      	str	r3, [r7, #20]
 8006ad0:	e007      	b.n	8006ae2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ad2:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <prvInsertTimerInActiveList+0x80>)
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	4619      	mov	r1, r3
 8006adc:	4610      	mov	r0, r2
 8006ade:	f7fe f99f 	bl	8004e20 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006ae2:	697b      	ldr	r3, [r7, #20]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	20000608 	.word	0x20000608
 8006af0:	20000604 	.word	0x20000604

08006af4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08e      	sub	sp, #56	; 0x38
 8006af8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006afa:	e09d      	b.n	8006c38 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	da18      	bge.n	8006b34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b02:	1d3b      	adds	r3, r7, #4
 8006b04:	3304      	adds	r3, #4
 8006b06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	61fb      	str	r3, [r7, #28]
}
 8006b20:	bf00      	nop
 8006b22:	e7fe      	b.n	8006b22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b2a:	6850      	ldr	r0, [r2, #4]
 8006b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b2e:	6892      	ldr	r2, [r2, #8]
 8006b30:	4611      	mov	r1, r2
 8006b32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	db7d      	blt.n	8006c36 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d004      	beq.n	8006b50 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	3304      	adds	r3, #4
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fe f9a1 	bl	8004e92 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b50:	463b      	mov	r3, r7
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff ff6c 	bl	8006a30 <prvSampleTimeNow>
 8006b58:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b09      	cmp	r3, #9
 8006b5e:	d86b      	bhi.n	8006c38 <prvProcessReceivedCommands+0x144>
 8006b60:	a201      	add	r2, pc, #4	; (adr r2, 8006b68 <prvProcessReceivedCommands+0x74>)
 8006b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b66:	bf00      	nop
 8006b68:	08006b91 	.word	0x08006b91
 8006b6c:	08006b91 	.word	0x08006b91
 8006b70:	08006b91 	.word	0x08006b91
 8006b74:	08006c39 	.word	0x08006c39
 8006b78:	08006bed 	.word	0x08006bed
 8006b7c:	08006c25 	.word	0x08006c25
 8006b80:	08006b91 	.word	0x08006b91
 8006b84:	08006b91 	.word	0x08006b91
 8006b88:	08006c39 	.word	0x08006c39
 8006b8c:	08006bed 	.word	0x08006bed
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	18d1      	adds	r1, r2, r3
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b9e:	f7ff ff67 	bl	8006a70 <prvInsertTimerInActiveList>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d047      	beq.n	8006c38 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d13f      	bne.n	8006c38 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	441a      	add	r2, r3
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bca:	f7ff fe1f 	bl	800680c <xTimerGenericCommand>
 8006bce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d130      	bne.n	8006c38 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	61bb      	str	r3, [r7, #24]
}
 8006be8:	bf00      	nop
 8006bea:	e7fe      	b.n	8006bea <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10a      	bne.n	8006c10 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	617b      	str	r3, [r7, #20]
}
 8006c0c:	bf00      	nop
 8006c0e:	e7fe      	b.n	8006c0e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c12:	699a      	ldr	r2, [r3, #24]
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	18d1      	adds	r1, r2, r3
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c1e:	f7ff ff27 	bl	8006a70 <prvInsertTimerInActiveList>
					break;
 8006c22:	e009      	b.n	8006c38 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d104      	bne.n	8006c38 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c30:	f000 fbc6 	bl	80073c0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c34:	e000      	b.n	8006c38 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006c36:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c38:	4b07      	ldr	r3, [pc, #28]	; (8006c58 <prvProcessReceivedCommands+0x164>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	1d39      	adds	r1, r7, #4
 8006c3e:	2200      	movs	r2, #0
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fe fbe5 	bl	8005410 <xQueueReceive>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f47f af57 	bne.w	8006afc <prvProcessReceivedCommands+0x8>
	}
}
 8006c4e:	bf00      	nop
 8006c50:	bf00      	nop
 8006c52:	3730      	adds	r7, #48	; 0x30
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	2000060c 	.word	0x2000060c

08006c5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c62:	e045      	b.n	8006cf0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c64:	4b2c      	ldr	r3, [pc, #176]	; (8006d18 <prvSwitchTimerLists+0xbc>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c6e:	4b2a      	ldr	r3, [pc, #168]	; (8006d18 <prvSwitchTimerLists+0xbc>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe f908 	bl	8004e92 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d12e      	bne.n	8006cf0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4413      	add	r3, r2
 8006c9a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d90e      	bls.n	8006cc2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cb0:	4b19      	ldr	r3, [pc, #100]	; (8006d18 <prvSwitchTimerLists+0xbc>)
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f7fe f8b0 	bl	8004e20 <vListInsert>
 8006cc0:	e016      	b.n	8006cf0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	2100      	movs	r1, #0
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f7ff fd9d 	bl	800680c <xTimerGenericCommand>
 8006cd2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10a      	bne.n	8006cf0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	603b      	str	r3, [r7, #0]
}
 8006cec:	bf00      	nop
 8006cee:	e7fe      	b.n	8006cee <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cf0:	4b09      	ldr	r3, [pc, #36]	; (8006d18 <prvSwitchTimerLists+0xbc>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1b4      	bne.n	8006c64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006cfa:	4b07      	ldr	r3, [pc, #28]	; (8006d18 <prvSwitchTimerLists+0xbc>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d00:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <prvSwitchTimerLists+0xc0>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a04      	ldr	r2, [pc, #16]	; (8006d18 <prvSwitchTimerLists+0xbc>)
 8006d06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d08:	4a04      	ldr	r2, [pc, #16]	; (8006d1c <prvSwitchTimerLists+0xc0>)
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	6013      	str	r3, [r2, #0]
}
 8006d0e:	bf00      	nop
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20000604 	.word	0x20000604
 8006d1c:	20000608 	.word	0x20000608

08006d20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d26:	f000 f965 	bl	8006ff4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d2a:	4b15      	ldr	r3, [pc, #84]	; (8006d80 <prvCheckForValidListAndQueue+0x60>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d120      	bne.n	8006d74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d32:	4814      	ldr	r0, [pc, #80]	; (8006d84 <prvCheckForValidListAndQueue+0x64>)
 8006d34:	f7fe f823 	bl	8004d7e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d38:	4813      	ldr	r0, [pc, #76]	; (8006d88 <prvCheckForValidListAndQueue+0x68>)
 8006d3a:	f7fe f820 	bl	8004d7e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d3e:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <prvCheckForValidListAndQueue+0x6c>)
 8006d40:	4a10      	ldr	r2, [pc, #64]	; (8006d84 <prvCheckForValidListAndQueue+0x64>)
 8006d42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d44:	4b12      	ldr	r3, [pc, #72]	; (8006d90 <prvCheckForValidListAndQueue+0x70>)
 8006d46:	4a10      	ldr	r2, [pc, #64]	; (8006d88 <prvCheckForValidListAndQueue+0x68>)
 8006d48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <prvCheckForValidListAndQueue+0x74>)
 8006d50:	4a11      	ldr	r2, [pc, #68]	; (8006d98 <prvCheckForValidListAndQueue+0x78>)
 8006d52:	2110      	movs	r1, #16
 8006d54:	2040      	movs	r0, #64	; 0x40
 8006d56:	f7fe f92f 	bl	8004fb8 <xQueueGenericCreateStatic>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	4a08      	ldr	r2, [pc, #32]	; (8006d80 <prvCheckForValidListAndQueue+0x60>)
 8006d5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d60:	4b07      	ldr	r3, [pc, #28]	; (8006d80 <prvCheckForValidListAndQueue+0x60>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d68:	4b05      	ldr	r3, [pc, #20]	; (8006d80 <prvCheckForValidListAndQueue+0x60>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	490b      	ldr	r1, [pc, #44]	; (8006d9c <prvCheckForValidListAndQueue+0x7c>)
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe fd3e 	bl	80057f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d74:	f000 f96e 	bl	8007054 <vPortExitCritical>
}
 8006d78:	bf00      	nop
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	2000060c 	.word	0x2000060c
 8006d84:	200005dc 	.word	0x200005dc
 8006d88:	200005f0 	.word	0x200005f0
 8006d8c:	20000604 	.word	0x20000604
 8006d90:	20000608 	.word	0x20000608
 8006d94:	20000a18 	.word	0x20000a18
 8006d98:	20000618 	.word	0x20000618
 8006d9c:	08007704 	.word	0x08007704

08006da0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3b04      	subs	r3, #4
 8006db0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3b04      	subs	r3, #4
 8006dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f023 0201 	bic.w	r2, r3, #1
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3b04      	subs	r3, #4
 8006dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006dd0:	4a0c      	ldr	r2, [pc, #48]	; (8006e04 <pxPortInitialiseStack+0x64>)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3b14      	subs	r3, #20
 8006dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3b04      	subs	r3, #4
 8006de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f06f 0202 	mvn.w	r2, #2
 8006dee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3b20      	subs	r3, #32
 8006df4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006df6:	68fb      	ldr	r3, [r7, #12]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	08006e09 	.word	0x08006e09

08006e08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e12:	4b12      	ldr	r3, [pc, #72]	; (8006e5c <prvTaskExitError+0x54>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1a:	d00a      	beq.n	8006e32 <prvTaskExitError+0x2a>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	60fb      	str	r3, [r7, #12]
}
 8006e2e:	bf00      	nop
 8006e30:	e7fe      	b.n	8006e30 <prvTaskExitError+0x28>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	60bb      	str	r3, [r7, #8]
}
 8006e44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e46:	bf00      	nop
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0fc      	beq.n	8006e48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e4e:	bf00      	nop
 8006e50:	bf00      	nop
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	2000000c 	.word	0x2000000c

08006e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e60:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <pxCurrentTCBConst2>)
 8006e62:	6819      	ldr	r1, [r3, #0]
 8006e64:	6808      	ldr	r0, [r1, #0]
 8006e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6a:	f380 8809 	msr	PSP, r0
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f04f 0000 	mov.w	r0, #0
 8006e76:	f380 8811 	msr	BASEPRI, r0
 8006e7a:	4770      	bx	lr
 8006e7c:	f3af 8000 	nop.w

08006e80 <pxCurrentTCBConst2>:
 8006e80:	200004b0 	.word	0x200004b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e84:	bf00      	nop
 8006e86:	bf00      	nop

08006e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e88:	4808      	ldr	r0, [pc, #32]	; (8006eac <prvPortStartFirstTask+0x24>)
 8006e8a:	6800      	ldr	r0, [r0, #0]
 8006e8c:	6800      	ldr	r0, [r0, #0]
 8006e8e:	f380 8808 	msr	MSP, r0
 8006e92:	f04f 0000 	mov.w	r0, #0
 8006e96:	f380 8814 	msr	CONTROL, r0
 8006e9a:	b662      	cpsie	i
 8006e9c:	b661      	cpsie	f
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	df00      	svc	0
 8006ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006eaa:	bf00      	nop
 8006eac:	e000ed08 	.word	0xe000ed08

08006eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006eb6:	4b46      	ldr	r3, [pc, #280]	; (8006fd0 <xPortStartScheduler+0x120>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a46      	ldr	r2, [pc, #280]	; (8006fd4 <xPortStartScheduler+0x124>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d10a      	bne.n	8006ed6 <xPortStartScheduler+0x26>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	613b      	str	r3, [r7, #16]
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ed6:	4b3e      	ldr	r3, [pc, #248]	; (8006fd0 <xPortStartScheduler+0x120>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a3f      	ldr	r2, [pc, #252]	; (8006fd8 <xPortStartScheduler+0x128>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d10a      	bne.n	8006ef6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	60fb      	str	r3, [r7, #12]
}
 8006ef2:	bf00      	nop
 8006ef4:	e7fe      	b.n	8006ef4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ef6:	4b39      	ldr	r3, [pc, #228]	; (8006fdc <xPortStartScheduler+0x12c>)
 8006ef8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	22ff      	movs	r2, #255	; 0xff
 8006f06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	4b31      	ldr	r3, [pc, #196]	; (8006fe0 <xPortStartScheduler+0x130>)
 8006f1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f1e:	4b31      	ldr	r3, [pc, #196]	; (8006fe4 <xPortStartScheduler+0x134>)
 8006f20:	2207      	movs	r2, #7
 8006f22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f24:	e009      	b.n	8006f3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006f26:	4b2f      	ldr	r3, [pc, #188]	; (8006fe4 <xPortStartScheduler+0x134>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	4a2d      	ldr	r2, [pc, #180]	; (8006fe4 <xPortStartScheduler+0x134>)
 8006f2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f42:	2b80      	cmp	r3, #128	; 0x80
 8006f44:	d0ef      	beq.n	8006f26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f46:	4b27      	ldr	r3, [pc, #156]	; (8006fe4 <xPortStartScheduler+0x134>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f1c3 0307 	rsb	r3, r3, #7
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d00a      	beq.n	8006f68 <xPortStartScheduler+0xb8>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	60bb      	str	r3, [r7, #8]
}
 8006f64:	bf00      	nop
 8006f66:	e7fe      	b.n	8006f66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f68:	4b1e      	ldr	r3, [pc, #120]	; (8006fe4 <xPortStartScheduler+0x134>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	021b      	lsls	r3, r3, #8
 8006f6e:	4a1d      	ldr	r2, [pc, #116]	; (8006fe4 <xPortStartScheduler+0x134>)
 8006f70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f72:	4b1c      	ldr	r3, [pc, #112]	; (8006fe4 <xPortStartScheduler+0x134>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f7a:	4a1a      	ldr	r2, [pc, #104]	; (8006fe4 <xPortStartScheduler+0x134>)
 8006f7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f86:	4b18      	ldr	r3, [pc, #96]	; (8006fe8 <xPortStartScheduler+0x138>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a17      	ldr	r2, [pc, #92]	; (8006fe8 <xPortStartScheduler+0x138>)
 8006f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f92:	4b15      	ldr	r3, [pc, #84]	; (8006fe8 <xPortStartScheduler+0x138>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a14      	ldr	r2, [pc, #80]	; (8006fe8 <xPortStartScheduler+0x138>)
 8006f98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f9e:	f000 f8dd 	bl	800715c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fa2:	4b12      	ldr	r3, [pc, #72]	; (8006fec <xPortStartScheduler+0x13c>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006fa8:	f000 f8fc 	bl	80071a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fac:	4b10      	ldr	r3, [pc, #64]	; (8006ff0 <xPortStartScheduler+0x140>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a0f      	ldr	r2, [pc, #60]	; (8006ff0 <xPortStartScheduler+0x140>)
 8006fb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006fb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006fb8:	f7ff ff66 	bl	8006e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006fbc:	f7ff f812 	bl	8005fe4 <vTaskSwitchContext>
	prvTaskExitError();
 8006fc0:	f7ff ff22 	bl	8006e08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	e000ed00 	.word	0xe000ed00
 8006fd4:	410fc271 	.word	0x410fc271
 8006fd8:	410fc270 	.word	0x410fc270
 8006fdc:	e000e400 	.word	0xe000e400
 8006fe0:	20000a60 	.word	0x20000a60
 8006fe4:	20000a64 	.word	0x20000a64
 8006fe8:	e000ed20 	.word	0xe000ed20
 8006fec:	2000000c 	.word	0x2000000c
 8006ff0:	e000ef34 	.word	0xe000ef34

08006ff4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	607b      	str	r3, [r7, #4]
}
 800700c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800700e:	4b0f      	ldr	r3, [pc, #60]	; (800704c <vPortEnterCritical+0x58>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3301      	adds	r3, #1
 8007014:	4a0d      	ldr	r2, [pc, #52]	; (800704c <vPortEnterCritical+0x58>)
 8007016:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007018:	4b0c      	ldr	r3, [pc, #48]	; (800704c <vPortEnterCritical+0x58>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d10f      	bne.n	8007040 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007020:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <vPortEnterCritical+0x5c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <vPortEnterCritical+0x4c>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	603b      	str	r3, [r7, #0]
}
 800703c:	bf00      	nop
 800703e:	e7fe      	b.n	800703e <vPortEnterCritical+0x4a>
	}
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	2000000c 	.word	0x2000000c
 8007050:	e000ed04 	.word	0xe000ed04

08007054 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800705a:	4b12      	ldr	r3, [pc, #72]	; (80070a4 <vPortExitCritical+0x50>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <vPortExitCritical+0x24>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	607b      	str	r3, [r7, #4]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007078:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <vPortExitCritical+0x50>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3b01      	subs	r3, #1
 800707e:	4a09      	ldr	r2, [pc, #36]	; (80070a4 <vPortExitCritical+0x50>)
 8007080:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007082:	4b08      	ldr	r3, [pc, #32]	; (80070a4 <vPortExitCritical+0x50>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d105      	bne.n	8007096 <vPortExitCritical+0x42>
 800708a:	2300      	movs	r3, #0
 800708c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	f383 8811 	msr	BASEPRI, r3
}
 8007094:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	2000000c 	.word	0x2000000c
	...

080070b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070b0:	f3ef 8009 	mrs	r0, PSP
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	4b15      	ldr	r3, [pc, #84]	; (8007110 <pxCurrentTCBConst>)
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	f01e 0f10 	tst.w	lr, #16
 80070c0:	bf08      	it	eq
 80070c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ca:	6010      	str	r0, [r2, #0]
 80070cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070d4:	f380 8811 	msr	BASEPRI, r0
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f7fe ff80 	bl	8005fe4 <vTaskSwitchContext>
 80070e4:	f04f 0000 	mov.w	r0, #0
 80070e8:	f380 8811 	msr	BASEPRI, r0
 80070ec:	bc09      	pop	{r0, r3}
 80070ee:	6819      	ldr	r1, [r3, #0]
 80070f0:	6808      	ldr	r0, [r1, #0]
 80070f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f6:	f01e 0f10 	tst.w	lr, #16
 80070fa:	bf08      	it	eq
 80070fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007100:	f380 8809 	msr	PSP, r0
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	f3af 8000 	nop.w

08007110 <pxCurrentTCBConst>:
 8007110:	200004b0 	.word	0x200004b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop

08007118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	607b      	str	r3, [r7, #4]
}
 8007130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007132:	f7fe fe99 	bl	8005e68 <xTaskIncrementTick>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800713c:	4b06      	ldr	r3, [pc, #24]	; (8007158 <SysTick_Handler+0x40>)
 800713e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	2300      	movs	r3, #0
 8007146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	f383 8811 	msr	BASEPRI, r3
}
 800714e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007160:	4b0b      	ldr	r3, [pc, #44]	; (8007190 <vPortSetupTimerInterrupt+0x34>)
 8007162:	2200      	movs	r2, #0
 8007164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007166:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <vPortSetupTimerInterrupt+0x38>)
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800716c:	4b0a      	ldr	r3, [pc, #40]	; (8007198 <vPortSetupTimerInterrupt+0x3c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a0a      	ldr	r2, [pc, #40]	; (800719c <vPortSetupTimerInterrupt+0x40>)
 8007172:	fba2 2303 	umull	r2, r3, r2, r3
 8007176:	099b      	lsrs	r3, r3, #6
 8007178:	4a09      	ldr	r2, [pc, #36]	; (80071a0 <vPortSetupTimerInterrupt+0x44>)
 800717a:	3b01      	subs	r3, #1
 800717c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800717e:	4b04      	ldr	r3, [pc, #16]	; (8007190 <vPortSetupTimerInterrupt+0x34>)
 8007180:	2207      	movs	r2, #7
 8007182:	601a      	str	r2, [r3, #0]
}
 8007184:	bf00      	nop
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	e000e010 	.word	0xe000e010
 8007194:	e000e018 	.word	0xe000e018
 8007198:	20000000 	.word	0x20000000
 800719c:	10624dd3 	.word	0x10624dd3
 80071a0:	e000e014 	.word	0xe000e014

080071a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80071a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80071b4 <vPortEnableVFP+0x10>
 80071a8:	6801      	ldr	r1, [r0, #0]
 80071aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80071ae:	6001      	str	r1, [r0, #0]
 80071b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80071b2:	bf00      	nop
 80071b4:	e000ed88 	.word	0xe000ed88

080071b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071be:	f3ef 8305 	mrs	r3, IPSR
 80071c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b0f      	cmp	r3, #15
 80071c8:	d914      	bls.n	80071f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071ca:	4a17      	ldr	r2, [pc, #92]	; (8007228 <vPortValidateInterruptPriority+0x70>)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4413      	add	r3, r2
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071d4:	4b15      	ldr	r3, [pc, #84]	; (800722c <vPortValidateInterruptPriority+0x74>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	7afa      	ldrb	r2, [r7, #11]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d20a      	bcs.n	80071f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	607b      	str	r3, [r7, #4]
}
 80071f0:	bf00      	nop
 80071f2:	e7fe      	b.n	80071f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071f4:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <vPortValidateInterruptPriority+0x78>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071fc:	4b0d      	ldr	r3, [pc, #52]	; (8007234 <vPortValidateInterruptPriority+0x7c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d90a      	bls.n	800721a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	603b      	str	r3, [r7, #0]
}
 8007216:	bf00      	nop
 8007218:	e7fe      	b.n	8007218 <vPortValidateInterruptPriority+0x60>
	}
 800721a:	bf00      	nop
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	e000e3f0 	.word	0xe000e3f0
 800722c:	20000a60 	.word	0x20000a60
 8007230:	e000ed0c 	.word	0xe000ed0c
 8007234:	20000a64 	.word	0x20000a64

08007238 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08a      	sub	sp, #40	; 0x28
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007240:	2300      	movs	r3, #0
 8007242:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007244:	f7fe fd56 	bl	8005cf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007248:	4b58      	ldr	r3, [pc, #352]	; (80073ac <pvPortMalloc+0x174>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007250:	f000 f910 	bl	8007474 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007254:	4b56      	ldr	r3, [pc, #344]	; (80073b0 <pvPortMalloc+0x178>)
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4013      	ands	r3, r2
 800725c:	2b00      	cmp	r3, #0
 800725e:	f040 808e 	bne.w	800737e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01d      	beq.n	80072a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007268:	2208      	movs	r2, #8
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4413      	add	r3, r2
 800726e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	2b00      	cmp	r3, #0
 8007278:	d014      	beq.n	80072a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f023 0307 	bic.w	r3, r3, #7
 8007280:	3308      	adds	r3, #8
 8007282:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f003 0307 	and.w	r3, r3, #7
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <pvPortMalloc+0x6c>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	617b      	str	r3, [r7, #20]
}
 80072a0:	bf00      	nop
 80072a2:	e7fe      	b.n	80072a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d069      	beq.n	800737e <pvPortMalloc+0x146>
 80072aa:	4b42      	ldr	r3, [pc, #264]	; (80073b4 <pvPortMalloc+0x17c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d864      	bhi.n	800737e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80072b4:	4b40      	ldr	r3, [pc, #256]	; (80073b8 <pvPortMalloc+0x180>)
 80072b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80072b8:	4b3f      	ldr	r3, [pc, #252]	; (80073b8 <pvPortMalloc+0x180>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072be:	e004      	b.n	80072ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d903      	bls.n	80072dc <pvPortMalloc+0xa4>
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1f1      	bne.n	80072c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80072dc:	4b33      	ldr	r3, [pc, #204]	; (80073ac <pvPortMalloc+0x174>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d04b      	beq.n	800737e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2208      	movs	r2, #8
 80072ec:	4413      	add	r3, r2
 80072ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	1ad2      	subs	r2, r2, r3
 8007300:	2308      	movs	r3, #8
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	429a      	cmp	r2, r3
 8007306:	d91f      	bls.n	8007348 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4413      	add	r3, r2
 800730e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <pvPortMalloc+0xf8>
	__asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	613b      	str	r3, [r7, #16]
}
 800732c:	bf00      	nop
 800732e:	e7fe      	b.n	800732e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	1ad2      	subs	r2, r2, r3
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007342:	69b8      	ldr	r0, [r7, #24]
 8007344:	f000 f8f8 	bl	8007538 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007348:	4b1a      	ldr	r3, [pc, #104]	; (80073b4 <pvPortMalloc+0x17c>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	4a18      	ldr	r2, [pc, #96]	; (80073b4 <pvPortMalloc+0x17c>)
 8007354:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007356:	4b17      	ldr	r3, [pc, #92]	; (80073b4 <pvPortMalloc+0x17c>)
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	4b18      	ldr	r3, [pc, #96]	; (80073bc <pvPortMalloc+0x184>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d203      	bcs.n	800736a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007362:	4b14      	ldr	r3, [pc, #80]	; (80073b4 <pvPortMalloc+0x17c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a15      	ldr	r2, [pc, #84]	; (80073bc <pvPortMalloc+0x184>)
 8007368:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	4b10      	ldr	r3, [pc, #64]	; (80073b0 <pvPortMalloc+0x178>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	431a      	orrs	r2, r3
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800737e:	f7fe fcc7 	bl	8005d10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00a      	beq.n	80073a2 <pvPortMalloc+0x16a>
	__asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	60fb      	str	r3, [r7, #12]
}
 800739e:	bf00      	nop
 80073a0:	e7fe      	b.n	80073a0 <pvPortMalloc+0x168>
	return pvReturn;
 80073a2:	69fb      	ldr	r3, [r7, #28]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3728      	adds	r7, #40	; 0x28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	200025c8 	.word	0x200025c8
 80073b0:	200025d4 	.word	0x200025d4
 80073b4:	200025cc 	.word	0x200025cc
 80073b8:	200025c0 	.word	0x200025c0
 80073bc:	200025d0 	.word	0x200025d0

080073c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d048      	beq.n	8007464 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80073d2:	2308      	movs	r3, #8
 80073d4:	425b      	negs	r3, r3
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	4413      	add	r3, r2
 80073da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	4b21      	ldr	r3, [pc, #132]	; (800746c <vPortFree+0xac>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4013      	ands	r3, r2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10a      	bne.n	8007404 <vPortFree+0x44>
	__asm volatile
 80073ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f2:	f383 8811 	msr	BASEPRI, r3
 80073f6:	f3bf 8f6f 	isb	sy
 80073fa:	f3bf 8f4f 	dsb	sy
 80073fe:	60fb      	str	r3, [r7, #12]
}
 8007400:	bf00      	nop
 8007402:	e7fe      	b.n	8007402 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00a      	beq.n	8007422 <vPortFree+0x62>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	60bb      	str	r3, [r7, #8]
}
 800741e:	bf00      	nop
 8007420:	e7fe      	b.n	8007420 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	4b11      	ldr	r3, [pc, #68]	; (800746c <vPortFree+0xac>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4013      	ands	r3, r2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d019      	beq.n	8007464 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d115      	bne.n	8007464 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	4b0b      	ldr	r3, [pc, #44]	; (800746c <vPortFree+0xac>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	43db      	mvns	r3, r3
 8007442:	401a      	ands	r2, r3
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007448:	f7fe fc54 	bl	8005cf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	4b07      	ldr	r3, [pc, #28]	; (8007470 <vPortFree+0xb0>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4413      	add	r3, r2
 8007456:	4a06      	ldr	r2, [pc, #24]	; (8007470 <vPortFree+0xb0>)
 8007458:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800745a:	6938      	ldr	r0, [r7, #16]
 800745c:	f000 f86c 	bl	8007538 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007460:	f7fe fc56 	bl	8005d10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007464:	bf00      	nop
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	200025d4 	.word	0x200025d4
 8007470:	200025cc 	.word	0x200025cc

08007474 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800747a:	f641 3358 	movw	r3, #7000	; 0x1b58
 800747e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007480:	4b27      	ldr	r3, [pc, #156]	; (8007520 <prvHeapInit+0xac>)
 8007482:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f003 0307 	and.w	r3, r3, #7
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00c      	beq.n	80074a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3307      	adds	r3, #7
 8007492:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0307 	bic.w	r3, r3, #7
 800749a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	4a1f      	ldr	r2, [pc, #124]	; (8007520 <prvHeapInit+0xac>)
 80074a4:	4413      	add	r3, r2
 80074a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074ac:	4a1d      	ldr	r2, [pc, #116]	; (8007524 <prvHeapInit+0xb0>)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80074b2:	4b1c      	ldr	r3, [pc, #112]	; (8007524 <prvHeapInit+0xb0>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4413      	add	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80074c0:	2208      	movs	r2, #8
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	1a9b      	subs	r3, r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 0307 	bic.w	r3, r3, #7
 80074ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4a15      	ldr	r2, [pc, #84]	; (8007528 <prvHeapInit+0xb4>)
 80074d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074d6:	4b14      	ldr	r3, [pc, #80]	; (8007528 <prvHeapInit+0xb4>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2200      	movs	r2, #0
 80074dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074de:	4b12      	ldr	r3, [pc, #72]	; (8007528 <prvHeapInit+0xb4>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	1ad2      	subs	r2, r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074f4:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <prvHeapInit+0xb4>)
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	4a0a      	ldr	r2, [pc, #40]	; (800752c <prvHeapInit+0xb8>)
 8007502:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	4a09      	ldr	r2, [pc, #36]	; (8007530 <prvHeapInit+0xbc>)
 800750a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800750c:	4b09      	ldr	r3, [pc, #36]	; (8007534 <prvHeapInit+0xc0>)
 800750e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007512:	601a      	str	r2, [r3, #0]
}
 8007514:	bf00      	nop
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	20000a68 	.word	0x20000a68
 8007524:	200025c0 	.word	0x200025c0
 8007528:	200025c8 	.word	0x200025c8
 800752c:	200025d0 	.word	0x200025d0
 8007530:	200025cc 	.word	0x200025cc
 8007534:	200025d4 	.word	0x200025d4

08007538 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007540:	4b28      	ldr	r3, [pc, #160]	; (80075e4 <prvInsertBlockIntoFreeList+0xac>)
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	e002      	b.n	800754c <prvInsertBlockIntoFreeList+0x14>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	429a      	cmp	r2, r3
 8007554:	d8f7      	bhi.n	8007546 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	4413      	add	r3, r2
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	429a      	cmp	r2, r3
 8007566:	d108      	bne.n	800757a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	441a      	add	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	441a      	add	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d118      	bne.n	80075c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	4b15      	ldr	r3, [pc, #84]	; (80075e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d00d      	beq.n	80075b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	441a      	add	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	e008      	b.n	80075c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80075b6:	4b0c      	ldr	r3, [pc, #48]	; (80075e8 <prvInsertBlockIntoFreeList+0xb0>)
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	e003      	b.n	80075c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d002      	beq.n	80075d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	200025c0 	.word	0x200025c0
 80075e8:	200025c8 	.word	0x200025c8

080075ec <__libc_init_array>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	4d0d      	ldr	r5, [pc, #52]	; (8007624 <__libc_init_array+0x38>)
 80075f0:	4c0d      	ldr	r4, [pc, #52]	; (8007628 <__libc_init_array+0x3c>)
 80075f2:	1b64      	subs	r4, r4, r5
 80075f4:	10a4      	asrs	r4, r4, #2
 80075f6:	2600      	movs	r6, #0
 80075f8:	42a6      	cmp	r6, r4
 80075fa:	d109      	bne.n	8007610 <__libc_init_array+0x24>
 80075fc:	4d0b      	ldr	r5, [pc, #44]	; (800762c <__libc_init_array+0x40>)
 80075fe:	4c0c      	ldr	r4, [pc, #48]	; (8007630 <__libc_init_array+0x44>)
 8007600:	f000 f82e 	bl	8007660 <_init>
 8007604:	1b64      	subs	r4, r4, r5
 8007606:	10a4      	asrs	r4, r4, #2
 8007608:	2600      	movs	r6, #0
 800760a:	42a6      	cmp	r6, r4
 800760c:	d105      	bne.n	800761a <__libc_init_array+0x2e>
 800760e:	bd70      	pop	{r4, r5, r6, pc}
 8007610:	f855 3b04 	ldr.w	r3, [r5], #4
 8007614:	4798      	blx	r3
 8007616:	3601      	adds	r6, #1
 8007618:	e7ee      	b.n	80075f8 <__libc_init_array+0xc>
 800761a:	f855 3b04 	ldr.w	r3, [r5], #4
 800761e:	4798      	blx	r3
 8007620:	3601      	adds	r6, #1
 8007622:	e7f2      	b.n	800760a <__libc_init_array+0x1e>
 8007624:	08007744 	.word	0x08007744
 8007628:	08007744 	.word	0x08007744
 800762c:	08007744 	.word	0x08007744
 8007630:	08007748 	.word	0x08007748

08007634 <memcpy>:
 8007634:	440a      	add	r2, r1
 8007636:	4291      	cmp	r1, r2
 8007638:	f100 33ff 	add.w	r3, r0, #4294967295
 800763c:	d100      	bne.n	8007640 <memcpy+0xc>
 800763e:	4770      	bx	lr
 8007640:	b510      	push	{r4, lr}
 8007642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800764a:	4291      	cmp	r1, r2
 800764c:	d1f9      	bne.n	8007642 <memcpy+0xe>
 800764e:	bd10      	pop	{r4, pc}

08007650 <memset>:
 8007650:	4402      	add	r2, r0
 8007652:	4603      	mov	r3, r0
 8007654:	4293      	cmp	r3, r2
 8007656:	d100      	bne.n	800765a <memset+0xa>
 8007658:	4770      	bx	lr
 800765a:	f803 1b01 	strb.w	r1, [r3], #1
 800765e:	e7f9      	b.n	8007654 <memset+0x4>

08007660 <_init>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	bf00      	nop
 8007664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007666:	bc08      	pop	{r3}
 8007668:	469e      	mov	lr, r3
 800766a:	4770      	bx	lr

0800766c <_fini>:
 800766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766e:	bf00      	nop
 8007670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007672:	bc08      	pop	{r3}
 8007674:	469e      	mov	lr, r3
 8007676:	4770      	bx	lr
