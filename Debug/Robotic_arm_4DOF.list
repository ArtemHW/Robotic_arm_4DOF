
Robotic_arm_4DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08007d98  08007d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e78  08007e78  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007e78  08007e78  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e78  08007e78  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e78  08007e78  00017e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e7c  08007e7c  00017e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e0c  20000010  08007e90  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e1c  08007e90  00021e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b5d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003654  00000000  00000000  00037b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  0003b1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  0003c6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d55b  00000000  00000000  0003da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e3f  00000000  00000000  0005af7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b109b  00000000  00000000  00074dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125e55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005710  00000000  00000000  00125ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d80 	.word	0x08007d80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007d80 	.word	0x08007d80

080001d0 <at24c256b_page_write>:
 * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
 * @param GPIO_Pin_WP - pin on your MCU that is connected to WP pin AT24C256B
 */
void at24c256b_page_write(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, int8_t* pData, uint16_t Size, uint16_t address,
	                      GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_WP)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b088      	sub	sp, #32
 80001d4:	af04      	add	r7, sp, #16
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	607a      	str	r2, [r7, #4]
 80001da:	461a      	mov	r2, r3
 80001dc:	460b      	mov	r3, r1
 80001de:	817b      	strh	r3, [r7, #10]
 80001e0:	4613      	mov	r3, r2
 80001e2:	813b      	strh	r3, [r7, #8]
	write_protection(0, GPIOx, GPIO_Pin_WP);
 80001e4:	8c3b      	ldrh	r3, [r7, #32]
 80001e6:	461a      	mov	r2, r3
 80001e8:	69f9      	ldr	r1, [r7, #28]
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 f833 	bl	8000256 <write_protection>
	HAL_I2C_Mem_Write(hi2c, DevAddress, address, 2, pData, Size, 100);
 80001f0:	8b3a      	ldrh	r2, [r7, #24]
 80001f2:	8979      	ldrh	r1, [r7, #10]
 80001f4:	2364      	movs	r3, #100	; 0x64
 80001f6:	9302      	str	r3, [sp, #8]
 80001f8:	893b      	ldrh	r3, [r7, #8]
 80001fa:	9301      	str	r3, [sp, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	9300      	str	r3, [sp, #0]
 8000200:	2302      	movs	r3, #2
 8000202:	68f8      	ldr	r0, [r7, #12]
 8000204:	f001 fdbc 	bl	8001d80 <HAL_I2C_Mem_Write>
}
 8000208:	bf00      	nop
 800020a:	3710      	adds	r7, #16
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <at24c256b_sequential_read>:
 * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
 * @param GPIO_Pin_WP - pin on your MCU that is connected to WP pin AT24C256B
 */
void at24c256b_sequential_read(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, int8_t* pData, uint16_t Size, uint16_t address,
		                 GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_WP)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b08a      	sub	sp, #40	; 0x28
 8000214:	af04      	add	r7, sp, #16
 8000216:	60f8      	str	r0, [r7, #12]
 8000218:	607a      	str	r2, [r7, #4]
 800021a:	461a      	mov	r2, r3
 800021c:	460b      	mov	r3, r1
 800021e:	817b      	strh	r3, [r7, #10]
 8000220:	4613      	mov	r3, r2
 8000222:	813b      	strh	r3, [r7, #8]
	write_protection(1, GPIOx, GPIO_Pin_WP);
 8000224:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000226:	461a      	mov	r2, r3
 8000228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800022a:	2001      	movs	r0, #1
 800022c:	f000 f813 	bl	8000256 <write_protection>
	HAL_StatusTypeDef result;
	result = HAL_I2C_Mem_Read(hi2c, DevAddress, address, 2, (uint8_t * )pData, Size, 100);
 8000230:	8c3a      	ldrh	r2, [r7, #32]
 8000232:	8979      	ldrh	r1, [r7, #10]
 8000234:	2364      	movs	r3, #100	; 0x64
 8000236:	9302      	str	r3, [sp, #8]
 8000238:	893b      	ldrh	r3, [r7, #8]
 800023a:	9301      	str	r3, [sp, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	9300      	str	r3, [sp, #0]
 8000240:	2302      	movs	r3, #2
 8000242:	68f8      	ldr	r0, [r7, #12]
 8000244:	f001 feb0 	bl	8001fa8 <HAL_I2C_Mem_Read>
 8000248:	4603      	mov	r3, r0
 800024a:	75fb      	strb	r3, [r7, #23]
	__asm__ volatile("NOP");
 800024c:	bf00      	nop
}
 800024e:	bf00      	nop
 8000250:	3718      	adds	r7, #24
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}

08000256 <write_protection>:
 *         write protection is OFF
 * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
 * @param GPIO_Pin_WP - pin on your MCU that is connected to WP pin AT24C256B
 */
void write_protection(uint8_t wr_prot, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_WP)
{
 8000256:	b480      	push	{r7}
 8000258:	b083      	sub	sp, #12
 800025a:	af00      	add	r7, sp, #0
 800025c:	4603      	mov	r3, r0
 800025e:	6039      	str	r1, [r7, #0]
 8000260:	71fb      	strb	r3, [r7, #7]
 8000262:	4613      	mov	r3, r2
 8000264:	80bb      	strh	r3, [r7, #4]
	if(wr_prot == 1)
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d106      	bne.n	800027a <write_protection+0x24>
	{
		GPIOx->ODR |= GPIO_Pin_WP;
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	695a      	ldr	r2, [r3, #20]
 8000270:	88bb      	ldrh	r3, [r7, #4]
 8000272:	431a      	orrs	r2, r3
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	615a      	str	r2, [r3, #20]
	}
	else if(wr_prot == 0)
	{
		GPIOx->ODR &= ~GPIO_Pin_WP;
	}
}
 8000278:	e009      	b.n	800028e <write_protection+0x38>
	else if(wr_prot == 0)
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d106      	bne.n	800028e <write_protection+0x38>
		GPIOx->ODR &= ~GPIO_Pin_WP;
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	695b      	ldr	r3, [r3, #20]
 8000284:	88ba      	ldrh	r2, [r7, #4]
 8000286:	43d2      	mvns	r2, r2
 8000288:	401a      	ands	r2, r3
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	615a      	str	r2, [r3, #20]
}
 800028e:	bf00      	nop
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
	...

0800029c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80002ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <vApplicationGetIdleTaskMemory+0x30>)
 80002b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2240      	movs	r2, #64	; 0x40
 80002b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002ba:	bf00      	nop
 80002bc:	3714      	adds	r7, #20
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	2000002c 	.word	0x2000002c
 80002cc:	20000080 	.word	0x20000080

080002d0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	4a07      	ldr	r2, [pc, #28]	; (80002fc <vApplicationGetTimerTaskMemory+0x2c>)
 80002e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	4a06      	ldr	r2, [pc, #24]	; (8000300 <vApplicationGetTimerTaskMemory+0x30>)
 80002e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2240      	movs	r2, #64	; 0x40
 80002ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002ee:	bf00      	nop
 80002f0:	3714      	adds	r7, #20
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000180 	.word	0x20000180
 8000300:	200001d4 	.word	0x200001d4

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b5b0      	push	{r4, r5, r7, lr}
 8000306:	b08e      	sub	sp, #56	; 0x38
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030a:	f000 fd65 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030e:	f000 f8bd 	bl	800048c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000312:	f000 faaf 	bl	8000874 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000316:	f000 f9db 	bl	80006d0 <MX_TIM1_Init>
  MX_I2C1_Init();
 800031a:	f000 f999 	bl	8000650 <MX_I2C1_Init>
  MX_ADC1_Init();
 800031e:	f000 f90d 	bl	800053c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000322:	2100      	movs	r1, #0
 8000324:	484e      	ldr	r0, [pc, #312]	; (8000460 <main+0x15c>)
 8000326:	f003 ffcd 	bl	80042c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800032a:	2104      	movs	r1, #4
 800032c:	484c      	ldr	r0, [pc, #304]	; (8000460 <main+0x15c>)
 800032e:	f003 ffc9 	bl	80042c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000332:	2108      	movs	r1, #8
 8000334:	484a      	ldr	r0, [pc, #296]	; (8000460 <main+0x15c>)
 8000336:	f003 ffc5 	bl	80042c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800033a:	210c      	movs	r1, #12
 800033c:	4848      	ldr	r0, [pc, #288]	; (8000460 <main+0x15c>)
 800033e:	f003 ffc1 	bl	80042c4 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 750;
 8000342:	4b48      	ldr	r3, [pc, #288]	; (8000464 <main+0x160>)
 8000344:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000348:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 300;
 800034a:	4b46      	ldr	r3, [pc, #280]	; (8000464 <main+0x160>)
 800034c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000350:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 1350;
 8000352:	4b44      	ldr	r3, [pc, #272]	; (8000464 <main+0x160>)
 8000354:	f240 5246 	movw	r2, #1350	; 0x546
 8000358:	63da      	str	r2, [r3, #60]	; 0x3c

  GPIOC->ODR |= GPIO_ODR_11;
 800035a:	4b43      	ldr	r3, [pc, #268]	; (8000468 <main+0x164>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a42      	ldr	r2, [pc, #264]	; (8000468 <main+0x164>)
 8000360:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000364:	6153      	str	r3, [r2, #20]

	ADC1->CFGR |= ADC_CFGR_DMACFG; //1: DMA Circular Mode selected
 8000366:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000370:	f043 0302 	orr.w	r3, r3, #2
 8000374:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= ADC_CFGR_DMAEN; //Direct memory access enable
 8000376:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	60d3      	str	r3, [r2, #12]

	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // DMA1 clock enable
 8000386:	4b39      	ldr	r3, [pc, #228]	; (800046c <main+0x168>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a38      	ldr	r2, [pc, #224]	; (800046c <main+0x168>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CCR |= (1<<10); // memory size 16 bits
 8000392:	4b37      	ldr	r3, [pc, #220]	; (8000470 <main+0x16c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a36      	ldr	r2, [pc, #216]	; (8000470 <main+0x16c>)
 8000398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800039c:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (1<<8); // peripheral size 16 bits
 800039e:	4b34      	ldr	r3, [pc, #208]	; (8000470 <main+0x16c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a33      	ldr	r2, [pc, #204]	; (8000470 <main+0x16c>)
 80003a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003a8:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC; //memory increment mode
 80003aa:	4b31      	ldr	r3, [pc, #196]	; (8000470 <main+0x16c>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a30      	ldr	r2, [pc, #192]	; (8000470 <main+0x16c>)
 80003b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b4:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 80003b6:	4b2e      	ldr	r3, [pc, #184]	; (8000470 <main+0x16c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a2d      	ldr	r2, [pc, #180]	; (8000470 <main+0x16c>)
 80003bc:	f043 0320 	orr.w	r3, r3, #32
 80003c0:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CNDTR = 4;
 80003c2:	4b2b      	ldr	r3, [pc, #172]	; (8000470 <main+0x16c>)
 80003c4:	2204      	movs	r2, #4
 80003c6:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CPAR = &(ADC1->DR);
 80003c8:	4b29      	ldr	r3, [pc, #164]	; (8000470 <main+0x16c>)
 80003ca:	4a2a      	ldr	r2, [pc, #168]	; (8000474 <main+0x170>)
 80003cc:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = buffer.adc_buffer;
 80003ce:	4b28      	ldr	r3, [pc, #160]	; (8000470 <main+0x16c>)
 80003d0:	4a29      	ldr	r2, [pc, #164]	; (8000478 <main+0x174>)
 80003d2:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CCR |= DMA_CCR_EN;
 80003d4:	4b26      	ldr	r3, [pc, #152]	; (8000470 <main+0x16c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a25      	ldr	r2, [pc, #148]	; (8000470 <main+0x16c>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6013      	str	r3, [r2, #0]

	ADC1->CR |= ADC_CR_ADEN; //ADC enable control
 80003e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003ea:	f043 0301 	orr.w	r3, r3, #1
 80003ee:	6093      	str	r3, [r2, #8]
	while(ADC1->ISR & ADC_ISR_ADRDY) __asm__ volatile("NOP");
 80003f0:	e000      	b.n	80003f4 <main+0xf0>
 80003f2:	bf00      	nop
 80003f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d1f7      	bne.n	80003f2 <main+0xee>
	ADC1->CR |= ADC_CR_ADSTART; // ADC start of regular conversion
 8000402:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800040c:	f043 0304 	orr.w	r3, r3, #4
 8000410:	6093      	str	r3, [r2, #8]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ServoMotors */
  osThreadDef(ServoMotors, servo_motors, osPriorityNormal, 0, 128);
 8000412:	4b1a      	ldr	r3, [pc, #104]	; (800047c <main+0x178>)
 8000414:	f107 041c 	add.w	r4, r7, #28
 8000418:	461d      	mov	r5, r3
 800041a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800041c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800041e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000422:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ServoMotorsHandle = osThreadCreate(osThread(ServoMotors), NULL);
 8000426:	f107 031c 	add.w	r3, r7, #28
 800042a:	2100      	movs	r1, #0
 800042c:	4618      	mov	r0, r3
 800042e:	f005 f844 	bl	80054ba <osThreadCreate>
 8000432:	4603      	mov	r3, r0
 8000434:	4a12      	ldr	r2, [pc, #72]	; (8000480 <main+0x17c>)
 8000436:	6013      	str	r3, [r2, #0]

  /* definition and creation of EEPROMsave */
  osThreadDef(EEPROMsave, eeprom_save, osPriorityAboveNormal, 0, 128);
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <main+0x180>)
 800043a:	463c      	mov	r4, r7
 800043c:	461d      	mov	r5, r3
 800043e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000442:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000446:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EEPROMsaveHandle = osThreadCreate(osThread(EEPROMsave), NULL);
 800044a:	463b      	mov	r3, r7
 800044c:	2100      	movs	r1, #0
 800044e:	4618      	mov	r0, r3
 8000450:	f005 f833 	bl	80054ba <osThreadCreate>
 8000454:	4603      	mov	r3, r0
 8000456:	4a0c      	ldr	r2, [pc, #48]	; (8000488 <main+0x184>)
 8000458:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800045a:	f005 f827 	bl	80054ac <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800045e:	e7fe      	b.n	800045e <main+0x15a>
 8000460:	20000378 	.word	0x20000378
 8000464:	40012c00 	.word	0x40012c00
 8000468:	48000800 	.word	0x48000800
 800046c:	40021000 	.word	0x40021000
 8000470:	40020008 	.word	0x40020008
 8000474:	50000040 	.word	0x50000040
 8000478:	200003cc 	.word	0x200003cc
 800047c:	08007db0 	.word	0x08007db0
 8000480:	200003c4 	.word	0x200003c4
 8000484:	08007dcc 	.word	0x08007dcc
 8000488:	200003c8 	.word	0x200003c8

0800048c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b09c      	sub	sp, #112	; 0x70
 8000490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000492:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000496:	2228      	movs	r2, #40	; 0x28
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f007 fc68 	bl	8007d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004b0:	463b      	mov	r3, r7
 80004b2:	2234      	movs	r2, #52	; 0x34
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f007 fc5a 	bl	8007d70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004bc:	2302      	movs	r3, #2
 80004be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c0:	2301      	movs	r3, #1
 80004c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c4:	2310      	movs	r3, #16
 80004c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c8:	2302      	movs	r3, #2
 80004ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004cc:	2300      	movs	r3, #0
 80004ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80004d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80004d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 f9ce 	bl	800287c <HAL_RCC_OscConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004e6:	f000 fa82 	bl	80009ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ea:	230f      	movs	r3, #15
 80004ec:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ee:	2302      	movs	r3, #2
 80004f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000502:	2100      	movs	r1, #0
 8000504:	4618      	mov	r0, r3
 8000506:	f003 f9f7 	bl	80038f8 <HAL_RCC_ClockConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000510:	f000 fa6d 	bl	80009ee <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 8000514:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000518:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800051e:	2300      	movs	r3, #0
 8000520:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000522:	463b      	mov	r3, r7
 8000524:	4618      	mov	r0, r3
 8000526:	f003 fc2d 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000530:	f000 fa5d 	bl	80009ee <Error_Handler>
  }
}
 8000534:	bf00      	nop
 8000536:	3770      	adds	r7, #112	; 0x70
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
 8000550:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000552:	4b3e      	ldr	r3, [pc, #248]	; (800064c <MX_ADC1_Init+0x110>)
 8000554:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000558:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800055a:	4b3c      	ldr	r3, [pc, #240]	; (800064c <MX_ADC1_Init+0x110>)
 800055c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000560:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000562:	4b3a      	ldr	r3, [pc, #232]	; (800064c <MX_ADC1_Init+0x110>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000568:	4b38      	ldr	r3, [pc, #224]	; (800064c <MX_ADC1_Init+0x110>)
 800056a:	2201      	movs	r2, #1
 800056c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800056e:	4b37      	ldr	r3, [pc, #220]	; (800064c <MX_ADC1_Init+0x110>)
 8000570:	2200      	movs	r2, #0
 8000572:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000574:	4b35      	ldr	r3, [pc, #212]	; (800064c <MX_ADC1_Init+0x110>)
 8000576:	2200      	movs	r2, #0
 8000578:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800057c:	4b33      	ldr	r3, [pc, #204]	; (800064c <MX_ADC1_Init+0x110>)
 800057e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000582:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000584:	4b31      	ldr	r3, [pc, #196]	; (800064c <MX_ADC1_Init+0x110>)
 8000586:	f44f 7210 	mov.w	r2, #576	; 0x240
 800058a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800058c:	4b2f      	ldr	r3, [pc, #188]	; (800064c <MX_ADC1_Init+0x110>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000592:	4b2e      	ldr	r3, [pc, #184]	; (800064c <MX_ADC1_Init+0x110>)
 8000594:	2204      	movs	r2, #4
 8000596:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000598:	4b2c      	ldr	r3, [pc, #176]	; (800064c <MX_ADC1_Init+0x110>)
 800059a:	2200      	movs	r2, #0
 800059c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a0:	4b2a      	ldr	r3, [pc, #168]	; (800064c <MX_ADC1_Init+0x110>)
 80005a2:	2204      	movs	r2, #4
 80005a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a6:	4b29      	ldr	r3, [pc, #164]	; (800064c <MX_ADC1_Init+0x110>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <MX_ADC1_Init+0x110>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005b2:	4826      	ldr	r0, [pc, #152]	; (800064c <MX_ADC1_Init+0x110>)
 80005b4:	f000 fc46 	bl	8000e44 <HAL_ADC_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80005be:	f000 fa16 	bl	80009ee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005c6:	2301      	movs	r3, #1
 80005c8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80005ce:	2303      	movs	r3, #3
 80005d0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	4619      	mov	r1, r3
 80005de:	481b      	ldr	r0, [pc, #108]	; (800064c <MX_ADC1_Init+0x110>)
 80005e0:	f000 fdb6 	bl	8001150 <HAL_ADC_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005ea:	f000 fa00 	bl	80009ee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	4619      	mov	r1, r3
 80005fa:	4814      	ldr	r0, [pc, #80]	; (800064c <MX_ADC1_Init+0x110>)
 80005fc:	f000 fda8 	bl	8001150 <HAL_ADC_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000606:	f000 f9f2 	bl	80009ee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800060a:	2305      	movs	r3, #5
 800060c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800060e:	2303      	movs	r3, #3
 8000610:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	4619      	mov	r1, r3
 8000616:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_ADC1_Init+0x110>)
 8000618:	f000 fd9a 	bl	8001150 <HAL_ADC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000622:	f000 f9e4 	bl	80009ee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000626:	230b      	movs	r3, #11
 8000628:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800062a:	2304      	movs	r3, #4
 800062c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	4619      	mov	r1, r3
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <MX_ADC1_Init+0x110>)
 8000634:	f000 fd8c 	bl	8001150 <HAL_ADC_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800063e:	f000 f9d6 	bl	80009ee <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200002d4 	.word	0x200002d4

08000650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <MX_I2C1_Init+0x78>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_I2C1_Init+0x74>)
 800065c:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <MX_I2C1_Init+0x7c>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000668:	2201      	movs	r2, #1
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <MX_I2C1_Init+0x74>)
 800068c:	f001 fae8 	bl	8001c60 <HAL_I2C_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000696:	f000 f9aa 	bl	80009ee <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800069a:	2100      	movs	r1, #0
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <MX_I2C1_Init+0x74>)
 800069e:	f002 f855 	bl	800274c <HAL_I2CEx_ConfigAnalogFilter>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a8:	f000 f9a1 	bl	80009ee <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_I2C1_Init+0x74>)
 80006b0:	f002 f897 	bl	80027e2 <HAL_I2CEx_ConfigDigitalFilter>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ba:	f000 f998 	bl	80009ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000324 	.word	0x20000324
 80006c8:	40005400 	.word	0x40005400
 80006cc:	2000090e 	.word	0x2000090e

080006d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09a      	sub	sp, #104	; 0x68
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	615a      	str	r2, [r3, #20]
 8000702:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	222c      	movs	r2, #44	; 0x2c
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f007 fb30 	bl	8007d70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000710:	4b56      	ldr	r3, [pc, #344]	; (800086c <MX_TIM1_Init+0x19c>)
 8000712:	4a57      	ldr	r2, [pc, #348]	; (8000870 <MX_TIM1_Init+0x1a0>)
 8000714:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8000716:	4b55      	ldr	r3, [pc, #340]	; (800086c <MX_TIM1_Init+0x19c>)
 8000718:	221f      	movs	r2, #31
 800071a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071c:	4b53      	ldr	r3, [pc, #332]	; (800086c <MX_TIM1_Init+0x19c>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000722:	4b52      	ldr	r3, [pc, #328]	; (800086c <MX_TIM1_Init+0x19c>)
 8000724:	f242 7210 	movw	r2, #10000	; 0x2710
 8000728:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072a:	4b50      	ldr	r3, [pc, #320]	; (800086c <MX_TIM1_Init+0x19c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000730:	4b4e      	ldr	r3, [pc, #312]	; (800086c <MX_TIM1_Init+0x19c>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b4d      	ldr	r3, [pc, #308]	; (800086c <MX_TIM1_Init+0x19c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800073c:	484b      	ldr	r0, [pc, #300]	; (800086c <MX_TIM1_Init+0x19c>)
 800073e:	f003 fcb3 	bl	80040a8 <HAL_TIM_Base_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000748:	f000 f951 	bl	80009ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000750:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000752:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000756:	4619      	mov	r1, r3
 8000758:	4844      	ldr	r0, [pc, #272]	; (800086c <MX_TIM1_Init+0x19c>)
 800075a:	f004 f8cd 	bl	80048f8 <HAL_TIM_ConfigClockSource>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000764:	f000 f943 	bl	80009ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000768:	4840      	ldr	r0, [pc, #256]	; (800086c <MX_TIM1_Init+0x19c>)
 800076a:	f003 fd49 	bl	8004200 <HAL_TIM_PWM_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000774:	f000 f93b 	bl	80009ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000778:	2320      	movs	r3, #32
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000784:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000788:	4619      	mov	r1, r3
 800078a:	4838      	ldr	r0, [pc, #224]	; (800086c <MX_TIM1_Init+0x19c>)
 800078c:	f004 fd7a 	bl	8005284 <HAL_TIMEx_MasterConfigSynchronization>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000796:	f000 f92a 	bl	80009ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079a:	2360      	movs	r3, #96	; 0x60
 800079c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 750;
 800079e:	f240 23ee 	movw	r3, #750	; 0x2ee
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	482a      	ldr	r0, [pc, #168]	; (800086c <MX_TIM1_Init+0x19c>)
 80007c2:	f003 ff85 	bl	80046d0 <HAL_TIM_PWM_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80007cc:	f000 f90f 	bl	80009ee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007d4:	2204      	movs	r2, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	4824      	ldr	r0, [pc, #144]	; (800086c <MX_TIM1_Init+0x19c>)
 80007da:	f003 ff79 	bl	80046d0 <HAL_TIM_PWM_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80007e4:	f000 f903 	bl	80009ee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ec:	2208      	movs	r2, #8
 80007ee:	4619      	mov	r1, r3
 80007f0:	481e      	ldr	r0, [pc, #120]	; (800086c <MX_TIM1_Init+0x19c>)
 80007f2:	f003 ff6d 	bl	80046d0 <HAL_TIM_PWM_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80007fc:	f000 f8f7 	bl	80009ee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000800:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000804:	220c      	movs	r2, #12
 8000806:	4619      	mov	r1, r3
 8000808:	4818      	ldr	r0, [pc, #96]	; (800086c <MX_TIM1_Init+0x19c>)
 800080a:	f003 ff61 	bl	80046d0 <HAL_TIM_PWM_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000814:	f000 f8eb 	bl	80009ee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800082c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000830:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800083a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4619      	mov	r1, r3
 800084c:	4807      	ldr	r0, [pc, #28]	; (800086c <MX_TIM1_Init+0x19c>)
 800084e:	f004 fd7f 	bl	8005350 <HAL_TIMEx_ConfigBreakDeadTime>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8000858:	f000 f8c9 	bl	80009ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <MX_TIM1_Init+0x19c>)
 800085e:	f000 f9ad 	bl	8000bbc <HAL_TIM_MspPostInit>

}
 8000862:	bf00      	nop
 8000864:	3768      	adds	r7, #104	; 0x68
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000378 	.word	0x20000378
 8000870:	40012c00 	.word	0x40012c00

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <MX_GPIO_Init+0x9c>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a20      	ldr	r2, [pc, #128]	; (8000910 <MX_GPIO_Init+0x9c>)
 8000890:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_GPIO_Init+0x9c>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_GPIO_Init+0x9c>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a1a      	ldr	r2, [pc, #104]	; (8000910 <MX_GPIO_Init+0x9c>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_GPIO_Init+0x9c>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_GPIO_Init+0x9c>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a14      	ldr	r2, [pc, #80]	; (8000910 <MX_GPIO_Init+0x9c>)
 80008c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c4:	6153      	str	r3, [r2, #20]
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_GPIO_Init+0x9c>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d8:	480e      	ldr	r0, [pc, #56]	; (8000914 <MX_GPIO_Init+0xa0>)
 80008da:	f001 f9a9 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <MX_GPIO_Init+0xa0>)
 80008e6:	f001 f9a3 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80008ea:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80008ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4619      	mov	r1, r3
 8000902:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_GPIO_Init+0xa0>)
 8000904:	f001 f822 	bl	800194c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40021000 	.word	0x40021000
 8000914:	48000800 	.word	0x48000800

08000918 <servo_motors>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_servo_motors */
void servo_motors(void const * argument)
{
 8000918:	b5b0      	push	{r4, r5, r7, lr}
 800091a:	b0a8      	sub	sp, #160	; 0xa0
 800091c:	af04      	add	r7, sp, #16
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000920:	2001      	movs	r0, #1
 8000922:	f004 fe16 	bl	8005552 <osDelay>
	  __asm__ volatile("NOP");
 8000926:	bf00      	nop
	  uint16_t address = 64;
 8000928:	2340      	movs	r3, #64	; 0x40
 800092a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	  char data_to_EEPROM[] = "ABCUUUUUUUUUUUUIIIIIIIIIIITTTTTTTTTTTFFFFFFFFFFFFSSSSSSSKKKKKK";
 800092e:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <servo_motors+0x9c>)
 8000930:	f107 040c 	add.w	r4, r7, #12
 8000934:	461d      	mov	r5, r3
 8000936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000942:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000946:	c407      	stmia	r4!, {r0, r1, r2}
 8000948:	8023      	strh	r3, [r4, #0]
 800094a:	3402      	adds	r4, #2
 800094c:	0c1b      	lsrs	r3, r3, #16
 800094e:	7023      	strb	r3, [r4, #0]
	  at24c256b_page_write(&hi2c1, I2C_ADDRESS_AT24C256B, (int8_t*)data_to_EEPROM, sizeof(data_to_EEPROM), address, GPIOC, GPIO_ODR_10);
 8000950:	f107 020c 	add.w	r2, r7, #12
 8000954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000958:	9302      	str	r3, [sp, #8]
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <servo_motors+0xa0>)
 800095c:	9301      	str	r3, [sp, #4]
 800095e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	233f      	movs	r3, #63	; 0x3f
 8000966:	21a0      	movs	r1, #160	; 0xa0
 8000968:	4814      	ldr	r0, [pc, #80]	; (80009bc <servo_motors+0xa4>)
 800096a:	f7ff fc31 	bl	80001d0 <at24c256b_page_write>
	  vTaskDelay(50); // Between write and read operation must be delay!
 800096e:	2032      	movs	r0, #50	; 0x32
 8000970:	f005 fd24 	bl	80063bc <vTaskDelay>
	  char buffer_for_seqread[64] = {0};
 8000974:	2300      	movs	r3, #0
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000978:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800097c:	223c      	movs	r2, #60	; 0x3c
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f007 f9f5 	bl	8007d70 <memset>
	  vTaskDelay(5);
 8000986:	2005      	movs	r0, #5
 8000988:	f005 fd18 	bl	80063bc <vTaskDelay>
	  at24c256b_sequential_read(&hi2c1, I2C_ADDRESS_AT24C256B, (int8_t*)buffer_for_seqread, sizeof(buffer_for_seqread), address, GPIOC, GPIO_ODR_10);
 800098c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000994:	9302      	str	r3, [sp, #8]
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <servo_motors+0xa0>)
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2340      	movs	r3, #64	; 0x40
 80009a2:	21a0      	movs	r1, #160	; 0xa0
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <servo_motors+0xa4>)
 80009a6:	f7ff fc33 	bl	8000210 <at24c256b_sequential_read>
	  vTaskDelay(100);
 80009aa:	2064      	movs	r0, #100	; 0x64
 80009ac:	f005 fd06 	bl	80063bc <vTaskDelay>
  {
 80009b0:	e7b6      	b.n	8000920 <servo_motors+0x8>
 80009b2:	bf00      	nop
 80009b4:	08007de8 	.word	0x08007de8
 80009b8:	48000800 	.word	0x48000800
 80009bc:	20000324 	.word	0x20000324

080009c0 <eeprom_save>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_eeprom_save */
void eeprom_save(void const * argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN eeprom_save */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f004 fdc2 	bl	8005552 <osDelay>
 80009ce:	e7fb      	b.n	80009c8 <eeprom_save+0x8>

080009d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009e0:	d101      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e2:	f000 fa0f 	bl	8000e04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f2:	b672      	cpsid	i
}
 80009f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <Error_Handler+0x8>

080009f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6193      	str	r3, [r2, #24]
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	61d3      	str	r3, [r2, #28]
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	210f      	movs	r1, #15
 8000a32:	f06f 0001 	mvn.w	r0, #1
 8000a36:	f000 ff5f 	bl	80018f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a68:	d13c      	bne.n	8000ae4 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a6a:	4b20      	ldr	r3, [pc, #128]	; (8000aec <HAL_ADC_MspInit+0xa4>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a1f      	ldr	r2, [pc, #124]	; (8000aec <HAL_ADC_MspInit+0xa4>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6153      	str	r3, [r2, #20]
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <HAL_ADC_MspInit+0xa4>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <HAL_ADC_MspInit+0xa4>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a19      	ldr	r2, [pc, #100]	; (8000aec <HAL_ADC_MspInit+0xa4>)
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <HAL_ADC_MspInit+0xa4>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_ADC_MspInit+0xa4>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	4a13      	ldr	r2, [pc, #76]	; (8000aec <HAL_ADC_MspInit+0xa4>)
 8000aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aa4:	6153      	str	r3, [r2, #20]
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_ADC_MspInit+0xa4>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA4     ------> ADC1_IN5
    PB0     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000ab2:	2313      	movs	r3, #19
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac8:	f000 ff40 	bl	800194c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000acc:	2301      	movs	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4804      	ldr	r0, [pc, #16]	; (8000af0 <HAL_ADC_MspInit+0xa8>)
 8000ae0:	f000 ff34 	bl	800194c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	; 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40021000 	.word	0x40021000
 8000af0:	48000400 	.word	0x48000400

08000af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_I2C_MspInit+0x7c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d128      	bne.n	8000b68 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_I2C_MspInit+0x80>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <HAL_I2C_MspInit+0x80>)
 8000b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b20:	6153      	str	r3, [r2, #20]
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_I2C_MspInit+0x80>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b34:	2312      	movs	r3, #18
 8000b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b40:	2304      	movs	r3, #4
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480b      	ldr	r0, [pc, #44]	; (8000b78 <HAL_I2C_MspInit+0x84>)
 8000b4c:	f000 fefe 	bl	800194c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_I2C_MspInit+0x80>)
 8000b52:	69db      	ldr	r3, [r3, #28]
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <HAL_I2C_MspInit+0x80>)
 8000b56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b5a:	61d3      	str	r3, [r2, #28]
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_I2C_MspInit+0x80>)
 8000b5e:	69db      	ldr	r3, [r3, #28]
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40005400 	.word	0x40005400
 8000b74:	40021000 	.word	0x40021000
 8000b78:	48000400 	.word	0x48000400

08000b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_TIM_Base_MspInit+0x38>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d10b      	bne.n	8000ba6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000b94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b98:	6193      	str	r3, [r2, #24]
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40012c00 	.word	0x40012c00
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <HAL_TIM_MspPostInit+0x64>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d11b      	bne.n	8000c16 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_TIM_MspPostInit+0x68>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <HAL_TIM_MspPostInit+0x68>)
 8000be4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000be8:	6153      	str	r3, [r2, #20]
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_TIM_MspPostInit+0x68>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bf6:	230f      	movs	r3, #15
 8000bf8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_TIM_MspPostInit+0x6c>)
 8000c12:	f000 fe9b 	bl	800194c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	3720      	adds	r7, #32
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40012c00 	.word	0x40012c00
 8000c24:	40021000 	.word	0x40021000
 8000c28:	48000800 	.word	0x48000800

08000c2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08e      	sub	sp, #56	; 0x38
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000c3c:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <HAL_InitTick+0xe4>)
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	4a33      	ldr	r2, [pc, #204]	; (8000d10 <HAL_InitTick+0xe4>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	61d3      	str	r3, [r2, #28]
 8000c48:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <HAL_InitTick+0xe4>)
 8000c4a:	69db      	ldr	r3, [r3, #28]
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c54:	f107 0210 	add.w	r2, r7, #16
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 f85e 	bl	8003d20 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d103      	bne.n	8000c76 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c6e:	f003 f835 	bl	8003cdc <HAL_RCC_GetPCLK1Freq>
 8000c72:	6378      	str	r0, [r7, #52]	; 0x34
 8000c74:	e004      	b.n	8000c80 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c76:	f003 f831 	bl	8003cdc <HAL_RCC_GetPCLK1Freq>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c82:	4a24      	ldr	r2, [pc, #144]	; (8000d14 <HAL_InitTick+0xe8>)
 8000c84:	fba2 2303 	umull	r2, r3, r2, r3
 8000c88:	0c9b      	lsrs	r3, r3, #18
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000c8e:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <HAL_InitTick+0xec>)
 8000c90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000c96:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <HAL_InitTick+0xec>)
 8000c98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c9c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000c9e:	4a1e      	ldr	r2, [pc, #120]	; (8000d18 <HAL_InitTick+0xec>)
 8000ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <HAL_InitTick+0xec>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <HAL_InitTick+0xec>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <HAL_InitTick+0xec>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000cb6:	4818      	ldr	r0, [pc, #96]	; (8000d18 <HAL_InitTick+0xec>)
 8000cb8:	f003 f9f6 	bl	80040a8 <HAL_TIM_Base_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d11b      	bne.n	8000d02 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000cca:	4813      	ldr	r0, [pc, #76]	; (8000d18 <HAL_InitTick+0xec>)
 8000ccc:	f003 fa44 	bl	8004158 <HAL_TIM_Base_Start_IT>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d111      	bne.n	8000d02 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cde:	201c      	movs	r0, #28
 8000ce0:	f000 fe26 	bl	8001930 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b0f      	cmp	r3, #15
 8000ce8:	d808      	bhi.n	8000cfc <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000cea:	2200      	movs	r2, #0
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	201c      	movs	r0, #28
 8000cf0:	f000 fe02 	bl	80018f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf4:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <HAL_InitTick+0xf0>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	e002      	b.n	8000d02 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3738      	adds	r7, #56	; 0x38
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000
 8000d14:	431bde83 	.word	0x431bde83
 8000d18:	200003d4 	.word	0x200003d4
 8000d1c:	20000004 	.word	0x20000004

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <TIM2_IRQHandler+0x10>)
 8000d52:	f003 fb9d 	bl	8004490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200003d4 	.word	0x200003d4

08000d60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d88:	f7ff ffea 	bl	8000d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d8e:	490d      	ldr	r1, [pc, #52]	; (8000dc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <LoopForever+0xe>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da4:	4c0a      	ldr	r4, [pc, #40]	; (8000dd0 <LoopForever+0x16>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db2:	f006 ffab 	bl	8007d0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000db6:	f7ff faa5 	bl	8000304 <main>

08000dba <LoopForever>:

LoopForever:
    b LoopForever
 8000dba:	e7fe      	b.n	8000dba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dbc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000dc8:	08007e80 	.word	0x08007e80
  ldr r2, =_sbss
 8000dcc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000dd0:	20001e1c 	.word	0x20001e1c

08000dd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC1_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_Init+0x28>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_Init+0x28>)
 8000de2:	f043 0310 	orr.w	r3, r3, #16
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 fd7a 	bl	80018e2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	200f      	movs	r0, #15
 8000df0:	f7ff ff1c 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff fe00 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40022000 	.word	0x40022000

08000e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000420 	.word	0x20000420

08000e2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000420 	.word	0x20000420

08000e44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b09a      	sub	sp, #104	; 0x68
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d101      	bne.n	8000e64 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e169      	b.n	8001138 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d176      	bne.n	8000f64 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d152      	bne.n	8000f24 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff fdd5 	bl	8000a48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d13b      	bne.n	8000f24 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 fc05 	bl	80016bc <ADC_Disable>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f003 0310 	and.w	r3, r3, #16
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d12f      	bne.n	8000f24 <HAL_ADC_Init+0xe0>
 8000ec4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d12b      	bne.n	8000f24 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ed4:	f023 0302 	bic.w	r3, r3, #2
 8000ed8:	f043 0202 	orr.w	r2, r3, #2
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000eee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000efe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f00:	4b8f      	ldr	r3, [pc, #572]	; (8001140 <HAL_ADC_Init+0x2fc>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a8f      	ldr	r2, [pc, #572]	; (8001144 <HAL_ADC_Init+0x300>)
 8000f06:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0a:	0c9a      	lsrs	r2, r3, #18
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f16:	e002      	b.n	8000f1e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1f9      	bne.n	8000f18 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d007      	beq.n	8000f42 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f40:	d110      	bne.n	8000f64 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f023 0312 	bic.w	r3, r3, #18
 8000f4a:	f043 0210 	orr.w	r2, r3, #16
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f043 0201 	orr.w	r2, r3, #1
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 0310 	and.w	r3, r3, #16
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f040 80d6 	bne.w	800111e <HAL_ADC_Init+0x2da>
 8000f72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f040 80d1 	bne.w	800111e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f040 80c9 	bne.w	800111e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f94:	f043 0202 	orr.w	r2, r3, #2
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f9c:	4b6a      	ldr	r3, [pc, #424]	; (8001148 <HAL_ADC_Init+0x304>)
 8000f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d108      	bne.n	8000fc4 <HAL_ADC_Init+0x180>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d101      	bne.n	8000fc4 <HAL_ADC_Init+0x180>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <HAL_ADC_Init+0x182>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d11c      	bne.n	8001004 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fca:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d010      	beq.n	8000ff2 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d107      	bne.n	8000fec <HAL_ADC_Init+0x1a8>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d101      	bne.n	8000fec <HAL_ADC_Init+0x1a8>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <HAL_ADC_Init+0x1aa>
 8000fec:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d108      	bne.n	8001004 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	431a      	orrs	r2, r3
 8001000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001002:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	7e5b      	ldrb	r3, [r3, #25]
 8001008:	035b      	lsls	r3, r3, #13
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800100e:	2a01      	cmp	r2, #1
 8001010:	d002      	beq.n	8001018 <HAL_ADC_Init+0x1d4>
 8001012:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001016:	e000      	b.n	800101a <HAL_ADC_Init+0x1d6>
 8001018:	2200      	movs	r2, #0
 800101a:	431a      	orrs	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	431a      	orrs	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	4313      	orrs	r3, r2
 8001028:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800102a:	4313      	orrs	r3, r2
 800102c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d11b      	bne.n	8001070 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7e5b      	ldrb	r3, [r3, #25]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d109      	bne.n	8001054 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	3b01      	subs	r3, #1
 8001046:	045a      	lsls	r2, r3, #17
 8001048:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800104a:	4313      	orrs	r3, r2
 800104c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001050:	663b      	str	r3, [r7, #96]	; 0x60
 8001052:	e00d      	b.n	8001070 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800105c:	f043 0220 	orr.w	r2, r3, #32
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001068:	f043 0201 	orr.w	r2, r3, #1
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	2b01      	cmp	r3, #1
 8001076:	d007      	beq.n	8001088 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	4313      	orrs	r3, r2
 8001082:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001084:	4313      	orrs	r3, r2
 8001086:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b00      	cmp	r3, #0
 8001094:	d114      	bne.n	80010c0 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	6812      	ldr	r2, [r2, #0]
 80010a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010a4:	f023 0302 	bic.w	r3, r3, #2
 80010a8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	7e1b      	ldrb	r3, [r3, #24]
 80010ae:	039a      	lsls	r2, r3, #14
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4313      	orrs	r3, r2
 80010ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010bc:	4313      	orrs	r3, r2
 80010be:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <HAL_ADC_Init+0x308>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80010d0:	430b      	orrs	r3, r1
 80010d2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10c      	bne.n	80010f6 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f023 010f 	bic.w	r1, r3, #15
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	1e5a      	subs	r2, r3, #1
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	631a      	str	r2, [r3, #48]	; 0x30
 80010f4:	e007      	b.n	8001106 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 020f 	bic.w	r2, r2, #15
 8001104:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f023 0303 	bic.w	r3, r3, #3
 8001114:	f043 0201 	orr.w	r2, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	641a      	str	r2, [r3, #64]	; 0x40
 800111c:	e00a      	b.n	8001134 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f023 0312 	bic.w	r3, r3, #18
 8001126:	f043 0210 	orr.w	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800112e:	2301      	movs	r3, #1
 8001130:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001134:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001138:	4618      	mov	r0, r3
 800113a:	3768      	adds	r7, #104	; 0x68
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000000 	.word	0x20000000
 8001144:	431bde83 	.word	0x431bde83
 8001148:	50000300 	.word	0x50000300
 800114c:	fff0c007 	.word	0xfff0c007

08001150 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001150:	b480      	push	{r7}
 8001152:	b09b      	sub	sp, #108	; 0x6c
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_ADC_ConfigChannel+0x22>
 800116e:	2302      	movs	r3, #2
 8001170:	e299      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x556>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	2b00      	cmp	r3, #0
 8001186:	f040 827d 	bne.w	8001684 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b04      	cmp	r3, #4
 8001190:	d81c      	bhi.n	80011cc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	461a      	mov	r2, r3
 80011a6:	231f      	movs	r3, #31
 80011a8:	4093      	lsls	r3, r2
 80011aa:	43db      	mvns	r3, r3
 80011ac:	4019      	ands	r1, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fa00 f203 	lsl.w	r2, r0, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	631a      	str	r2, [r3, #48]	; 0x30
 80011ca:	e063      	b.n	8001294 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b09      	cmp	r3, #9
 80011d2:	d81e      	bhi.n	8001212 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	3b1e      	subs	r3, #30
 80011e8:	221f      	movs	r2, #31
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	4019      	ands	r1, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	6818      	ldr	r0, [r3, #0]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	3b1e      	subs	r3, #30
 8001204:	fa00 f203 	lsl.w	r2, r0, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	635a      	str	r2, [r3, #52]	; 0x34
 8001210:	e040      	b.n	8001294 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b0e      	cmp	r3, #14
 8001218:	d81e      	bhi.n	8001258 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	3b3c      	subs	r3, #60	; 0x3c
 800122e:	221f      	movs	r2, #31
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	4019      	ands	r1, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	3b3c      	subs	r3, #60	; 0x3c
 800124a:	fa00 f203 	lsl.w	r2, r0, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	639a      	str	r2, [r3, #56]	; 0x38
 8001256:	e01d      	b.n	8001294 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4413      	add	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	3b5a      	subs	r3, #90	; 0x5a
 800126c:	221f      	movs	r2, #31
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	4019      	ands	r1, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	3b5a      	subs	r3, #90	; 0x5a
 8001288:	fa00 f203 	lsl.w	r2, r0, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f040 80e5 	bne.w	800146e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b09      	cmp	r3, #9
 80012aa:	d91c      	bls.n	80012e6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6999      	ldr	r1, [r3, #24]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	3b1e      	subs	r3, #30
 80012be:	2207      	movs	r2, #7
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	4019      	ands	r1, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	6898      	ldr	r0, [r3, #8]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	3b1e      	subs	r3, #30
 80012d8:	fa00 f203 	lsl.w	r2, r0, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	619a      	str	r2, [r3, #24]
 80012e4:	e019      	b.n	800131a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6959      	ldr	r1, [r3, #20]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	2207      	movs	r2, #7
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	4019      	ands	r1, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	6898      	ldr	r0, [r3, #8]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	fa00 f203 	lsl.w	r2, r0, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	695a      	ldr	r2, [r3, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	08db      	lsrs	r3, r3, #3
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	3b01      	subs	r3, #1
 8001338:	2b03      	cmp	r3, #3
 800133a:	d84f      	bhi.n	80013dc <HAL_ADC_ConfigChannel+0x28c>
 800133c:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <HAL_ADC_ConfigChannel+0x1f4>)
 800133e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001342:	bf00      	nop
 8001344:	08001355 	.word	0x08001355
 8001348:	08001377 	.word	0x08001377
 800134c:	08001399 	.word	0x08001399
 8001350:	080013bb 	.word	0x080013bb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800135a:	4b99      	ldr	r3, [pc, #612]	; (80015c0 <HAL_ADC_ConfigChannel+0x470>)
 800135c:	4013      	ands	r3, r2
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	0691      	lsls	r1, r2, #26
 8001364:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001366:	430a      	orrs	r2, r1
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001372:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001374:	e07e      	b.n	8001474 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800137c:	4b90      	ldr	r3, [pc, #576]	; (80015c0 <HAL_ADC_ConfigChannel+0x470>)
 800137e:	4013      	ands	r3, r2
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	6812      	ldr	r2, [r2, #0]
 8001384:	0691      	lsls	r1, r2, #26
 8001386:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001388:	430a      	orrs	r2, r1
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001394:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001396:	e06d      	b.n	8001474 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800139e:	4b88      	ldr	r3, [pc, #544]	; (80015c0 <HAL_ADC_ConfigChannel+0x470>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	0691      	lsls	r1, r2, #26
 80013a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013aa:	430a      	orrs	r2, r1
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013b6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013b8:	e05c      	b.n	8001474 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80013c0:	4b7f      	ldr	r3, [pc, #508]	; (80015c0 <HAL_ADC_ConfigChannel+0x470>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	0691      	lsls	r1, r2, #26
 80013ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013cc:	430a      	orrs	r2, r1
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013d8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013da:	e04b      	b.n	8001474 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	069b      	lsls	r3, r3, #26
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d107      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013fe:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001406:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	069b      	lsls	r3, r3, #26
 8001410:	429a      	cmp	r2, r3
 8001412:	d107      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001422:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800142a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	069b      	lsls	r3, r3, #26
 8001434:	429a      	cmp	r2, r3
 8001436:	d107      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001446:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800144e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	069b      	lsls	r3, r3, #26
 8001458:	429a      	cmp	r2, r3
 800145a:	d10a      	bne.n	8001472 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800146a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800146c:	e001      	b.n	8001472 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800146e:	bf00      	nop
 8001470:	e000      	b.n	8001474 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001472:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	2b01      	cmp	r3, #1
 8001480:	d108      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x344>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x344>
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <HAL_ADC_ConfigChannel+0x346>
 8001494:	2300      	movs	r3, #0
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 80ff 	bne.w	800169a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d00f      	beq.n	80014c4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2201      	movs	r2, #1
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	400a      	ands	r2, r1
 80014be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80014c2:	e049      	b.n	8001558 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2201      	movs	r2, #1
 80014d2:	409a      	lsls	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b09      	cmp	r3, #9
 80014e4:	d91c      	bls.n	8001520 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6999      	ldr	r1, [r3, #24]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	3b1b      	subs	r3, #27
 80014f8:	2207      	movs	r2, #7
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	4019      	ands	r1, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	6898      	ldr	r0, [r3, #8]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4613      	mov	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	3b1b      	subs	r3, #27
 8001512:	fa00 f203 	lsl.w	r2, r0, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	619a      	str	r2, [r3, #24]
 800151e:	e01b      	b.n	8001558 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6959      	ldr	r1, [r3, #20]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	2207      	movs	r2, #7
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	4019      	ands	r1, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	6898      	ldr	r0, [r3, #8]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	fa00 f203 	lsl.w	r2, r0, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <HAL_ADC_ConfigChannel+0x474>)
 800155a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b10      	cmp	r3, #16
 8001562:	d105      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800156c:	2b00      	cmp	r3, #0
 800156e:	d014      	beq.n	800159a <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001574:	2b11      	cmp	r3, #17
 8001576:	d105      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00a      	beq.n	800159a <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001588:	2b12      	cmp	r3, #18
 800158a:	f040 8086 	bne.w	800169a <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800158e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001596:	2b00      	cmp	r3, #0
 8001598:	d17f      	bne.n	800169a <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d10d      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x478>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d106      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x478>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e005      	b.n	80015ca <HAL_ADC_ConfigChannel+0x47a>
 80015be:	bf00      	nop
 80015c0:	83fff000 	.word	0x83fff000
 80015c4:	50000300 	.word	0x50000300
 80015c8:	2300      	movs	r3, #0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d150      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015ce:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d010      	beq.n	80015f6 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d107      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x4a0>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x4a0>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x4a2>
 80015f0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d13c      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b10      	cmp	r3, #16
 80015fc:	d11d      	bne.n	800163a <HAL_ADC_ConfigChannel+0x4ea>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001606:	d118      	bne.n	800163a <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001612:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001614:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <HAL_ADC_ConfigChannel+0x564>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a27      	ldr	r2, [pc, #156]	; (80016b8 <HAL_ADC_ConfigChannel+0x568>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	0c9a      	lsrs	r2, r3, #18
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800162a:	e002      	b.n	8001632 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	3b01      	subs	r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f9      	bne.n	800162c <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001638:	e02e      	b.n	8001698 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b11      	cmp	r3, #17
 8001640:	d10b      	bne.n	800165a <HAL_ADC_ConfigChannel+0x50a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800164a:	d106      	bne.n	800165a <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800164c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001656:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001658:	e01e      	b.n	8001698 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b12      	cmp	r3, #18
 8001660:	d11a      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800166a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800166c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800166e:	e013      	b.n	8001698 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	f043 0220 	orr.w	r2, r3, #32
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001682:	e00a      	b.n	800169a <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f043 0220 	orr.w	r2, r3, #32
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001696:	e000      	b.n	800169a <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001698:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	376c      	adds	r7, #108	; 0x6c
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000000 	.word	0x20000000
 80016b8:	431bde83 	.word	0x431bde83

080016bc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d108      	bne.n	80016e8 <ADC_Disable+0x2c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <ADC_Disable+0x2c>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <ADC_Disable+0x2e>
 80016e8:	2300      	movs	r3, #0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d047      	beq.n	800177e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 030d 	and.w	r3, r3, #13
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d10f      	bne.n	800171c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0202 	orr.w	r2, r2, #2
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2203      	movs	r2, #3
 8001712:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001714:	f7ff fb8a 	bl	8000e2c <HAL_GetTick>
 8001718:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800171a:	e029      	b.n	8001770 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f043 0210 	orr.w	r2, r3, #16
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	f043 0201 	orr.w	r2, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e023      	b.n	8001780 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001738:	f7ff fb78 	bl	8000e2c <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d914      	bls.n	8001770 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b01      	cmp	r3, #1
 8001752:	d10d      	bne.n	8001770 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f043 0210 	orr.w	r2, r3, #16
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e007      	b.n	8001780 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b01      	cmp	r3, #1
 800177c:	d0dc      	beq.n	8001738 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4907      	ldr	r1, [pc, #28]	; (8001824 <__NVIC_EnableIRQ+0x38>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ff4c 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800190a:	f7ff ff61 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 800190e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	6978      	ldr	r0, [r7, #20]
 8001916:	f7ff ffb1 	bl	800187c <NVIC_EncodePriority>
 800191a:	4602      	mov	r2, r0
 800191c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001920:	4611      	mov	r1, r2
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ff80 	bl	8001828 <__NVIC_SetPriority>
}
 8001928:	bf00      	nop
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff54 	bl	80017ec <__NVIC_EnableIRQ>
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195a:	e14e      	b.n	8001bfa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2101      	movs	r1, #1
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 8140 	beq.w	8001bf4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d005      	beq.n	800198c <HAL_GPIO_Init+0x40>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d130      	bne.n	80019ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	2203      	movs	r2, #3
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c2:	2201      	movs	r2, #1
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	f003 0201 	and.w	r2, r3, #1
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d017      	beq.n	8001a2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	2203      	movs	r2, #3
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d123      	bne.n	8001a7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	08da      	lsrs	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3208      	adds	r2, #8
 8001a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	08da      	lsrs	r2, r3, #3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3208      	adds	r2, #8
 8001a78:	6939      	ldr	r1, [r7, #16]
 8001a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0203 	and.w	r2, r3, #3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 809a 	beq.w	8001bf4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac0:	4b55      	ldr	r3, [pc, #340]	; (8001c18 <HAL_GPIO_Init+0x2cc>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4a54      	ldr	r2, [pc, #336]	; (8001c18 <HAL_GPIO_Init+0x2cc>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b52      	ldr	r3, [pc, #328]	; (8001c18 <HAL_GPIO_Init+0x2cc>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad8:	4a50      	ldr	r2, [pc, #320]	; (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	3302      	adds	r3, #2
 8001ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	220f      	movs	r2, #15
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b02:	d013      	beq.n	8001b2c <HAL_GPIO_Init+0x1e0>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a46      	ldr	r2, [pc, #280]	; (8001c20 <HAL_GPIO_Init+0x2d4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00d      	beq.n	8001b28 <HAL_GPIO_Init+0x1dc>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a45      	ldr	r2, [pc, #276]	; (8001c24 <HAL_GPIO_Init+0x2d8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d007      	beq.n	8001b24 <HAL_GPIO_Init+0x1d8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a44      	ldr	r2, [pc, #272]	; (8001c28 <HAL_GPIO_Init+0x2dc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_GPIO_Init+0x1d4>
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e006      	b.n	8001b2e <HAL_GPIO_Init+0x1e2>
 8001b20:	2305      	movs	r3, #5
 8001b22:	e004      	b.n	8001b2e <HAL_GPIO_Init+0x1e2>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e002      	b.n	8001b2e <HAL_GPIO_Init+0x1e2>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_GPIO_Init+0x1e2>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	f002 0203 	and.w	r2, r2, #3
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	4093      	lsls	r3, r2
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b3e:	4937      	ldr	r1, [pc, #220]	; (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4c:	4b37      	ldr	r3, [pc, #220]	; (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b70:	4a2e      	ldr	r2, [pc, #184]	; (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b76:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b9a:	4a24      	ldr	r2, [pc, #144]	; (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bc4:	4a19      	ldr	r2, [pc, #100]	; (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bee:	4a0f      	ldr	r2, [pc, #60]	; (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f47f aea9 	bne.w	800195c <HAL_GPIO_Init+0x10>
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	48000400 	.word	0x48000400
 8001c24:	48000800 	.word	0x48000800
 8001c28:	48000c00 	.word	0x48000c00
 8001c2c:	40010400 	.word	0x40010400

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c4c:	e002      	b.n	8001c54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c4e:	887a      	ldrh	r2, [r7, #2]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e081      	b.n	8001d76 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7fe ff34 	bl	8000af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2224      	movs	r2, #36	; 0x24
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0201 	bic.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d107      	bne.n	8001cda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	e006      	b.n	8001ce8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ce6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d104      	bne.n	8001cfa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cf8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69d9      	ldr	r1, [r3, #28]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1a      	ldr	r2, [r3, #32]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	4608      	mov	r0, r1
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4603      	mov	r3, r0
 8001d90:	817b      	strh	r3, [r7, #10]
 8001d92:	460b      	mov	r3, r1
 8001d94:	813b      	strh	r3, [r7, #8]
 8001d96:	4613      	mov	r3, r2
 8001d98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	f040 80f9 	bne.w	8001f9a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_I2C_Mem_Write+0x34>
 8001dae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0ed      	b.n	8001f9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_I2C_Mem_Write+0x4e>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e0e6      	b.n	8001f9c <HAL_I2C_Mem_Write+0x21c>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dd6:	f7ff f829 	bl	8000e2c <HAL_GetTick>
 8001dda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2319      	movs	r3, #25
 8001de2:	2201      	movs	r2, #1
 8001de4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 fac3 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0d1      	b.n	8001f9c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2221      	movs	r2, #33	; 0x21
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2240      	movs	r2, #64	; 0x40
 8001e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a3a      	ldr	r2, [r7, #32]
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e20:	88f8      	ldrh	r0, [r7, #6]
 8001e22:	893a      	ldrh	r2, [r7, #8]
 8001e24:	8979      	ldrh	r1, [r7, #10]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	9301      	str	r3, [sp, #4]
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	4603      	mov	r3, r0
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 f9d3 	bl	80021dc <I2C_RequestMemoryWrite>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0a9      	b.n	8001f9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2bff      	cmp	r3, #255	; 0xff
 8001e50:	d90e      	bls.n	8001e70 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	22ff      	movs	r2, #255	; 0xff
 8001e56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	8979      	ldrh	r1, [r7, #10]
 8001e60:	2300      	movs	r3, #0
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 fc3d 	bl	80026e8 <I2C_TransferConfig>
 8001e6e:	e00f      	b.n	8001e90 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	8979      	ldrh	r1, [r7, #10]
 8001e82:	2300      	movs	r3, #0
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 fc2c 	bl	80026e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 fabc 	bl	8002412 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e07b      	b.n	8001f9c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	781a      	ldrb	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d034      	beq.n	8001f48 <HAL_I2C_Mem_Write+0x1c8>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d130      	bne.n	8001f48 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eec:	2200      	movs	r2, #0
 8001eee:	2180      	movs	r1, #128	; 0x80
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 fa3f 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e04d      	b.n	8001f9c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2bff      	cmp	r3, #255	; 0xff
 8001f08:	d90e      	bls.n	8001f28 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	22ff      	movs	r2, #255	; 0xff
 8001f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	8979      	ldrh	r1, [r7, #10]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 fbe1 	bl	80026e8 <I2C_TransferConfig>
 8001f26:	e00f      	b.n	8001f48 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	8979      	ldrh	r1, [r7, #10]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 fbd0 	bl	80026e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d19e      	bne.n	8001e90 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 faa2 	bl	80024a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e01a      	b.n	8001f9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_I2C_Mem_Write+0x224>)
 8001f7a:	400b      	ands	r3, r1
 8001f7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2220      	movs	r2, #32
 8001f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e000      	b.n	8001f9c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001f9a:	2302      	movs	r3, #2
  }
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	fe00e800 	.word	0xfe00e800

08001fa8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	817b      	strh	r3, [r7, #10]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	813b      	strh	r3, [r7, #8]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	f040 80fd 	bne.w	80021ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <HAL_I2C_Mem_Read+0x34>
 8001fd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d105      	bne.n	8001fe8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fe2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f1      	b.n	80021cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_I2C_Mem_Read+0x4e>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e0ea      	b.n	80021cc <HAL_I2C_Mem_Read+0x224>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ffe:	f7fe ff15 	bl	8000e2c <HAL_GetTick>
 8002002:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2319      	movs	r3, #25
 800200a:	2201      	movs	r2, #1
 800200c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f9af 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0d5      	b.n	80021cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2222      	movs	r2, #34	; 0x22
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2240      	movs	r2, #64	; 0x40
 800202c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a3a      	ldr	r2, [r7, #32]
 800203a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002040:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002048:	88f8      	ldrh	r0, [r7, #6]
 800204a:	893a      	ldrh	r2, [r7, #8]
 800204c:	8979      	ldrh	r1, [r7, #10]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	4603      	mov	r3, r0
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 f913 	bl	8002284 <I2C_RequestMemoryRead>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0ad      	b.n	80021cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	2bff      	cmp	r3, #255	; 0xff
 8002078:	d90e      	bls.n	8002098 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	22ff      	movs	r2, #255	; 0xff
 800207e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002084:	b2da      	uxtb	r2, r3
 8002086:	8979      	ldrh	r1, [r7, #10]
 8002088:	4b52      	ldr	r3, [pc, #328]	; (80021d4 <HAL_I2C_Mem_Read+0x22c>)
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 fb29 	bl	80026e8 <I2C_TransferConfig>
 8002096:	e00f      	b.n	80020b8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	8979      	ldrh	r1, [r7, #10]
 80020aa:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <HAL_I2C_Mem_Read+0x22c>)
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fb18 	bl	80026e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	2200      	movs	r2, #0
 80020c0:	2104      	movs	r1, #4
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f956 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e07c      	b.n	80021cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002108:	b29b      	uxth	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d034      	beq.n	8002178 <HAL_I2C_Mem_Read+0x1d0>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002112:	2b00      	cmp	r3, #0
 8002114:	d130      	bne.n	8002178 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211c:	2200      	movs	r2, #0
 800211e:	2180      	movs	r1, #128	; 0x80
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 f927 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e04d      	b.n	80021cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	2bff      	cmp	r3, #255	; 0xff
 8002138:	d90e      	bls.n	8002158 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	22ff      	movs	r2, #255	; 0xff
 800213e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	b2da      	uxtb	r2, r3
 8002146:	8979      	ldrh	r1, [r7, #10]
 8002148:	2300      	movs	r3, #0
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fac9 	bl	80026e8 <I2C_TransferConfig>
 8002156:	e00f      	b.n	8002178 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002166:	b2da      	uxtb	r2, r3
 8002168:	8979      	ldrh	r1, [r7, #10]
 800216a:	2300      	movs	r3, #0
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 fab8 	bl	80026e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d19a      	bne.n	80020b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 f98a 	bl	80024a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e01a      	b.n	80021cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2220      	movs	r2, #32
 800219c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_I2C_Mem_Read+0x230>)
 80021aa:	400b      	ands	r3, r1
 80021ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2220      	movs	r2, #32
 80021b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80021ca:	2302      	movs	r3, #2
  }
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	80002400 	.word	0x80002400
 80021d8:	fe00e800 	.word	0xfe00e800

080021dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	4608      	mov	r0, r1
 80021e6:	4611      	mov	r1, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	4603      	mov	r3, r0
 80021ec:	817b      	strh	r3, [r7, #10]
 80021ee:	460b      	mov	r3, r1
 80021f0:	813b      	strh	r3, [r7, #8]
 80021f2:	4613      	mov	r3, r2
 80021f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	8979      	ldrh	r1, [r7, #10]
 80021fc:	4b20      	ldr	r3, [pc, #128]	; (8002280 <I2C_RequestMemoryWrite+0xa4>)
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 fa6f 	bl	80026e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	69b9      	ldr	r1, [r7, #24]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f8ff 	bl	8002412 <I2C_WaitOnTXISFlagUntilTimeout>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e02c      	b.n	8002278 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d105      	bne.n	8002230 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002224:	893b      	ldrh	r3, [r7, #8]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	629a      	str	r2, [r3, #40]	; 0x28
 800222e:	e015      	b.n	800225c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002230:	893b      	ldrh	r3, [r7, #8]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	b29b      	uxth	r3, r3
 8002236:	b2da      	uxtb	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	69b9      	ldr	r1, [r7, #24]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f8e5 	bl	8002412 <I2C_WaitOnTXISFlagUntilTimeout>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e012      	b.n	8002278 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002252:	893b      	ldrh	r3, [r7, #8]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2200      	movs	r2, #0
 8002264:	2180      	movs	r1, #128	; 0x80
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f884 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	80002000 	.word	0x80002000

08002284 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	4608      	mov	r0, r1
 800228e:	4611      	mov	r1, r2
 8002290:	461a      	mov	r2, r3
 8002292:	4603      	mov	r3, r0
 8002294:	817b      	strh	r3, [r7, #10]
 8002296:	460b      	mov	r3, r1
 8002298:	813b      	strh	r3, [r7, #8]
 800229a:	4613      	mov	r3, r2
 800229c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	8979      	ldrh	r1, [r7, #10]
 80022a4:	4b20      	ldr	r3, [pc, #128]	; (8002328 <I2C_RequestMemoryRead+0xa4>)
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	2300      	movs	r3, #0
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fa1c 	bl	80026e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	69b9      	ldr	r1, [r7, #24]
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f8ac 	bl	8002412 <I2C_WaitOnTXISFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e02c      	b.n	800231e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d105      	bne.n	80022d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022ca:	893b      	ldrh	r3, [r7, #8]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28
 80022d4:	e015      	b.n	8002302 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022d6:	893b      	ldrh	r3, [r7, #8]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	b29b      	uxth	r3, r3
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	69b9      	ldr	r1, [r7, #24]
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 f892 	bl	8002412 <I2C_WaitOnTXISFlagUntilTimeout>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e012      	b.n	800231e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022f8:	893b      	ldrh	r3, [r7, #8]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2200      	movs	r2, #0
 800230a:	2140      	movs	r1, #64	; 0x40
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f831 	bl	8002374 <I2C_WaitOnFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	80002000 	.word	0x80002000

0800232c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b02      	cmp	r3, #2
 8002340:	d103      	bne.n	800234a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2200      	movs	r2, #0
 8002348:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d007      	beq.n	8002368 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699a      	ldr	r2, [r3, #24]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	619a      	str	r2, [r3, #24]
  }
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002384:	e031      	b.n	80023ea <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d02d      	beq.n	80023ea <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800238e:	f7fe fd4d 	bl	8000e2c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d302      	bcc.n	80023a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d122      	bne.n	80023ea <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	4013      	ands	r3, r2
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	bf0c      	ite	eq
 80023b4:	2301      	moveq	r3, #1
 80023b6:	2300      	movne	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d113      	bne.n	80023ea <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	f043 0220 	orr.w	r2, r3, #32
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00f      	b.n	800240a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4013      	ands	r3, r2
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	bf0c      	ite	eq
 80023fa:	2301      	moveq	r3, #1
 80023fc:	2300      	movne	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	429a      	cmp	r2, r3
 8002406:	d0be      	beq.n	8002386 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800241e:	e033      	b.n	8002488 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f87f 	bl	8002528 <I2C_IsErrorOccurred>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e031      	b.n	8002498 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243a:	d025      	beq.n	8002488 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243c:	f7fe fcf6 	bl	8000e2c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	429a      	cmp	r2, r3
 800244a:	d302      	bcc.n	8002452 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d11a      	bne.n	8002488 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b02      	cmp	r3, #2
 800245e:	d013      	beq.n	8002488 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002464:	f043 0220 	orr.w	r2, r3, #32
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e007      	b.n	8002498 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b02      	cmp	r3, #2
 8002494:	d1c4      	bne.n	8002420 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024ac:	e02f      	b.n	800250e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f838 	bl	8002528 <I2C_IsErrorOccurred>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e02d      	b.n	800251e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c2:	f7fe fcb3 	bl	8000e2c <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d302      	bcc.n	80024d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d11a      	bne.n	800250e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f003 0320 	and.w	r3, r3, #32
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	d013      	beq.n	800250e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f043 0220 	orr.w	r2, r3, #32
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e007      	b.n	800251e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b20      	cmp	r3, #32
 800251a:	d1c8      	bne.n	80024ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	d068      	beq.n	8002626 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2210      	movs	r2, #16
 800255a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800255c:	e049      	b.n	80025f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d045      	beq.n	80025f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002566:	f7fe fc61 	bl	8000e2c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	429a      	cmp	r2, r3
 8002574:	d302      	bcc.n	800257c <I2C_IsErrorOccurred+0x54>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d13a      	bne.n	80025f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002586:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800258e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800259a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800259e:	d121      	bne.n	80025e4 <I2C_IsErrorOccurred+0xbc>
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025a6:	d01d      	beq.n	80025e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	d01a      	beq.n	80025e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025be:	f7fe fc35 	bl	8000e2c <HAL_GetTick>
 80025c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025c4:	e00e      	b.n	80025e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025c6:	f7fe fc31 	bl	8000e2c <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b19      	cmp	r3, #25
 80025d2:	d907      	bls.n	80025e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	f043 0320 	orr.w	r3, r3, #32
 80025da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80025e2:	e006      	b.n	80025f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	d1e9      	bne.n	80025c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d003      	beq.n	8002608 <I2C_IsErrorOccurred+0xe0>
 8002600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0aa      	beq.n	800255e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800260c:	2b00      	cmp	r3, #0
 800260e:	d103      	bne.n	8002618 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2220      	movs	r2, #32
 8002616:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	f043 0304 	orr.w	r3, r3, #4
 800261e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00b      	beq.n	8002650 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002648:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	f043 0308 	orr.w	r3, r3, #8
 8002660:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800266a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00b      	beq.n	8002694 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	f043 0302 	orr.w	r3, r3, #2
 8002682:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01c      	beq.n	80026d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7ff fe45 	bl	800232c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <I2C_IsErrorOccurred+0x1bc>)
 80026ae:	400b      	ands	r3, r1
 80026b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80026d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3728      	adds	r7, #40	; 0x28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	fe00e800 	.word	0xfe00e800

080026e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	817b      	strh	r3, [r7, #10]
 80026f6:	4613      	mov	r3, r2
 80026f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026fa:	897b      	ldrh	r3, [r7, #10]
 80026fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002700:	7a7b      	ldrb	r3, [r7, #9]
 8002702:	041b      	lsls	r3, r3, #16
 8002704:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002708:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	4313      	orrs	r3, r2
 8002712:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002716:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	0d5b      	lsrs	r3, r3, #21
 8002722:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <I2C_TransferConfig+0x60>)
 8002728:	430b      	orrs	r3, r1
 800272a:	43db      	mvns	r3, r3
 800272c:	ea02 0103 	and.w	r1, r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	430a      	orrs	r2, r1
 8002738:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	03ff63ff 	.word	0x03ff63ff

0800274c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b20      	cmp	r3, #32
 8002760:	d138      	bne.n	80027d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800276c:	2302      	movs	r3, #2
 800276e:	e032      	b.n	80027d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2224      	movs	r2, #36	; 0x24
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800279e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6819      	ldr	r1, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e000      	b.n	80027d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027d4:	2302      	movs	r3, #2
  }
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d139      	bne.n	800286c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002802:	2302      	movs	r3, #2
 8002804:	e033      	b.n	800286e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2224      	movs	r2, #36	; 0x24
 8002812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0201 	bic.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002834:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e000      	b.n	800286e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800286c:	2302      	movs	r3, #2
  }
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002882:	af00      	add	r7, sp, #0
 8002884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002888:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800288c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	f001 b823 	b.w	80038e8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 817d 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028b8:	4bbc      	ldr	r3, [pc, #752]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d00c      	beq.n	80028de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028c4:	4bb9      	ldr	r3, [pc, #740]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d15c      	bne.n	800298a <HAL_RCC_OscConfig+0x10e>
 80028d0:	4bb6      	ldr	r3, [pc, #728]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028dc:	d155      	bne.n	800298a <HAL_RCC_OscConfig+0x10e>
 80028de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028e2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d102      	bne.n	8002910 <HAL_RCC_OscConfig+0x94>
 800290a:	4ba8      	ldr	r3, [pc, #672]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	e015      	b.n	800293c <HAL_RCC_OscConfig+0xc0>
 8002910:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002914:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800291c:	fa93 f3a3 	rbit	r3, r3
 8002920:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002928:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800292c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002938:	4b9c      	ldr	r3, [pc, #624]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002940:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002944:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002948:	fa92 f2a2 	rbit	r2, r2
 800294c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002950:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002954:	fab2 f282 	clz	r2, r2
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	f042 0220 	orr.w	r2, r2, #32
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	f002 021f 	and.w	r2, r2, #31
 8002964:	2101      	movs	r1, #1
 8002966:	fa01 f202 	lsl.w	r2, r1, r2
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 811f 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x334>
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 8116 	bne.w	8002bb0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	f000 bfaf 	b.w	80038e8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x12e>
 800299c:	4b83      	ldr	r3, [pc, #524]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a82      	ldr	r2, [pc, #520]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80029a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	e036      	b.n	8002a18 <HAL_RCC_OscConfig+0x19c>
 80029aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x158>
 80029ba:	4b7c      	ldr	r3, [pc, #496]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a7b      	ldr	r2, [pc, #492]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	4b79      	ldr	r3, [pc, #484]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a78      	ldr	r2, [pc, #480]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80029cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e021      	b.n	8002a18 <HAL_RCC_OscConfig+0x19c>
 80029d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x184>
 80029e6:	4b71      	ldr	r3, [pc, #452]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a70      	ldr	r2, [pc, #448]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80029ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b6e      	ldr	r3, [pc, #440]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a6d      	ldr	r2, [pc, #436]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e00b      	b.n	8002a18 <HAL_RCC_OscConfig+0x19c>
 8002a00:	4b6a      	ldr	r3, [pc, #424]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a69      	ldr	r2, [pc, #420]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b67      	ldr	r3, [pc, #412]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a66      	ldr	r2, [pc, #408]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a16:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a18:	4b64      	ldr	r3, [pc, #400]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	f023 020f 	bic.w	r2, r3, #15
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	495f      	ldr	r1, [pc, #380]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d059      	beq.n	8002af6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7fe f9f3 	bl	8000e2c <HAL_GetTick>
 8002a46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7fe f9ee 	bl	8000e2c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b64      	cmp	r3, #100	; 0x64
 8002a5a:	d902      	bls.n	8002a62 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	f000 bf43 	b.w	80038e8 <HAL_RCC_OscConfig+0x106c>
 8002a62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a66:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002a76:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d102      	bne.n	8002a94 <HAL_RCC_OscConfig+0x218>
 8002a8e:	4b47      	ldr	r3, [pc, #284]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	e015      	b.n	8002ac0 <HAL_RCC_OscConfig+0x244>
 8002a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a98:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002aa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ab0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002abc:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ac4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ac8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002acc:	fa92 f2a2 	rbit	r2, r2
 8002ad0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002ad4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ad8:	fab2 f282 	clz	r2, r2
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	f042 0220 	orr.w	r2, r2, #32
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	f002 021f 	and.w	r2, r2, #31
 8002ae8:	2101      	movs	r1, #1
 8002aea:	fa01 f202 	lsl.w	r2, r1, r2
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ab      	beq.n	8002a4c <HAL_RCC_OscConfig+0x1d0>
 8002af4:	e05d      	b.n	8002bb2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe f999 	bl	8000e2c <HAL_GetTick>
 8002afa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afe:	e00a      	b.n	8002b16 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b00:	f7fe f994 	bl	8000e2c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b64      	cmp	r3, #100	; 0x64
 8002b0e:	d902      	bls.n	8002b16 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	f000 bee9 	b.w	80038e8 <HAL_RCC_OscConfig+0x106c>
 8002b16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b1a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002b2a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d102      	bne.n	8002b48 <HAL_RCC_OscConfig+0x2cc>
 8002b42:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	e015      	b.n	8002b74 <HAL_RCC_OscConfig+0x2f8>
 8002b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b60:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b64:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002b70:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <HAL_RCC_OscConfig+0x330>)
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b78:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002b7c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002b80:	fa92 f2a2 	rbit	r2, r2
 8002b84:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002b88:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002b8c:	fab2 f282 	clz	r2, r2
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	f042 0220 	orr.w	r2, r2, #32
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	f002 021f 	and.w	r2, r2, #31
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1ab      	bne.n	8002b00 <HAL_RCC_OscConfig+0x284>
 8002ba8:	e003      	b.n	8002bb2 <HAL_RCC_OscConfig+0x336>
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 817d 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bc8:	4ba6      	ldr	r3, [pc, #664]	; (8002e64 <HAL_RCC_OscConfig+0x5e8>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00b      	beq.n	8002bec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bd4:	4ba3      	ldr	r3, [pc, #652]	; (8002e64 <HAL_RCC_OscConfig+0x5e8>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d172      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x44a>
 8002be0:	4ba0      	ldr	r3, [pc, #640]	; (8002e64 <HAL_RCC_OscConfig+0x5e8>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d16c      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x44a>
 8002bec:	2302      	movs	r3, #2
 8002bee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002bfe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d102      	bne.n	8002c1c <HAL_RCC_OscConfig+0x3a0>
 8002c16:	4b93      	ldr	r3, [pc, #588]	; (8002e64 <HAL_RCC_OscConfig+0x5e8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	e013      	b.n	8002c44 <HAL_RCC_OscConfig+0x3c8>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c2e:	2302      	movs	r3, #2
 8002c30:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c34:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002c40:	4b88      	ldr	r3, [pc, #544]	; (8002e64 <HAL_RCC_OscConfig+0x5e8>)
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	2202      	movs	r2, #2
 8002c46:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c4a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c4e:	fa92 f2a2 	rbit	r2, r2
 8002c52:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002c56:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002c5a:	fab2 f282 	clz	r2, r2
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	f042 0220 	orr.w	r2, r2, #32
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f002 021f 	and.w	r2, r2, #31
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCC_OscConfig+0x410>
 8002c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d002      	beq.n	8002c8c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	f000 be2e 	b.w	80038e8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8c:	4b75      	ldr	r3, [pc, #468]	; (8002e64 <HAL_RCC_OscConfig+0x5e8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	21f8      	movs	r1, #248	; 0xf8
 8002ca2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002caa:	fa91 f1a1 	rbit	r1, r1
 8002cae:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002cb2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002cb6:	fab1 f181 	clz	r1, r1
 8002cba:	b2c9      	uxtb	r1, r1
 8002cbc:	408b      	lsls	r3, r1
 8002cbe:	4969      	ldr	r1, [pc, #420]	; (8002e64 <HAL_RCC_OscConfig+0x5e8>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc4:	e0fd      	b.n	8002ec2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 8088 	beq.w	8002de8 <HAL_RCC_OscConfig+0x56c>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002cea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cf8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2301      	movs	r3, #1
 8002d02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe f892 	bl	8000e2c <HAL_GetTick>
 8002d08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0e:	f7fe f88d 	bl	8000e2c <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d902      	bls.n	8002d24 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	f000 bde2 	b.w	80038e8 <HAL_RCC_OscConfig+0x106c>
 8002d24:	2302      	movs	r3, #2
 8002d26:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002d36:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d102      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4d8>
 8002d4e:	4b45      	ldr	r3, [pc, #276]	; (8002e64 <HAL_RCC_OscConfig+0x5e8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	e013      	b.n	8002d7c <HAL_RCC_OscConfig+0x500>
 8002d54:	2302      	movs	r3, #2
 8002d56:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d66:	2302      	movs	r3, #2
 8002d68:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002d78:	4b3a      	ldr	r3, [pc, #232]	; (8002e64 <HAL_RCC_OscConfig+0x5e8>)
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002d82:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d86:	fa92 f2a2 	rbit	r2, r2
 8002d8a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002d8e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002d92:	fab2 f282 	clz	r2, r2
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	f042 0220 	orr.w	r2, r2, #32
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	f002 021f 	and.w	r2, r2, #31
 8002da2:	2101      	movs	r1, #1
 8002da4:	fa01 f202 	lsl.w	r2, r1, r2
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0af      	beq.n	8002d0e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dae:	4b2d      	ldr	r3, [pc, #180]	; (8002e64 <HAL_RCC_OscConfig+0x5e8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	21f8      	movs	r1, #248	; 0xf8
 8002dc4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002dcc:	fa91 f1a1 	rbit	r1, r1
 8002dd0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002dd4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002dd8:	fab1 f181 	clz	r1, r1
 8002ddc:	b2c9      	uxtb	r1, r1
 8002dde:	408b      	lsls	r3, r1
 8002de0:	4920      	ldr	r1, [pc, #128]	; (8002e64 <HAL_RCC_OscConfig+0x5e8>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
 8002de6:	e06c      	b.n	8002ec2 <HAL_RCC_OscConfig+0x646>
 8002de8:	2301      	movs	r3, #1
 8002dea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002dfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2300      	movs	r3, #0
 8002e12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe f80a 	bl	8000e2c <HAL_GetTick>
 8002e18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7fe f805 	bl	8000e2c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d902      	bls.n	8002e34 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	f000 bd5a 	b.w	80038e8 <HAL_RCC_OscConfig+0x106c>
 8002e34:	2302      	movs	r3, #2
 8002e36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d104      	bne.n	8002e68 <HAL_RCC_OscConfig+0x5ec>
 8002e5e:	4b01      	ldr	r3, [pc, #4]	; (8002e64 <HAL_RCC_OscConfig+0x5e8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	e015      	b.n	8002e90 <HAL_RCC_OscConfig+0x614>
 8002e64:	40021000 	.word	0x40021000
 8002e68:	2302      	movs	r3, #2
 8002e6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e84:	fa93 f3a3 	rbit	r3, r3
 8002e88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002e8c:	4bc8      	ldr	r3, [pc, #800]	; (80031b0 <HAL_RCC_OscConfig+0x934>)
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	2202      	movs	r2, #2
 8002e92:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002e96:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002e9a:	fa92 f2a2 	rbit	r2, r2
 8002e9e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002ea2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002ea6:	fab2 f282 	clz	r2, r2
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	f042 0220 	orr.w	r2, r2, #32
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	f002 021f 	and.w	r2, r2, #31
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ad      	bne.n	8002e1e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8110 	beq.w	80030f8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002edc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d079      	beq.n	8002fdc <HAL_RCC_OscConfig+0x760>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	4bab      	ldr	r3, [pc, #684]	; (80031b4 <HAL_RCC_OscConfig+0x938>)
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2301      	movs	r3, #1
 8002f10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f12:	f7fd ff8b 	bl	8000e2c <HAL_GetTick>
 8002f16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1c:	f7fd ff86 	bl	8000e2c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d902      	bls.n	8002f32 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	f000 bcdb 	b.w	80038e8 <HAL_RCC_OscConfig+0x106c>
 8002f32:	2302      	movs	r3, #2
 8002f34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f3c:	fa93 f3a3 	rbit	r3, r3
 8002f40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f48:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f54:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	fa93 f2a3 	rbit	r2, r3
 8002f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f70:	2202      	movs	r2, #2
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	fa93 f2a3 	rbit	r2, r3
 8002f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f8a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8c:	4b88      	ldr	r3, [pc, #544]	; (80031b0 <HAL_RCC_OscConfig+0x934>)
 8002f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f98:	2102      	movs	r1, #2
 8002f9a:	6019      	str	r1, [r3, #0]
 8002f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	fa93 f1a3 	rbit	r1, r3
 8002faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fb2:	6019      	str	r1, [r3, #0]
  return result;
 8002fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	2101      	movs	r1, #1
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0a0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x6a0>
 8002fda:	e08d      	b.n	80030f8 <HAL_RCC_OscConfig+0x87c>
 8002fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	fa93 f2a3 	rbit	r2, r3
 8002ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ffe:	601a      	str	r2, [r3, #0]
  return result;
 8003000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003004:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003008:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	4b68      	ldr	r3, [pc, #416]	; (80031b4 <HAL_RCC_OscConfig+0x938>)
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	461a      	mov	r2, r3
 800301a:	2300      	movs	r3, #0
 800301c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301e:	f7fd ff05 	bl	8000e2c <HAL_GetTick>
 8003022:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003026:	e00a      	b.n	800303e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003028:	f7fd ff00 	bl	8000e2c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d902      	bls.n	800303e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	f000 bc55 	b.w	80038e8 <HAL_RCC_OscConfig+0x106c>
 800303e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003042:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003046:	2202      	movs	r2, #2
 8003048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	fa93 f2a3 	rbit	r2, r3
 8003058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003066:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800306a:	2202      	movs	r2, #2
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	fa93 f2a3 	rbit	r2, r3
 800307c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003080:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800308e:	2202      	movs	r2, #2
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fa93 f2a3 	rbit	r2, r3
 80030a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030aa:	4b41      	ldr	r3, [pc, #260]	; (80031b0 <HAL_RCC_OscConfig+0x934>)
 80030ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030b6:	2102      	movs	r1, #2
 80030b8:	6019      	str	r1, [r3, #0]
 80030ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	fa93 f1a3 	rbit	r1, r3
 80030c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030d0:	6019      	str	r1, [r3, #0]
  return result;
 80030d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	2101      	movs	r1, #1
 80030ee:	fa01 f303 	lsl.w	r3, r1, r3
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d197      	bne.n	8003028 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 81a1 	beq.w	8003450 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003114:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <HAL_RCC_OscConfig+0x934>)
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d116      	bne.n	800314e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003120:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <HAL_RCC_OscConfig+0x934>)
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	4a22      	ldr	r2, [pc, #136]	; (80031b0 <HAL_RCC_OscConfig+0x934>)
 8003126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312a:	61d3      	str	r3, [r2, #28]
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <HAL_RCC_OscConfig+0x934>)
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003142:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003146:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003148:	2301      	movs	r3, #1
 800314a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314e:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <HAL_RCC_OscConfig+0x93c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d11a      	bne.n	8003190 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315a:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <HAL_RCC_OscConfig+0x93c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a16      	ldr	r2, [pc, #88]	; (80031b8 <HAL_RCC_OscConfig+0x93c>)
 8003160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003164:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003166:	f7fd fe61 	bl	8000e2c <HAL_GetTick>
 800316a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316e:	e009      	b.n	8003184 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003170:	f7fd fe5c 	bl	8000e2c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b64      	cmp	r3, #100	; 0x64
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e3b1      	b.n	80038e8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <HAL_RCC_OscConfig+0x93c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ef      	beq.n	8003170 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d10d      	bne.n	80031bc <HAL_RCC_OscConfig+0x940>
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_RCC_OscConfig+0x934>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	4a02      	ldr	r2, [pc, #8]	; (80031b0 <HAL_RCC_OscConfig+0x934>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6213      	str	r3, [r2, #32]
 80031ac:	e03c      	b.n	8003228 <HAL_RCC_OscConfig+0x9ac>
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	10908120 	.word	0x10908120
 80031b8:	40007000 	.word	0x40007000
 80031bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10c      	bne.n	80031e6 <HAL_RCC_OscConfig+0x96a>
 80031cc:	4bc1      	ldr	r3, [pc, #772]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	4ac0      	ldr	r2, [pc, #768]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	6213      	str	r3, [r2, #32]
 80031d8:	4bbe      	ldr	r3, [pc, #760]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4abd      	ldr	r2, [pc, #756]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 80031de:	f023 0304 	bic.w	r3, r3, #4
 80031e2:	6213      	str	r3, [r2, #32]
 80031e4:	e020      	b.n	8003228 <HAL_RCC_OscConfig+0x9ac>
 80031e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	2b05      	cmp	r3, #5
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x994>
 80031f6:	4bb7      	ldr	r3, [pc, #732]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4ab6      	ldr	r2, [pc, #728]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 80031fc:	f043 0304 	orr.w	r3, r3, #4
 8003200:	6213      	str	r3, [r2, #32]
 8003202:	4bb4      	ldr	r3, [pc, #720]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	4ab3      	ldr	r2, [pc, #716]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6213      	str	r3, [r2, #32]
 800320e:	e00b      	b.n	8003228 <HAL_RCC_OscConfig+0x9ac>
 8003210:	4bb0      	ldr	r3, [pc, #704]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	4aaf      	ldr	r2, [pc, #700]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	6213      	str	r3, [r2, #32]
 800321c:	4bad      	ldr	r3, [pc, #692]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	4aac      	ldr	r2, [pc, #688]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 8003222:	f023 0304 	bic.w	r3, r3, #4
 8003226:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8081 	beq.w	800333c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323a:	f7fd fdf7 	bl	8000e2c <HAL_GetTick>
 800323e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003244:	f7fd fdf2 	bl	8000e2c <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e345      	b.n	80038e8 <HAL_RCC_OscConfig+0x106c>
 800325c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003260:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003264:	2202      	movs	r2, #2
 8003266:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	fa93 f2a3 	rbit	r2, r3
 8003276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003284:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003288:	2202      	movs	r2, #2
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	fa93 f2a3 	rbit	r2, r3
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032a2:	601a      	str	r2, [r3, #0]
  return result;
 80032a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f043 0302 	orr.w	r3, r3, #2
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d102      	bne.n	80032c8 <HAL_RCC_OscConfig+0xa4c>
 80032c2:	4b84      	ldr	r3, [pc, #528]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	e013      	b.n	80032f0 <HAL_RCC_OscConfig+0xa74>
 80032c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032d0:	2202      	movs	r2, #2
 80032d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	fa93 f2a3 	rbit	r2, r3
 80032e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	4b79      	ldr	r3, [pc, #484]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032f4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80032f8:	2102      	movs	r1, #2
 80032fa:	6011      	str	r1, [r2, #0]
 80032fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003300:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	fa92 f1a2 	rbit	r1, r2
 800330a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800330e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003312:	6011      	str	r1, [r2, #0]
  return result;
 8003314:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003318:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	fab2 f282 	clz	r2, r2
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	f002 021f 	and.w	r2, r2, #31
 800332e:	2101      	movs	r1, #1
 8003330:	fa01 f202 	lsl.w	r2, r1, r2
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d084      	beq.n	8003244 <HAL_RCC_OscConfig+0x9c8>
 800333a:	e07f      	b.n	800343c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333c:	f7fd fd76 	bl	8000e2c <HAL_GetTick>
 8003340:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003344:	e00b      	b.n	800335e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7fd fd71 	bl	8000e2c <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	; 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e2c4      	b.n	80038e8 <HAL_RCC_OscConfig+0x106c>
 800335e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003362:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003366:	2202      	movs	r2, #2
 8003368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	fa93 f2a3 	rbit	r2, r3
 8003378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003386:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800338a:	2202      	movs	r2, #2
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	fa93 f2a3 	rbit	r2, r3
 800339c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033a4:	601a      	str	r2, [r3, #0]
  return result;
 80033a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033aa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	f043 0302 	orr.w	r3, r3, #2
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d102      	bne.n	80033ca <HAL_RCC_OscConfig+0xb4e>
 80033c4:	4b43      	ldr	r3, [pc, #268]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	e013      	b.n	80033f2 <HAL_RCC_OscConfig+0xb76>
 80033ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033d2:	2202      	movs	r2, #2
 80033d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	fa93 f2a3 	rbit	r2, r3
 80033e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033f6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80033fa:	2102      	movs	r1, #2
 80033fc:	6011      	str	r1, [r2, #0]
 80033fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003402:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	fa92 f1a2 	rbit	r1, r2
 800340c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003410:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003414:	6011      	str	r1, [r2, #0]
  return result;
 8003416:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800341a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	fab2 f282 	clz	r2, r2
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f002 021f 	and.w	r2, r2, #31
 8003430:	2101      	movs	r1, #1
 8003432:	fa01 f202 	lsl.w	r2, r1, r2
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d184      	bne.n	8003346 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800343c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003440:	2b01      	cmp	r3, #1
 8003442:	d105      	bne.n	8003450 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003444:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	4a22      	ldr	r2, [pc, #136]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 800344a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800344e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003454:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 8242 	beq.w	80038e6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003462:	4b1c      	ldr	r3, [pc, #112]	; (80034d4 <HAL_RCC_OscConfig+0xc58>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b08      	cmp	r3, #8
 800346c:	f000 8213 	beq.w	8003896 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003474:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	2b02      	cmp	r3, #2
 800347e:	f040 8162 	bne.w	8003746 <HAL_RCC_OscConfig+0xeca>
 8003482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003486:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800348a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800348e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003494:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	fa93 f2a3 	rbit	r2, r3
 800349e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034a6:	601a      	str	r2, [r3, #0]
  return result;
 80034a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	461a      	mov	r2, r3
 80034c4:	2300      	movs	r3, #0
 80034c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7fd fcb0 	bl	8000e2c <HAL_GetTick>
 80034cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d0:	e00c      	b.n	80034ec <HAL_RCC_OscConfig+0xc70>
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fd fca8 	bl	8000e2c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e1fd      	b.n	80038e8 <HAL_RCC_OscConfig+0x106c>
 80034ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	fa93 f2a3 	rbit	r2, r3
 8003508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003510:	601a      	str	r2, [r3, #0]
  return result;
 8003512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003516:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800351a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d102      	bne.n	8003536 <HAL_RCC_OscConfig+0xcba>
 8003530:	4bb0      	ldr	r3, [pc, #704]	; (80037f4 <HAL_RCC_OscConfig+0xf78>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	e027      	b.n	8003586 <HAL_RCC_OscConfig+0xd0a>
 8003536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800353e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003548:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	fa93 f2a3 	rbit	r2, r3
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	fa93 f2a3 	rbit	r2, r3
 8003578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	4b9c      	ldr	r3, [pc, #624]	; (80037f4 <HAL_RCC_OscConfig+0xf78>)
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800358a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800358e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003592:	6011      	str	r1, [r2, #0]
 8003594:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003598:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800359c:	6812      	ldr	r2, [r2, #0]
 800359e:	fa92 f1a2 	rbit	r1, r2
 80035a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035a6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035aa:	6011      	str	r1, [r2, #0]
  return result;
 80035ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035b0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	fab2 f282 	clz	r2, r2
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	f042 0220 	orr.w	r2, r2, #32
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	f002 021f 	and.w	r2, r2, #31
 80035c6:	2101      	movs	r1, #1
 80035c8:	fa01 f202 	lsl.w	r2, r1, r2
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d182      	bne.n	80034d8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d2:	4b88      	ldr	r3, [pc, #544]	; (80037f4 <HAL_RCC_OscConfig+0xf78>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	430b      	orrs	r3, r1
 80035f4:	497f      	ldr	r1, [pc, #508]	; (80037f4 <HAL_RCC_OscConfig+0xf78>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	604b      	str	r3, [r1, #4]
 80035fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003602:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003606:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	fa93 f2a3 	rbit	r2, r3
 8003616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800361e:	601a      	str	r2, [r3, #0]
  return result;
 8003620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003624:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003628:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800362a:	fab3 f383 	clz	r3, r3
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003634:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	461a      	mov	r2, r3
 800363c:	2301      	movs	r3, #1
 800363e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fd fbf4 	bl	8000e2c <HAL_GetTick>
 8003644:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003648:	e009      	b.n	800365e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364a:	f7fd fbef 	bl	8000e2c <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e144      	b.n	80038e8 <HAL_RCC_OscConfig+0x106c>
 800365e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003662:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003666:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800366a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003670:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	fa93 f2a3 	rbit	r2, r3
 800367a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003682:	601a      	str	r2, [r3, #0]
  return result;
 8003684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003688:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800368c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d102      	bne.n	80036a8 <HAL_RCC_OscConfig+0xe2c>
 80036a2:	4b54      	ldr	r3, [pc, #336]	; (80037f4 <HAL_RCC_OscConfig+0xf78>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	e027      	b.n	80036f8 <HAL_RCC_OscConfig+0xe7c>
 80036a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	fa93 f2a3 	rbit	r2, r3
 80036c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80036d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	fa93 f2a3 	rbit	r2, r3
 80036ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	4b3f      	ldr	r3, [pc, #252]	; (80037f4 <HAL_RCC_OscConfig+0xf78>)
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036fc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003700:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003704:	6011      	str	r1, [r2, #0]
 8003706:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800370a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	fa92 f1a2 	rbit	r1, r2
 8003714:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003718:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800371c:	6011      	str	r1, [r2, #0]
  return result;
 800371e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003722:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	fab2 f282 	clz	r2, r2
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	f042 0220 	orr.w	r2, r2, #32
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	f002 021f 	and.w	r2, r2, #31
 8003738:	2101      	movs	r1, #1
 800373a:	fa01 f202 	lsl.w	r2, r1, r2
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d082      	beq.n	800364a <HAL_RCC_OscConfig+0xdce>
 8003744:	e0cf      	b.n	80038e6 <HAL_RCC_OscConfig+0x106a>
 8003746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800374e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003758:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	fa93 f2a3 	rbit	r2, r3
 8003762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003766:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800376a:	601a      	str	r2, [r3, #0]
  return result;
 800376c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003770:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003774:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003780:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	461a      	mov	r2, r3
 8003788:	2300      	movs	r3, #0
 800378a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fd fb4e 	bl	8000e2c <HAL_GetTick>
 8003790:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003794:	e009      	b.n	80037aa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003796:	f7fd fb49 	bl	8000e2c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e09e      	b.n	80038e8 <HAL_RCC_OscConfig+0x106c>
 80037aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037bc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	fa93 f2a3 	rbit	r2, r3
 80037c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037ce:	601a      	str	r2, [r3, #0]
  return result;
 80037d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037da:	fab3 f383 	clz	r3, r3
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d104      	bne.n	80037f8 <HAL_RCC_OscConfig+0xf7c>
 80037ee:	4b01      	ldr	r3, [pc, #4]	; (80037f4 <HAL_RCC_OscConfig+0xf78>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	e029      	b.n	8003848 <HAL_RCC_OscConfig+0xfcc>
 80037f4:	40021000 	.word	0x40021000
 80037f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003800:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	fa93 f2a3 	rbit	r2, r3
 8003814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003818:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003822:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003826:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003830:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	fa93 f2a3 	rbit	r2, r3
 800383a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	4b2b      	ldr	r3, [pc, #172]	; (80038f4 <HAL_RCC_OscConfig+0x1078>)
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800384c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003850:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003854:	6011      	str	r1, [r2, #0]
 8003856:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800385a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	fa92 f1a2 	rbit	r1, r2
 8003864:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003868:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800386c:	6011      	str	r1, [r2, #0]
  return result;
 800386e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003872:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	fab2 f282 	clz	r2, r2
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	f042 0220 	orr.w	r2, r2, #32
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	f002 021f 	and.w	r2, r2, #31
 8003888:	2101      	movs	r1, #1
 800388a:	fa01 f202 	lsl.w	r2, r1, r2
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d180      	bne.n	8003796 <HAL_RCC_OscConfig+0xf1a>
 8003894:	e027      	b.n	80038e6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e01e      	b.n	80038e8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <HAL_RCC_OscConfig+0x1078>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038b6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d10b      	bne.n	80038e2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80038ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038de:	429a      	cmp	r2, r3
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000

080038f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b09e      	sub	sp, #120	; 0x78
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e162      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003910:	4b90      	ldr	r3, [pc, #576]	; (8003b54 <HAL_RCC_ClockConfig+0x25c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d910      	bls.n	8003940 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391e:	4b8d      	ldr	r3, [pc, #564]	; (8003b54 <HAL_RCC_ClockConfig+0x25c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 0207 	bic.w	r2, r3, #7
 8003926:	498b      	ldr	r1, [pc, #556]	; (8003b54 <HAL_RCC_ClockConfig+0x25c>)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b89      	ldr	r3, [pc, #548]	; (8003b54 <HAL_RCC_ClockConfig+0x25c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e14a      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800394c:	4b82      	ldr	r3, [pc, #520]	; (8003b58 <HAL_RCC_ClockConfig+0x260>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	497f      	ldr	r1, [pc, #508]	; (8003b58 <HAL_RCC_ClockConfig+0x260>)
 800395a:	4313      	orrs	r3, r2
 800395c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80dc 	beq.w	8003b24 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d13c      	bne.n	80039ee <HAL_RCC_ClockConfig+0xf6>
 8003974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003978:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800397c:	fa93 f3a3 	rbit	r3, r3
 8003980:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003984:	fab3 f383 	clz	r3, r3
 8003988:	b2db      	uxtb	r3, r3
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	b2db      	uxtb	r3, r3
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d102      	bne.n	800399e <HAL_RCC_ClockConfig+0xa6>
 8003998:	4b6f      	ldr	r3, [pc, #444]	; (8003b58 <HAL_RCC_ClockConfig+0x260>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	e00f      	b.n	80039be <HAL_RCC_ClockConfig+0xc6>
 800399e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	667b      	str	r3, [r7, #100]	; 0x64
 80039ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b0:	663b      	str	r3, [r7, #96]	; 0x60
 80039b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039b4:	fa93 f3a3 	rbit	r3, r3
 80039b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ba:	4b67      	ldr	r3, [pc, #412]	; (8003b58 <HAL_RCC_ClockConfig+0x260>)
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80039c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039c6:	fa92 f2a2 	rbit	r2, r2
 80039ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80039cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039ce:	fab2 f282 	clz	r2, r2
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	f042 0220 	orr.w	r2, r2, #32
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	f002 021f 	and.w	r2, r2, #31
 80039de:	2101      	movs	r1, #1
 80039e0:	fa01 f202 	lsl.w	r2, r1, r2
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d17b      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e0f3      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d13c      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x178>
 80039f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039fe:	fa93 f3a3 	rbit	r3, r3
 8003a02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a06:	fab3 f383 	clz	r3, r3
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d102      	bne.n	8003a20 <HAL_RCC_ClockConfig+0x128>
 8003a1a:	4b4f      	ldr	r3, [pc, #316]	; (8003b58 <HAL_RCC_ClockConfig+0x260>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	e00f      	b.n	8003a40 <HAL_RCC_ClockConfig+0x148>
 8003a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a28:	fa93 f3a3 	rbit	r3, r3
 8003a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a32:	643b      	str	r3, [r7, #64]	; 0x40
 8003a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a36:	fa93 f3a3 	rbit	r3, r3
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a3c:	4b46      	ldr	r3, [pc, #280]	; (8003b58 <HAL_RCC_ClockConfig+0x260>)
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a44:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a48:	fa92 f2a2 	rbit	r2, r2
 8003a4c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a50:	fab2 f282 	clz	r2, r2
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	f042 0220 	orr.w	r2, r2, #32
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	f002 021f 	and.w	r2, r2, #31
 8003a60:	2101      	movs	r1, #1
 8003a62:	fa01 f202 	lsl.w	r2, r1, r2
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d13a      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0b2      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x2de>
 8003a70:	2302      	movs	r3, #2
 8003a72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	fa93 f3a3 	rbit	r3, r3
 8003a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7e:	fab3 f383 	clz	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d102      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x1a0>
 8003a92:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <HAL_RCC_ClockConfig+0x260>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	e00d      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x1bc>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	623b      	str	r3, [r7, #32]
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	4b29      	ldr	r3, [pc, #164]	; (8003b58 <HAL_RCC_ClockConfig+0x260>)
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	61ba      	str	r2, [r7, #24]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	fa92 f2a2 	rbit	r2, r2
 8003abe:	617a      	str	r2, [r7, #20]
  return result;
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	fab2 f282 	clz	r2, r2
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	f042 0220 	orr.w	r2, r2, #32
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	f002 021f 	and.w	r2, r2, #31
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e079      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae2:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <HAL_RCC_ClockConfig+0x260>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f023 0203 	bic.w	r2, r3, #3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	491a      	ldr	r1, [pc, #104]	; (8003b58 <HAL_RCC_ClockConfig+0x260>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af4:	f7fd f99a 	bl	8000e2c <HAL_GetTick>
 8003af8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003afc:	f7fd f996 	bl	8000e2c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e061      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <HAL_RCC_ClockConfig+0x260>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f003 020c 	and.w	r2, r3, #12
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d1eb      	bne.n	8003afc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_RCC_ClockConfig+0x25c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d214      	bcs.n	8003b5c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b32:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <HAL_RCC_ClockConfig+0x25c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 0207 	bic.w	r2, r3, #7
 8003b3a:	4906      	ldr	r1, [pc, #24]	; (8003b54 <HAL_RCC_ClockConfig+0x25c>)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b42:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <HAL_RCC_ClockConfig+0x25c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e040      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x2de>
 8003b54:	40022000 	.word	0x40022000
 8003b58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_RCC_ClockConfig+0x2e8>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	491a      	ldr	r1, [pc, #104]	; (8003be0 <HAL_RCC_ClockConfig+0x2e8>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b86:	4b16      	ldr	r3, [pc, #88]	; (8003be0 <HAL_RCC_ClockConfig+0x2e8>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4912      	ldr	r1, [pc, #72]	; (8003be0 <HAL_RCC_ClockConfig+0x2e8>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b9a:	f000 f829 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8003b9e:	4601      	mov	r1, r0
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <HAL_RCC_ClockConfig+0x2e8>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba8:	22f0      	movs	r2, #240	; 0xf0
 8003baa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	fa92 f2a2 	rbit	r2, r2
 8003bb2:	60fa      	str	r2, [r7, #12]
  return result;
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	fab2 f282 	clz	r2, r2
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	40d3      	lsrs	r3, r2
 8003bbe:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <HAL_RCC_ClockConfig+0x2ec>)
 8003bc0:	5cd3      	ldrb	r3, [r2, r3]
 8003bc2:	fa21 f303 	lsr.w	r3, r1, r3
 8003bc6:	4a08      	ldr	r2, [pc, #32]	; (8003be8 <HAL_RCC_ClockConfig+0x2f0>)
 8003bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <HAL_RCC_ClockConfig+0x2f4>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fd f82c 	bl	8000c2c <HAL_InitTick>
  
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3778      	adds	r7, #120	; 0x78
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
 8003be4:	08007e40 	.word	0x08007e40
 8003be8:	20000000 	.word	0x20000000
 8003bec:	20000004 	.word	0x20000004

08003bf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b08b      	sub	sp, #44	; 0x2c
 8003bf4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c0a:	4b29      	ldr	r3, [pc, #164]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d002      	beq.n	8003c20 <HAL_RCC_GetSysClockFreq+0x30>
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d003      	beq.n	8003c26 <HAL_RCC_GetSysClockFreq+0x36>
 8003c1e:	e03c      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c20:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c22:	623b      	str	r3, [r7, #32]
      break;
 8003c24:	e03c      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c2c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c30:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	fa92 f2a2 	rbit	r2, r2
 8003c38:	607a      	str	r2, [r7, #4]
  return result;
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	fab2 f282 	clz	r2, r2
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	40d3      	lsrs	r3, r2
 8003c44:	4a1c      	ldr	r2, [pc, #112]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c46:	5cd3      	ldrb	r3, [r2, r3]
 8003c48:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003c4a:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	220f      	movs	r2, #15
 8003c54:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	fa92 f2a2 	rbit	r2, r2
 8003c5c:	60fa      	str	r2, [r7, #12]
  return result;
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	fab2 f282 	clz	r2, r2
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	40d3      	lsrs	r3, r2
 8003c68:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c6a:	5cd3      	ldrb	r3, [r2, r3]
 8003c6c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c78:	4a0e      	ldr	r2, [pc, #56]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
 8003c88:	e004      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	4a0c      	ldr	r2, [pc, #48]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	623b      	str	r3, [r7, #32]
      break;
 8003c98:	e002      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c9a:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c9c:	623b      	str	r3, [r7, #32]
      break;
 8003c9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	372c      	adds	r7, #44	; 0x2c
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	007a1200 	.word	0x007a1200
 8003cb8:	08007e58 	.word	0x08007e58
 8003cbc:	08007e68 	.word	0x08007e68
 8003cc0:	003d0900 	.word	0x003d0900

08003cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc8:	4b03      	ldr	r3, [pc, #12]	; (8003cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cca:	681b      	ldr	r3, [r3, #0]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	20000000 	.word	0x20000000

08003cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ce2:	f7ff ffef 	bl	8003cc4 <HAL_RCC_GetHCLKFreq>
 8003ce6:	4601      	mov	r1, r0
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cf0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003cf4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	fa92 f2a2 	rbit	r2, r2
 8003cfc:	603a      	str	r2, [r7, #0]
  return result;
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	fab2 f282 	clz	r2, r2
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	40d3      	lsrs	r3, r2
 8003d08:	4a04      	ldr	r2, [pc, #16]	; (8003d1c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d0a:	5cd3      	ldrb	r3, [r2, r3]
 8003d0c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	08007e50 	.word	0x08007e50

08003d20 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	220f      	movs	r2, #15
 8003d2e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d30:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <HAL_RCC_GetClockConfig+0x5c>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0203 	and.w	r2, r3, #3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <HAL_RCC_GetClockConfig+0x5c>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <HAL_RCC_GetClockConfig+0x5c>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d54:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <HAL_RCC_GetClockConfig+0x5c>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	08db      	lsrs	r3, r3, #3
 8003d5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003d62:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <HAL_RCC_GetClockConfig+0x60>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0207 	and.w	r2, r3, #7
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	601a      	str	r2, [r3, #0]
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	40022000 	.word	0x40022000

08003d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b092      	sub	sp, #72	; 0x48
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80d4 	beq.w	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da8:	4b4e      	ldr	r3, [pc, #312]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10e      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db4:	4b4b      	ldr	r3, [pc, #300]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	4a4a      	ldr	r2, [pc, #296]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	61d3      	str	r3, [r2, #28]
 8003dc0:	4b48      	ldr	r3, [pc, #288]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd2:	4b45      	ldr	r3, [pc, #276]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d118      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dde:	4b42      	ldr	r3, [pc, #264]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a41      	ldr	r2, [pc, #260]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dea:	f7fd f81f 	bl	8000e2c <HAL_GetTick>
 8003dee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	e008      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df2:	f7fd f81b 	bl	8000e2c <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b64      	cmp	r3, #100	; 0x64
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e14b      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e04:	4b38      	ldr	r3, [pc, #224]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e10:	4b34      	ldr	r3, [pc, #208]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e18:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8084 	beq.w	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d07c      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e30:	4b2c      	ldr	r3, [pc, #176]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	fa93 f3a3 	rbit	r3, r3
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b26      	ldr	r3, [pc, #152]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	fa93 f3a3 	rbit	r3, r3
 8003e6a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e6e:	fab3 f383 	clz	r3, r3
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	4b1d      	ldr	r3, [pc, #116]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e82:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e86:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d04b      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e92:	f7fc ffcb 	bl	8000e2c <HAL_GetTick>
 8003e96:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fc ffc7 	bl	8000e2c <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e0f5      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	fa93 f3a3 	rbit	r3, r3
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	623b      	str	r3, [r7, #32]
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	fa93 f3a3 	rbit	r3, r3
 8003ec6:	61fb      	str	r3, [r7, #28]
  return result;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eca:	fab3 f383 	clz	r3, r3
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f043 0302 	orr.w	r3, r3, #2
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d108      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ede:	4b01      	ldr	r3, [pc, #4]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	e00d      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40007000 	.word	0x40007000
 8003eec:	10908100 	.word	0x10908100
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	fa93 f3a3 	rbit	r3, r3
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	4b69      	ldr	r3, [pc, #420]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	2202      	movs	r2, #2
 8003f02:	613a      	str	r2, [r7, #16]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	fa92 f2a2 	rbit	r2, r2
 8003f0a:	60fa      	str	r2, [r7, #12]
  return result;
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	fab2 f282 	clz	r2, r2
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	f002 021f 	and.w	r2, r2, #31
 8003f1e:	2101      	movs	r1, #1
 8003f20:	fa01 f202 	lsl.w	r2, r1, r2
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0b7      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f2a:	4b5e      	ldr	r3, [pc, #376]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	495b      	ldr	r1, [pc, #364]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d105      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f44:	4b57      	ldr	r3, [pc, #348]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	4a56      	ldr	r2, [pc, #344]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f5c:	4b51      	ldr	r3, [pc, #324]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	f023 0203 	bic.w	r2, r3, #3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	494e      	ldr	r1, [pc, #312]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f7a:	4b4a      	ldr	r3, [pc, #296]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	f023 0210 	bic.w	r2, r3, #16
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	4947      	ldr	r1, [pc, #284]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003f98:	4b42      	ldr	r3, [pc, #264]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	493f      	ldr	r1, [pc, #252]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fb6:	4b3b      	ldr	r3, [pc, #236]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f023 0220 	bic.w	r2, r3, #32
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	4938      	ldr	r1, [pc, #224]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fd4:	4b33      	ldr	r3, [pc, #204]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	4930      	ldr	r1, [pc, #192]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d008      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ff2:	4b2c      	ldr	r3, [pc, #176]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	4929      	ldr	r1, [pc, #164]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004000:	4313      	orrs	r3, r2
 8004002:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004010:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	4921      	ldr	r1, [pc, #132]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800401e:	4313      	orrs	r3, r2
 8004020:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d008      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800402e:	4b1d      	ldr	r3, [pc, #116]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	491a      	ldr	r1, [pc, #104]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800403c:	4313      	orrs	r3, r2
 800403e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800404c:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	4912      	ldr	r1, [pc, #72]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800405a:	4313      	orrs	r3, r2
 800405c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d008      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800406a:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	490b      	ldr	r1, [pc, #44]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004078:	4313      	orrs	r3, r2
 800407a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	4903      	ldr	r1, [pc, #12]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004096:	4313      	orrs	r3, r2
 8004098:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3748      	adds	r7, #72	; 0x48
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000

080040a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e049      	b.n	800414e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fc fd54 	bl	8000b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f000 fcf8 	bl	8004adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	d001      	beq.n	8004170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e03b      	b.n	80041e8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a19      	ldr	r2, [pc, #100]	; (80041f4 <HAL_TIM_Base_Start_IT+0x9c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d009      	beq.n	80041a6 <HAL_TIM_Base_Start_IT+0x4e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419a:	d004      	beq.n	80041a6 <HAL_TIM_Base_Start_IT+0x4e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a15      	ldr	r2, [pc, #84]	; (80041f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d115      	bne.n	80041d2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	4b13      	ldr	r3, [pc, #76]	; (80041fc <HAL_TIM_Base_Start_IT+0xa4>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b06      	cmp	r3, #6
 80041b6:	d015      	beq.n	80041e4 <HAL_TIM_Base_Start_IT+0x8c>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041be:	d011      	beq.n	80041e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d0:	e008      	b.n	80041e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0201 	orr.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e000      	b.n	80041e6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40014000 	.word	0x40014000
 80041fc:	00010007 	.word	0x00010007

08004200 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e049      	b.n	80042a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f841 	bl	80042ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3304      	adds	r3, #4
 800423c:	4619      	mov	r1, r3
 800423e:	4610      	mov	r0, r2
 8004240:	f000 fc4c 	bl	8004adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <HAL_TIM_PWM_Start+0x24>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	bf14      	ite	ne
 80042e0:	2301      	movne	r3, #1
 80042e2:	2300      	moveq	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	e03c      	b.n	8004362 <HAL_TIM_PWM_Start+0x9e>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d109      	bne.n	8004302 <HAL_TIM_PWM_Start+0x3e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	bf14      	ite	ne
 80042fa:	2301      	movne	r3, #1
 80042fc:	2300      	moveq	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	e02f      	b.n	8004362 <HAL_TIM_PWM_Start+0x9e>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b08      	cmp	r3, #8
 8004306:	d109      	bne.n	800431c <HAL_TIM_PWM_Start+0x58>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	bf14      	ite	ne
 8004314:	2301      	movne	r3, #1
 8004316:	2300      	moveq	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e022      	b.n	8004362 <HAL_TIM_PWM_Start+0x9e>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b0c      	cmp	r3, #12
 8004320:	d109      	bne.n	8004336 <HAL_TIM_PWM_Start+0x72>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b01      	cmp	r3, #1
 800432c:	bf14      	ite	ne
 800432e:	2301      	movne	r3, #1
 8004330:	2300      	moveq	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	e015      	b.n	8004362 <HAL_TIM_PWM_Start+0x9e>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b10      	cmp	r3, #16
 800433a:	d109      	bne.n	8004350 <HAL_TIM_PWM_Start+0x8c>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	bf14      	ite	ne
 8004348:	2301      	movne	r3, #1
 800434a:	2300      	moveq	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	e008      	b.n	8004362 <HAL_TIM_PWM_Start+0x9e>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	bf14      	ite	ne
 800435c:	2301      	movne	r3, #1
 800435e:	2300      	moveq	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e083      	b.n	8004472 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d104      	bne.n	800437a <HAL_TIM_PWM_Start+0xb6>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004378:	e023      	b.n	80043c2 <HAL_TIM_PWM_Start+0xfe>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b04      	cmp	r3, #4
 800437e:	d104      	bne.n	800438a <HAL_TIM_PWM_Start+0xc6>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004388:	e01b      	b.n	80043c2 <HAL_TIM_PWM_Start+0xfe>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d104      	bne.n	800439a <HAL_TIM_PWM_Start+0xd6>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004398:	e013      	b.n	80043c2 <HAL_TIM_PWM_Start+0xfe>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b0c      	cmp	r3, #12
 800439e:	d104      	bne.n	80043aa <HAL_TIM_PWM_Start+0xe6>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043a8:	e00b      	b.n	80043c2 <HAL_TIM_PWM_Start+0xfe>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d104      	bne.n	80043ba <HAL_TIM_PWM_Start+0xf6>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b8:	e003      	b.n	80043c2 <HAL_TIM_PWM_Start+0xfe>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2201      	movs	r2, #1
 80043c8:	6839      	ldr	r1, [r7, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 ff34 	bl	8005238 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a29      	ldr	r2, [pc, #164]	; (800447c <HAL_TIM_PWM_Start+0x1b8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00e      	beq.n	80043f8 <HAL_TIM_PWM_Start+0x134>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a28      	ldr	r2, [pc, #160]	; (8004480 <HAL_TIM_PWM_Start+0x1bc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d009      	beq.n	80043f8 <HAL_TIM_PWM_Start+0x134>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a26      	ldr	r2, [pc, #152]	; (8004484 <HAL_TIM_PWM_Start+0x1c0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <HAL_TIM_PWM_Start+0x134>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a25      	ldr	r2, [pc, #148]	; (8004488 <HAL_TIM_PWM_Start+0x1c4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d101      	bne.n	80043fc <HAL_TIM_PWM_Start+0x138>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <HAL_TIM_PWM_Start+0x13a>
 80043fc:	2300      	movs	r3, #0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d007      	beq.n	8004412 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004410:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a19      	ldr	r2, [pc, #100]	; (800447c <HAL_TIM_PWM_Start+0x1b8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d009      	beq.n	8004430 <HAL_TIM_PWM_Start+0x16c>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004424:	d004      	beq.n	8004430 <HAL_TIM_PWM_Start+0x16c>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a15      	ldr	r2, [pc, #84]	; (8004480 <HAL_TIM_PWM_Start+0x1bc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d115      	bne.n	800445c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	4b15      	ldr	r3, [pc, #84]	; (800448c <HAL_TIM_PWM_Start+0x1c8>)
 8004438:	4013      	ands	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b06      	cmp	r3, #6
 8004440:	d015      	beq.n	800446e <HAL_TIM_PWM_Start+0x1aa>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004448:	d011      	beq.n	800446e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 0201 	orr.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445a:	e008      	b.n	800446e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	e000      	b.n	8004470 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40014000 	.word	0x40014000
 8004484:	40014400 	.word	0x40014400
 8004488:	40014800 	.word	0x40014800
 800448c:	00010007 	.word	0x00010007

08004490 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d122      	bne.n	80044ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d11b      	bne.n	80044ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0202 	mvn.w	r2, #2
 80044bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fae3 	bl	8004a9e <HAL_TIM_IC_CaptureCallback>
 80044d8:	e005      	b.n	80044e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fad5 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fae6 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d122      	bne.n	8004540 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b04      	cmp	r3, #4
 8004506:	d11b      	bne.n	8004540 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0204 	mvn.w	r2, #4
 8004510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2202      	movs	r2, #2
 8004516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fab9 	bl	8004a9e <HAL_TIM_IC_CaptureCallback>
 800452c:	e005      	b.n	800453a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 faab 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fabc 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b08      	cmp	r3, #8
 800454c:	d122      	bne.n	8004594 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b08      	cmp	r3, #8
 800455a:	d11b      	bne.n	8004594 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0208 	mvn.w	r2, #8
 8004564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2204      	movs	r2, #4
 800456a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fa8f 	bl	8004a9e <HAL_TIM_IC_CaptureCallback>
 8004580:	e005      	b.n	800458e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fa81 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fa92 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0310 	and.w	r3, r3, #16
 800459e:	2b10      	cmp	r3, #16
 80045a0:	d122      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d11b      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0210 	mvn.w	r2, #16
 80045b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2208      	movs	r2, #8
 80045be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fa65 	bl	8004a9e <HAL_TIM_IC_CaptureCallback>
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa57 	bl	8004a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fa68 	bl	8004ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d10e      	bne.n	8004614 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b01      	cmp	r3, #1
 8004602:	d107      	bne.n	8004614 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0201 	mvn.w	r2, #1
 800460c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fc f9de 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	2b80      	cmp	r3, #128	; 0x80
 8004620:	d10e      	bne.n	8004640 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462c:	2b80      	cmp	r3, #128	; 0x80
 800462e:	d107      	bne.n	8004640 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 ff0a 	bl	8005454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464e:	d10e      	bne.n	800466e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465a:	2b80      	cmp	r3, #128	; 0x80
 800465c:	d107      	bne.n	800466e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fefd 	bl	8005468 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004678:	2b40      	cmp	r3, #64	; 0x40
 800467a:	d10e      	bne.n	800469a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004686:	2b40      	cmp	r3, #64	; 0x40
 8004688:	d107      	bne.n	800469a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fa16 	bl	8004ac6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	d10e      	bne.n	80046c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d107      	bne.n	80046c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f06f 0220 	mvn.w	r2, #32
 80046be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 febd 	bl	8005440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e0ff      	b.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b14      	cmp	r3, #20
 80046fa:	f200 80f0 	bhi.w	80048de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046fe:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	08004759 	.word	0x08004759
 8004708:	080048df 	.word	0x080048df
 800470c:	080048df 	.word	0x080048df
 8004710:	080048df 	.word	0x080048df
 8004714:	08004799 	.word	0x08004799
 8004718:	080048df 	.word	0x080048df
 800471c:	080048df 	.word	0x080048df
 8004720:	080048df 	.word	0x080048df
 8004724:	080047db 	.word	0x080047db
 8004728:	080048df 	.word	0x080048df
 800472c:	080048df 	.word	0x080048df
 8004730:	080048df 	.word	0x080048df
 8004734:	0800481b 	.word	0x0800481b
 8004738:	080048df 	.word	0x080048df
 800473c:	080048df 	.word	0x080048df
 8004740:	080048df 	.word	0x080048df
 8004744:	0800485d 	.word	0x0800485d
 8004748:	080048df 	.word	0x080048df
 800474c:	080048df 	.word	0x080048df
 8004750:	080048df 	.word	0x080048df
 8004754:	0800489d 	.word	0x0800489d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fa2a 	bl	8004bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0208 	orr.w	r2, r2, #8
 8004772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0204 	bic.w	r2, r2, #4
 8004782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6999      	ldr	r1, [r3, #24]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	619a      	str	r2, [r3, #24]
      break;
 8004796:	e0a5      	b.n	80048e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fa90 	bl	8004cc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6999      	ldr	r1, [r3, #24]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	021a      	lsls	r2, r3, #8
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	619a      	str	r2, [r3, #24]
      break;
 80047d8:	e084      	b.n	80048e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 faef 	bl	8004dc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0208 	orr.w	r2, r2, #8
 80047f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0204 	bic.w	r2, r2, #4
 8004804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69d9      	ldr	r1, [r3, #28]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	61da      	str	r2, [r3, #28]
      break;
 8004818:	e064      	b.n	80048e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68b9      	ldr	r1, [r7, #8]
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fb4d 	bl	8004ec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69da      	ldr	r2, [r3, #28]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69d9      	ldr	r1, [r3, #28]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	021a      	lsls	r2, r3, #8
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	61da      	str	r2, [r3, #28]
      break;
 800485a:	e043      	b.n	80048e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fb90 	bl	8004f88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0208 	orr.w	r2, r2, #8
 8004876:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0204 	bic.w	r2, r2, #4
 8004886:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800489a:	e023      	b.n	80048e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fbce 	bl	8005044 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	021a      	lsls	r2, r3, #8
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048dc:	e002      	b.n	80048e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	75fb      	strb	r3, [r7, #23]
      break;
 80048e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop

080048f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_TIM_ConfigClockSource+0x1c>
 8004910:	2302      	movs	r3, #2
 8004912:	e0b6      	b.n	8004a82 <HAL_TIM_ConfigClockSource+0x18a>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004932:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800493e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004950:	d03e      	beq.n	80049d0 <HAL_TIM_ConfigClockSource+0xd8>
 8004952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004956:	f200 8087 	bhi.w	8004a68 <HAL_TIM_ConfigClockSource+0x170>
 800495a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495e:	f000 8086 	beq.w	8004a6e <HAL_TIM_ConfigClockSource+0x176>
 8004962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004966:	d87f      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x170>
 8004968:	2b70      	cmp	r3, #112	; 0x70
 800496a:	d01a      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0xaa>
 800496c:	2b70      	cmp	r3, #112	; 0x70
 800496e:	d87b      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x170>
 8004970:	2b60      	cmp	r3, #96	; 0x60
 8004972:	d050      	beq.n	8004a16 <HAL_TIM_ConfigClockSource+0x11e>
 8004974:	2b60      	cmp	r3, #96	; 0x60
 8004976:	d877      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x170>
 8004978:	2b50      	cmp	r3, #80	; 0x50
 800497a:	d03c      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0xfe>
 800497c:	2b50      	cmp	r3, #80	; 0x50
 800497e:	d873      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x170>
 8004980:	2b40      	cmp	r3, #64	; 0x40
 8004982:	d058      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x13e>
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d86f      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x170>
 8004988:	2b30      	cmp	r3, #48	; 0x30
 800498a:	d064      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x15e>
 800498c:	2b30      	cmp	r3, #48	; 0x30
 800498e:	d86b      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x170>
 8004990:	2b20      	cmp	r3, #32
 8004992:	d060      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x15e>
 8004994:	2b20      	cmp	r3, #32
 8004996:	d867      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x170>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d05c      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x15e>
 800499c:	2b10      	cmp	r3, #16
 800499e:	d05a      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x15e>
 80049a0:	e062      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6899      	ldr	r1, [r3, #8]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f000 fc21 	bl	80051f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	609a      	str	r2, [r3, #8]
      break;
 80049ce:	e04f      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	6899      	ldr	r1, [r3, #8]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f000 fc0a 	bl	80051f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049f2:	609a      	str	r2, [r3, #8]
      break;
 80049f4:	e03c      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6859      	ldr	r1, [r3, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	461a      	mov	r2, r3
 8004a04:	f000 fb7e 	bl	8005104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2150      	movs	r1, #80	; 0x50
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fbd7 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004a14:	e02c      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6859      	ldr	r1, [r3, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	461a      	mov	r2, r3
 8004a24:	f000 fb9d 	bl	8005162 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2160      	movs	r1, #96	; 0x60
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fbc7 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004a34:	e01c      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6859      	ldr	r1, [r3, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	461a      	mov	r2, r3
 8004a44:	f000 fb5e 	bl	8005104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2140      	movs	r1, #64	; 0x40
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fbb7 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004a54:	e00c      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4610      	mov	r0, r2
 8004a62:	f000 fbae 	bl	80051c2 <TIM_ITRx_SetConfig>
      break;
 8004a66:	e003      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a6c:	e000      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
	...

08004adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a2e      	ldr	r2, [pc, #184]	; (8004ba8 <TIM_Base_SetConfig+0xcc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_Base_SetConfig+0x20>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afa:	d108      	bne.n	8004b0e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a25      	ldr	r2, [pc, #148]	; (8004ba8 <TIM_Base_SetConfig+0xcc>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00f      	beq.n	8004b36 <TIM_Base_SetConfig+0x5a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1c:	d00b      	beq.n	8004b36 <TIM_Base_SetConfig+0x5a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a22      	ldr	r2, [pc, #136]	; (8004bac <TIM_Base_SetConfig+0xd0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <TIM_Base_SetConfig+0x5a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a21      	ldr	r2, [pc, #132]	; (8004bb0 <TIM_Base_SetConfig+0xd4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_Base_SetConfig+0x5a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a20      	ldr	r2, [pc, #128]	; (8004bb4 <TIM_Base_SetConfig+0xd8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d108      	bne.n	8004b48 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ba8 <TIM_Base_SetConfig+0xcc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00b      	beq.n	8004b8c <TIM_Base_SetConfig+0xb0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a0d      	ldr	r2, [pc, #52]	; (8004bac <TIM_Base_SetConfig+0xd0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d007      	beq.n	8004b8c <TIM_Base_SetConfig+0xb0>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a0c      	ldr	r2, [pc, #48]	; (8004bb0 <TIM_Base_SetConfig+0xd4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d003      	beq.n	8004b8c <TIM_Base_SetConfig+0xb0>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a0b      	ldr	r2, [pc, #44]	; (8004bb4 <TIM_Base_SetConfig+0xd8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d103      	bne.n	8004b94 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	615a      	str	r2, [r3, #20]
}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40012c00 	.word	0x40012c00
 8004bac:	40014000 	.word	0x40014000
 8004bb0:	40014400 	.word	0x40014400
 8004bb4:	40014800 	.word	0x40014800

08004bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f023 0201 	bic.w	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0303 	bic.w	r3, r3, #3
 8004bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f023 0302 	bic.w	r3, r3, #2
 8004c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a28      	ldr	r2, [pc, #160]	; (8004cb4 <TIM_OC1_SetConfig+0xfc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d00b      	beq.n	8004c30 <TIM_OC1_SetConfig+0x78>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a27      	ldr	r2, [pc, #156]	; (8004cb8 <TIM_OC1_SetConfig+0x100>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d007      	beq.n	8004c30 <TIM_OC1_SetConfig+0x78>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a26      	ldr	r2, [pc, #152]	; (8004cbc <TIM_OC1_SetConfig+0x104>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d003      	beq.n	8004c30 <TIM_OC1_SetConfig+0x78>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a25      	ldr	r2, [pc, #148]	; (8004cc0 <TIM_OC1_SetConfig+0x108>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d10c      	bne.n	8004c4a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f023 0308 	bic.w	r3, r3, #8
 8004c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f023 0304 	bic.w	r3, r3, #4
 8004c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a19      	ldr	r2, [pc, #100]	; (8004cb4 <TIM_OC1_SetConfig+0xfc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00b      	beq.n	8004c6a <TIM_OC1_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a18      	ldr	r2, [pc, #96]	; (8004cb8 <TIM_OC1_SetConfig+0x100>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d007      	beq.n	8004c6a <TIM_OC1_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <TIM_OC1_SetConfig+0x104>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d003      	beq.n	8004c6a <TIM_OC1_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <TIM_OC1_SetConfig+0x108>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d111      	bne.n	8004c8e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	621a      	str	r2, [r3, #32]
}
 8004ca8:	bf00      	nop
 8004caa:	371c      	adds	r7, #28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	40012c00 	.word	0x40012c00
 8004cb8:	40014000 	.word	0x40014000
 8004cbc:	40014400 	.word	0x40014400
 8004cc0:	40014800 	.word	0x40014800

08004cc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f023 0210 	bic.w	r2, r3, #16
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	021b      	lsls	r3, r3, #8
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f023 0320 	bic.w	r3, r3, #32
 8004d12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a24      	ldr	r2, [pc, #144]	; (8004db4 <TIM_OC2_SetConfig+0xf0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d10d      	bne.n	8004d44 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a1b      	ldr	r2, [pc, #108]	; (8004db4 <TIM_OC2_SetConfig+0xf0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00b      	beq.n	8004d64 <TIM_OC2_SetConfig+0xa0>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a1a      	ldr	r2, [pc, #104]	; (8004db8 <TIM_OC2_SetConfig+0xf4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d007      	beq.n	8004d64 <TIM_OC2_SetConfig+0xa0>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a19      	ldr	r2, [pc, #100]	; (8004dbc <TIM_OC2_SetConfig+0xf8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_OC2_SetConfig+0xa0>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a18      	ldr	r2, [pc, #96]	; (8004dc0 <TIM_OC2_SetConfig+0xfc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d113      	bne.n	8004d8c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d6a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d72:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	621a      	str	r2, [r3, #32]
}
 8004da6:	bf00      	nop
 8004da8:	371c      	adds	r7, #28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40012c00 	.word	0x40012c00
 8004db8:	40014000 	.word	0x40014000
 8004dbc:	40014400 	.word	0x40014400
 8004dc0:	40014800 	.word	0x40014800

08004dc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0303 	bic.w	r3, r3, #3
 8004dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a23      	ldr	r2, [pc, #140]	; (8004eb0 <TIM_OC3_SetConfig+0xec>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d10d      	bne.n	8004e42 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e40:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a1a      	ldr	r2, [pc, #104]	; (8004eb0 <TIM_OC3_SetConfig+0xec>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00b      	beq.n	8004e62 <TIM_OC3_SetConfig+0x9e>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a19      	ldr	r2, [pc, #100]	; (8004eb4 <TIM_OC3_SetConfig+0xf0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d007      	beq.n	8004e62 <TIM_OC3_SetConfig+0x9e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <TIM_OC3_SetConfig+0xf4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_OC3_SetConfig+0x9e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <TIM_OC3_SetConfig+0xf8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d113      	bne.n	8004e8a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	621a      	str	r2, [r3, #32]
}
 8004ea4:	bf00      	nop
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	40012c00 	.word	0x40012c00
 8004eb4:	40014000 	.word	0x40014000
 8004eb8:	40014400 	.word	0x40014400
 8004ebc:	40014800 	.word	0x40014800

08004ec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	031b      	lsls	r3, r3, #12
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a16      	ldr	r2, [pc, #88]	; (8004f78 <TIM_OC4_SetConfig+0xb8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00b      	beq.n	8004f3c <TIM_OC4_SetConfig+0x7c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a15      	ldr	r2, [pc, #84]	; (8004f7c <TIM_OC4_SetConfig+0xbc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d007      	beq.n	8004f3c <TIM_OC4_SetConfig+0x7c>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a14      	ldr	r2, [pc, #80]	; (8004f80 <TIM_OC4_SetConfig+0xc0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d003      	beq.n	8004f3c <TIM_OC4_SetConfig+0x7c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a13      	ldr	r2, [pc, #76]	; (8004f84 <TIM_OC4_SetConfig+0xc4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d109      	bne.n	8004f50 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	019b      	lsls	r3, r3, #6
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	621a      	str	r2, [r3, #32]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40012c00 	.word	0x40012c00
 8004f7c:	40014000 	.word	0x40014000
 8004f80:	40014400 	.word	0x40014400
 8004f84:	40014800 	.word	0x40014800

08004f88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004fcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	041b      	lsls	r3, r3, #16
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a15      	ldr	r2, [pc, #84]	; (8005034 <TIM_OC5_SetConfig+0xac>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00b      	beq.n	8004ffa <TIM_OC5_SetConfig+0x72>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a14      	ldr	r2, [pc, #80]	; (8005038 <TIM_OC5_SetConfig+0xb0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d007      	beq.n	8004ffa <TIM_OC5_SetConfig+0x72>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a13      	ldr	r2, [pc, #76]	; (800503c <TIM_OC5_SetConfig+0xb4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d003      	beq.n	8004ffa <TIM_OC5_SetConfig+0x72>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a12      	ldr	r2, [pc, #72]	; (8005040 <TIM_OC5_SetConfig+0xb8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d109      	bne.n	800500e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005000:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	021b      	lsls	r3, r3, #8
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	621a      	str	r2, [r3, #32]
}
 8005028:	bf00      	nop
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	40012c00 	.word	0x40012c00
 8005038:	40014000 	.word	0x40014000
 800503c:	40014400 	.word	0x40014400
 8005040:	40014800 	.word	0x40014800

08005044 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800508a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	051b      	lsls	r3, r3, #20
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a16      	ldr	r2, [pc, #88]	; (80050f4 <TIM_OC6_SetConfig+0xb0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00b      	beq.n	80050b8 <TIM_OC6_SetConfig+0x74>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a15      	ldr	r2, [pc, #84]	; (80050f8 <TIM_OC6_SetConfig+0xb4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_OC6_SetConfig+0x74>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a14      	ldr	r2, [pc, #80]	; (80050fc <TIM_OC6_SetConfig+0xb8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_OC6_SetConfig+0x74>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a13      	ldr	r2, [pc, #76]	; (8005100 <TIM_OC6_SetConfig+0xbc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d109      	bne.n	80050cc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	029b      	lsls	r3, r3, #10
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40014000 	.word	0x40014000
 80050fc:	40014400 	.word	0x40014400
 8005100:	40014800 	.word	0x40014800

08005104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	f023 0201 	bic.w	r2, r3, #1
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800512e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f023 030a 	bic.w	r3, r3, #10
 8005140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	621a      	str	r2, [r3, #32]
}
 8005156:	bf00      	nop
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005162:	b480      	push	{r7}
 8005164:	b087      	sub	sp, #28
 8005166:	af00      	add	r7, sp, #0
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f023 0210 	bic.w	r2, r3, #16
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800518c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	031b      	lsls	r3, r3, #12
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800519e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	621a      	str	r2, [r3, #32]
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	f043 0307 	orr.w	r3, r3, #7
 80051e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	609a      	str	r2, [r3, #8]
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	021a      	lsls	r2, r3, #8
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	431a      	orrs	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4313      	orrs	r3, r2
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	609a      	str	r2, [r3, #8]
}
 800522c:	bf00      	nop
 800522e:	371c      	adds	r7, #28
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	2201      	movs	r2, #1
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a1a      	ldr	r2, [r3, #32]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	43db      	mvns	r3, r3
 800525a:	401a      	ands	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a1a      	ldr	r2, [r3, #32]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	fa01 f303 	lsl.w	r3, r1, r3
 8005270:	431a      	orrs	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
	...

08005284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005298:	2302      	movs	r3, #2
 800529a:	e04f      	b.n	800533c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a21      	ldr	r2, [pc, #132]	; (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d108      	bne.n	80052d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a14      	ldr	r2, [pc, #80]	; (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d009      	beq.n	8005310 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005304:	d004      	beq.n	8005310 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a10      	ldr	r2, [pc, #64]	; (800534c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d10c      	bne.n	800532a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005316:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	4313      	orrs	r3, r2
 8005320:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	40012c00 	.word	0x40012c00
 800534c:	40014000 	.word	0x40014000

08005350 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005368:	2302      	movs	r3, #2
 800536a:	e060      	b.n	800542e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	041b      	lsls	r3, r3, #16
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a14      	ldr	r2, [pc, #80]	; (800543c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d115      	bne.n	800541c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	051b      	lsls	r3, r3, #20
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40012c00 	.word	0x40012c00

08005440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800548a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800548e:	2b84      	cmp	r3, #132	; 0x84
 8005490:	d005      	beq.n	800549e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005492:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4413      	add	r3, r2
 800549a:	3303      	adds	r3, #3
 800549c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800549e:	68fb      	ldr	r3, [r7, #12]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80054b0:	f000 ffb8 	bl	8006424 <vTaskStartScheduler>
  
  return osOK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	bd80      	pop	{r7, pc}

080054ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80054ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054bc:	b089      	sub	sp, #36	; 0x24
 80054be:	af04      	add	r7, sp, #16
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d020      	beq.n	800550e <osThreadCreate+0x54>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01c      	beq.n	800550e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685c      	ldr	r4, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681d      	ldr	r5, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691e      	ldr	r6, [r3, #16]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff ffc8 	bl	800547c <makeFreeRtosPriority>
 80054ec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054f6:	9202      	str	r2, [sp, #8]
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	9100      	str	r1, [sp, #0]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	4632      	mov	r2, r6
 8005500:	4629      	mov	r1, r5
 8005502:	4620      	mov	r0, r4
 8005504:	f000 fdd0 	bl	80060a8 <xTaskCreateStatic>
 8005508:	4603      	mov	r3, r0
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	e01c      	b.n	8005548 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685c      	ldr	r4, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800551a:	b29e      	uxth	r6, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff ffaa 	bl	800547c <makeFreeRtosPriority>
 8005528:	4602      	mov	r2, r0
 800552a:	f107 030c 	add.w	r3, r7, #12
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	9200      	str	r2, [sp, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	4632      	mov	r2, r6
 8005536:	4629      	mov	r1, r5
 8005538:	4620      	mov	r0, r4
 800553a:	f000 fe11 	bl	8006160 <xTaskCreate>
 800553e:	4603      	mov	r3, r0
 8005540:	2b01      	cmp	r3, #1
 8005542:	d001      	beq.n	8005548 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005544:	2300      	movs	r3, #0
 8005546:	e000      	b.n	800554a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005548:	68fb      	ldr	r3, [r7, #12]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005552 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <osDelay+0x16>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	e000      	b.n	800556a <osDelay+0x18>
 8005568:	2301      	movs	r3, #1
 800556a:	4618      	mov	r0, r3
 800556c:	f000 ff26 	bl	80063bc <vTaskDelay>
  
  return osOK;
 8005570:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f103 0208 	add.w	r2, r3, #8
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f04f 32ff 	mov.w	r2, #4294967295
 8005592:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f103 0208 	add.w	r2, r3, #8
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f103 0208 	add.w	r2, r3, #8
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	601a      	str	r2, [r3, #0]
}
 8005610:	bf00      	nop
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d103      	bne.n	800563c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	e00c      	b.n	8005656 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	3308      	adds	r3, #8
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	e002      	b.n	800564a <vListInsert+0x2e>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	429a      	cmp	r2, r3
 8005654:	d2f6      	bcs.n	8005644 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	601a      	str	r2, [r3, #0]
}
 8005682:	bf00      	nop
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800568e:	b480      	push	{r7}
 8005690:	b085      	sub	sp, #20
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6892      	ldr	r2, [r2, #8]
 80056a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6852      	ldr	r2, [r2, #4]
 80056ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d103      	bne.n	80056c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	1e5a      	subs	r2, r3, #1
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
	...

080056e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800570a:	bf00      	nop
 800570c:	e7fe      	b.n	800570c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800570e:	f002 f801 	bl	8007714 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800571e:	fb01 f303 	mul.w	r3, r1, r3
 8005722:	441a      	add	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573e:	3b01      	subs	r3, #1
 8005740:	68f9      	ldr	r1, [r7, #12]
 8005742:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005744:	fb01 f303 	mul.w	r3, r1, r3
 8005748:	441a      	add	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	22ff      	movs	r2, #255	; 0xff
 8005752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	22ff      	movs	r2, #255	; 0xff
 800575a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d114      	bne.n	800578e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01a      	beq.n	80057a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3310      	adds	r3, #16
 8005770:	4618      	mov	r0, r3
 8005772:	f001 f8e1 	bl	8006938 <xTaskRemoveFromEventList>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d012      	beq.n	80057a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800577c:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <xQueueGenericReset+0xcc>)
 800577e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	e009      	b.n	80057a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3310      	adds	r3, #16
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff fef1 	bl	800557a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	3324      	adds	r3, #36	; 0x24
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff feec 	bl	800557a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057a2:	f001 ffe7 	bl	8007774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057a6:	2301      	movs	r3, #1
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	e000ed04 	.word	0xe000ed04

080057b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08e      	sub	sp, #56	; 0x38
 80057b8:	af02      	add	r7, sp, #8
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <xQueueGenericCreateStatic+0x52>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <xQueueGenericCreateStatic+0x56>
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <xQueueGenericCreateStatic+0x58>
 800580a:	2300      	movs	r3, #0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	623b      	str	r3, [r7, #32]
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d102      	bne.n	8005832 <xQueueGenericCreateStatic+0x7e>
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <xQueueGenericCreateStatic+0x82>
 8005832:	2301      	movs	r3, #1
 8005834:	e000      	b.n	8005838 <xQueueGenericCreateStatic+0x84>
 8005836:	2300      	movs	r3, #0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10a      	bne.n	8005852 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	61fb      	str	r3, [r7, #28]
}
 800584e:	bf00      	nop
 8005850:	e7fe      	b.n	8005850 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005852:	2348      	movs	r3, #72	; 0x48
 8005854:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b48      	cmp	r3, #72	; 0x48
 800585a:	d00a      	beq.n	8005872 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	61bb      	str	r3, [r7, #24]
}
 800586e:	bf00      	nop
 8005870:	e7fe      	b.n	8005870 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00d      	beq.n	8005898 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005884:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	4613      	mov	r3, r2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f805 	bl	80058a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800589a:	4618      	mov	r0, r3
 800589c:	3730      	adds	r7, #48	; 0x30
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	607a      	str	r2, [r7, #4]
 80058ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d103      	bne.n	80058be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	e002      	b.n	80058c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058d0:	2101      	movs	r1, #1
 80058d2:	69b8      	ldr	r0, [r7, #24]
 80058d4:	f7ff ff06 	bl	80056e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058d8:	bf00      	nop
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08e      	sub	sp, #56	; 0x38
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058ee:	2300      	movs	r3, #0
 80058f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10a      	bne.n	8005912 <xQueueGenericSend+0x32>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d103      	bne.n	8005920 <xQueueGenericSend+0x40>
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <xQueueGenericSend+0x44>
 8005920:	2301      	movs	r3, #1
 8005922:	e000      	b.n	8005926 <xQueueGenericSend+0x46>
 8005924:	2300      	movs	r3, #0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <xQueueGenericSend+0x60>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800593c:	bf00      	nop
 800593e:	e7fe      	b.n	800593e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d103      	bne.n	800594e <xQueueGenericSend+0x6e>
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <xQueueGenericSend+0x72>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <xQueueGenericSend+0x74>
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <xQueueGenericSend+0x8e>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	623b      	str	r3, [r7, #32]
}
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800596e:	f001 f9a5 	bl	8006cbc <xTaskGetSchedulerState>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <xQueueGenericSend+0x9e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <xQueueGenericSend+0xa2>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <xQueueGenericSend+0xa4>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <xQueueGenericSend+0xbe>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	61fb      	str	r3, [r7, #28]
}
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800599e:	f001 feb9 	bl	8007714 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d302      	bcc.n	80059b4 <xQueueGenericSend+0xd4>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d129      	bne.n	8005a08 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059ba:	f000 fa07 	bl	8005dcc <prvCopyDataToQueue>
 80059be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d010      	beq.n	80059ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	3324      	adds	r3, #36	; 0x24
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 ffb3 	bl	8006938 <xTaskRemoveFromEventList>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d013      	beq.n	8005a00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059d8:	4b3f      	ldr	r3, [pc, #252]	; (8005ad8 <xQueueGenericSend+0x1f8>)
 80059da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	e00a      	b.n	8005a00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059f0:	4b39      	ldr	r3, [pc, #228]	; (8005ad8 <xQueueGenericSend+0x1f8>)
 80059f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a00:	f001 feb8 	bl	8007774 <vPortExitCritical>
				return pdPASS;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e063      	b.n	8005ad0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d103      	bne.n	8005a16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a0e:	f001 feb1 	bl	8007774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e05c      	b.n	8005ad0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d106      	bne.n	8005a2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a1c:	f107 0314 	add.w	r3, r7, #20
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 ffeb 	bl	80069fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a26:	2301      	movs	r3, #1
 8005a28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a2a:	f001 fea3 	bl	8007774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a2e:	f000 fd5f 	bl	80064f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a32:	f001 fe6f 	bl	8007714 <vPortEnterCritical>
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a3c:	b25b      	sxtb	r3, r3
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d103      	bne.n	8005a4c <xQueueGenericSend+0x16c>
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a52:	b25b      	sxtb	r3, r3
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d103      	bne.n	8005a62 <xQueueGenericSend+0x182>
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a62:	f001 fe87 	bl	8007774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a66:	1d3a      	adds	r2, r7, #4
 8005a68:	f107 0314 	add.w	r3, r7, #20
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 ffda 	bl	8006a28 <xTaskCheckForTimeOut>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d124      	bne.n	8005ac4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a7c:	f000 fa9e 	bl	8005fbc <prvIsQueueFull>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d018      	beq.n	8005ab8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	3310      	adds	r3, #16
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 ff02 	bl	8006898 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a96:	f000 fa29 	bl	8005eec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a9a:	f000 fd37 	bl	800650c <xTaskResumeAll>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f47f af7c 	bne.w	800599e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <xQueueGenericSend+0x1f8>)
 8005aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	e772      	b.n	800599e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aba:	f000 fa17 	bl	8005eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005abe:	f000 fd25 	bl	800650c <xTaskResumeAll>
 8005ac2:	e76c      	b.n	800599e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ac6:	f000 fa11 	bl	8005eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aca:	f000 fd1f 	bl	800650c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ace:	2300      	movs	r3, #0
		}
	}
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3738      	adds	r7, #56	; 0x38
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	e000ed04 	.word	0xe000ed04

08005adc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08e      	sub	sp, #56	; 0x38
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10a      	bne.n	8005b0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b06:	bf00      	nop
 8005b08:	e7fe      	b.n	8005b08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d103      	bne.n	8005b18 <xQueueGenericSendFromISR+0x3c>
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <xQueueGenericSendFromISR+0x40>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e000      	b.n	8005b1e <xQueueGenericSendFromISR+0x42>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10a      	bne.n	8005b38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	623b      	str	r3, [r7, #32]
}
 8005b34:	bf00      	nop
 8005b36:	e7fe      	b.n	8005b36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d103      	bne.n	8005b46 <xQueueGenericSendFromISR+0x6a>
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <xQueueGenericSendFromISR+0x6e>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <xQueueGenericSendFromISR+0x70>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	61fb      	str	r3, [r7, #28]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b66:	f001 feb7 	bl	80078d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b6a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	61ba      	str	r2, [r7, #24]
 8005b80:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b82:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d302      	bcc.n	8005b98 <xQueueGenericSendFromISR+0xbc>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d12c      	bne.n	8005bf2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	68b9      	ldr	r1, [r7, #8]
 8005ba6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ba8:	f000 f910 	bl	8005dcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb4:	d112      	bne.n	8005bdc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d016      	beq.n	8005bec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	3324      	adds	r3, #36	; 0x24
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 feb8 	bl	8006938 <xTaskRemoveFromEventList>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00e      	beq.n	8005bec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00b      	beq.n	8005bec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	e007      	b.n	8005bec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005be0:	3301      	adds	r3, #1
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	b25a      	sxtb	r2, r3
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005bec:	2301      	movs	r3, #1
 8005bee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005bf0:	e001      	b.n	8005bf6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3738      	adds	r7, #56	; 0x38
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08c      	sub	sp, #48	; 0x30
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10a      	bne.n	8005c3c <xQueueReceive+0x30>
	__asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	623b      	str	r3, [r7, #32]
}
 8005c38:	bf00      	nop
 8005c3a:	e7fe      	b.n	8005c3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d103      	bne.n	8005c4a <xQueueReceive+0x3e>
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <xQueueReceive+0x42>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <xQueueReceive+0x44>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <xQueueReceive+0x5e>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	61fb      	str	r3, [r7, #28]
}
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c6a:	f001 f827 	bl	8006cbc <xTaskGetSchedulerState>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d102      	bne.n	8005c7a <xQueueReceive+0x6e>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <xQueueReceive+0x72>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <xQueueReceive+0x74>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <xQueueReceive+0x8e>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	61bb      	str	r3, [r7, #24]
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c9a:	f001 fd3b 	bl	8007714 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d01f      	beq.n	8005cea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cae:	f000 f8f7 	bl	8005ea0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	1e5a      	subs	r2, r3, #1
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00f      	beq.n	8005ce2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	3310      	adds	r3, #16
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fe36 	bl	8006938 <xTaskRemoveFromEventList>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d007      	beq.n	8005ce2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cd2:	4b3d      	ldr	r3, [pc, #244]	; (8005dc8 <xQueueReceive+0x1bc>)
 8005cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ce2:	f001 fd47 	bl	8007774 <vPortExitCritical>
				return pdPASS;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e069      	b.n	8005dbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d103      	bne.n	8005cf8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cf0:	f001 fd40 	bl	8007774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	e062      	b.n	8005dbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cfe:	f107 0310 	add.w	r3, r7, #16
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fe7a 	bl	80069fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d0c:	f001 fd32 	bl	8007774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d10:	f000 fbee 	bl	80064f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d14:	f001 fcfe 	bl	8007714 <vPortEnterCritical>
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d1e:	b25b      	sxtb	r3, r3
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d103      	bne.n	8005d2e <xQueueReceive+0x122>
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d34:	b25b      	sxtb	r3, r3
 8005d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3a:	d103      	bne.n	8005d44 <xQueueReceive+0x138>
 8005d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d44:	f001 fd16 	bl	8007774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d48:	1d3a      	adds	r2, r7, #4
 8005d4a:	f107 0310 	add.w	r3, r7, #16
 8005d4e:	4611      	mov	r1, r2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fe69 	bl	8006a28 <xTaskCheckForTimeOut>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d123      	bne.n	8005da4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d5e:	f000 f917 	bl	8005f90 <prvIsQueueEmpty>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d017      	beq.n	8005d98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	3324      	adds	r3, #36	; 0x24
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	4611      	mov	r1, r2
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 fd91 	bl	8006898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d78:	f000 f8b8 	bl	8005eec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d7c:	f000 fbc6 	bl	800650c <xTaskResumeAll>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d189      	bne.n	8005c9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005d86:	4b10      	ldr	r3, [pc, #64]	; (8005dc8 <xQueueReceive+0x1bc>)
 8005d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	e780      	b.n	8005c9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d9a:	f000 f8a7 	bl	8005eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d9e:	f000 fbb5 	bl	800650c <xTaskResumeAll>
 8005da2:	e77a      	b.n	8005c9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005da6:	f000 f8a1 	bl	8005eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005daa:	f000 fbaf 	bl	800650c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005db0:	f000 f8ee 	bl	8005f90 <prvIsQueueEmpty>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f43f af6f 	beq.w	8005c9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3730      	adds	r7, #48	; 0x30
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	e000ed04 	.word	0xe000ed04

08005dcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10d      	bne.n	8005e06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d14d      	bne.n	8005e8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 ff7e 	bl	8006cf8 <xTaskPriorityDisinherit>
 8005dfc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	605a      	str	r2, [r3, #4]
 8005e04:	e043      	b.n	8005e8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d119      	bne.n	8005e40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6898      	ldr	r0, [r3, #8]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	461a      	mov	r2, r3
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	f001 ff9c 	bl	8007d54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	441a      	add	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d32b      	bcc.n	8005e8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	609a      	str	r2, [r3, #8]
 8005e3e:	e026      	b.n	8005e8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	68d8      	ldr	r0, [r3, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	461a      	mov	r2, r3
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	f001 ff82 	bl	8007d54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	425b      	negs	r3, r3
 8005e5a:	441a      	add	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d207      	bcs.n	8005e7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e74:	425b      	negs	r3, r3
 8005e76:	441a      	add	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d105      	bne.n	8005e8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e96:	697b      	ldr	r3, [r7, #20]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d018      	beq.n	8005ee4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	441a      	add	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d303      	bcc.n	8005ed4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68d9      	ldr	r1, [r3, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	461a      	mov	r2, r3
 8005ede:	6838      	ldr	r0, [r7, #0]
 8005ee0:	f001 ff38 	bl	8007d54 <memcpy>
	}
}
 8005ee4:	bf00      	nop
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ef4:	f001 fc0e 	bl	8007714 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005efe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f00:	e011      	b.n	8005f26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d012      	beq.n	8005f30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3324      	adds	r3, #36	; 0x24
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fd12 	bl	8006938 <xTaskRemoveFromEventList>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f1a:	f000 fde7 	bl	8006aec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	dce9      	bgt.n	8005f02 <prvUnlockQueue+0x16>
 8005f2e:	e000      	b.n	8005f32 <prvUnlockQueue+0x46>
					break;
 8005f30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	22ff      	movs	r2, #255	; 0xff
 8005f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f3a:	f001 fc1b 	bl	8007774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f3e:	f001 fbe9 	bl	8007714 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f4a:	e011      	b.n	8005f70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d012      	beq.n	8005f7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3310      	adds	r3, #16
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fced 	bl	8006938 <xTaskRemoveFromEventList>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f64:	f000 fdc2 	bl	8006aec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f68:	7bbb      	ldrb	r3, [r7, #14]
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	dce9      	bgt.n	8005f4c <prvUnlockQueue+0x60>
 8005f78:	e000      	b.n	8005f7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	22ff      	movs	r2, #255	; 0xff
 8005f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f84:	f001 fbf6 	bl	8007774 <vPortExitCritical>
}
 8005f88:	bf00      	nop
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f98:	f001 fbbc 	bl	8007714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d102      	bne.n	8005faa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	e001      	b.n	8005fae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fae:	f001 fbe1 	bl	8007774 <vPortExitCritical>

	return xReturn;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fc4:	f001 fba6 	bl	8007714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d102      	bne.n	8005fda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	e001      	b.n	8005fde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fde:	f001 fbc9 	bl	8007774 <vPortExitCritical>

	return xReturn;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	e014      	b.n	8006026 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ffc:	4a0f      	ldr	r2, [pc, #60]	; (800603c <vQueueAddToRegistry+0x50>)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10b      	bne.n	8006020 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006008:	490c      	ldr	r1, [pc, #48]	; (800603c <vQueueAddToRegistry+0x50>)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006012:	4a0a      	ldr	r2, [pc, #40]	; (800603c <vQueueAddToRegistry+0x50>)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	4413      	add	r3, r2
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800601e:	e006      	b.n	800602e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3301      	adds	r3, #1
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b07      	cmp	r3, #7
 800602a:	d9e7      	bls.n	8005ffc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	20000424 	.word	0x20000424

08006040 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006050:	f001 fb60 	bl	8007714 <vPortEnterCritical>
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800605a:	b25b      	sxtb	r3, r3
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006060:	d103      	bne.n	800606a <vQueueWaitForMessageRestricted+0x2a>
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006070:	b25b      	sxtb	r3, r3
 8006072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006076:	d103      	bne.n	8006080 <vQueueWaitForMessageRestricted+0x40>
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006080:	f001 fb78 	bl	8007774 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	2b00      	cmp	r3, #0
 800608a:	d106      	bne.n	800609a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	3324      	adds	r3, #36	; 0x24
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	68b9      	ldr	r1, [r7, #8]
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fc23 	bl	80068e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800609a:	6978      	ldr	r0, [r7, #20]
 800609c:	f7ff ff26 	bl	8005eec <prvUnlockQueue>
	}
 80060a0:	bf00      	nop
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08e      	sub	sp, #56	; 0x38
 80060ac:	af04      	add	r7, sp, #16
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10a      	bne.n	80060d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	623b      	str	r3, [r7, #32]
}
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10a      	bne.n	80060ee <xTaskCreateStatic+0x46>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	61fb      	str	r3, [r7, #28]
}
 80060ea:	bf00      	nop
 80060ec:	e7fe      	b.n	80060ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060ee:	2354      	movs	r3, #84	; 0x54
 80060f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	2b54      	cmp	r3, #84	; 0x54
 80060f6:	d00a      	beq.n	800610e <xTaskCreateStatic+0x66>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	61bb      	str	r3, [r7, #24]
}
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	2b00      	cmp	r3, #0
 8006112:	d01e      	beq.n	8006152 <xTaskCreateStatic+0xaa>
 8006114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006116:	2b00      	cmp	r3, #0
 8006118:	d01b      	beq.n	8006152 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800611a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006122:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	2202      	movs	r2, #2
 8006128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800612c:	2300      	movs	r3, #0
 800612e:	9303      	str	r3, [sp, #12]
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	9302      	str	r3, [sp, #8]
 8006134:	f107 0314 	add.w	r3, r7, #20
 8006138:	9301      	str	r3, [sp, #4]
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f850 	bl	80061ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800614a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800614c:	f000 f8cc 	bl	80062e8 <prvAddNewTaskToReadyList>
 8006150:	e001      	b.n	8006156 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006156:	697b      	ldr	r3, [r7, #20]
	}
 8006158:	4618      	mov	r0, r3
 800615a:	3728      	adds	r7, #40	; 0x28
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08c      	sub	sp, #48	; 0x30
 8006164:	af04      	add	r7, sp, #16
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	603b      	str	r3, [r7, #0]
 800616c:	4613      	mov	r3, r2
 800616e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006170:	88fb      	ldrh	r3, [r7, #6]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4618      	mov	r0, r3
 8006176:	f001 fbef 	bl	8007958 <pvPortMalloc>
 800617a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00e      	beq.n	80061a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006182:	2054      	movs	r0, #84	; 0x54
 8006184:	f001 fbe8 	bl	8007958 <pvPortMalloc>
 8006188:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	631a      	str	r2, [r3, #48]	; 0x30
 8006196:	e005      	b.n	80061a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006198:	6978      	ldr	r0, [r7, #20]
 800619a:	f001 fca1 	bl	8007ae0 <vPortFree>
 800619e:	e001      	b.n	80061a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061a0:	2300      	movs	r3, #0
 80061a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d017      	beq.n	80061da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061b2:	88fa      	ldrh	r2, [r7, #6]
 80061b4:	2300      	movs	r3, #0
 80061b6:	9303      	str	r3, [sp, #12]
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	9302      	str	r3, [sp, #8]
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 f80e 	bl	80061ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061ce:	69f8      	ldr	r0, [r7, #28]
 80061d0:	f000 f88a 	bl	80062e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061d4:	2301      	movs	r3, #1
 80061d6:	61bb      	str	r3, [r7, #24]
 80061d8:	e002      	b.n	80061e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061da:	f04f 33ff 	mov.w	r3, #4294967295
 80061de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061e0:	69bb      	ldr	r3, [r7, #24]
	}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b088      	sub	sp, #32
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
 80061f6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006202:	3b01      	subs	r3, #1
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	f023 0307 	bic.w	r3, r3, #7
 8006210:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <prvInitialiseNewTask+0x48>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	617b      	str	r3, [r7, #20]
}
 800622e:	bf00      	nop
 8006230:	e7fe      	b.n	8006230 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006232:	2300      	movs	r3, #0
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	e012      	b.n	800625e <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	4413      	add	r3, r2
 800623e:	7819      	ldrb	r1, [r3, #0]
 8006240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	4413      	add	r3, r2
 8006246:	3334      	adds	r3, #52	; 0x34
 8006248:	460a      	mov	r2, r1
 800624a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	4413      	add	r3, r2
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d006      	beq.n	8006266 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	3301      	adds	r3, #1
 800625c:	61fb      	str	r3, [r7, #28]
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	2b0f      	cmp	r3, #15
 8006262:	d9e9      	bls.n	8006238 <prvInitialiseNewTask+0x4e>
 8006264:	e000      	b.n	8006268 <prvInitialiseNewTask+0x7e>
		{
			break;
 8006266:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	2b06      	cmp	r3, #6
 8006274:	d901      	bls.n	800627a <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006276:	2306      	movs	r3, #6
 8006278:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800627e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006284:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	2200      	movs	r2, #0
 800628a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	3304      	adds	r3, #4
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff f992 	bl	80055ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	3318      	adds	r3, #24
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff f98d 	bl	80055ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	f1c3 0207 	rsb	r2, r3, #7
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	2200      	movs	r2, #0
 80062ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	68f9      	ldr	r1, [r7, #12]
 80062c8:	69b8      	ldr	r0, [r7, #24]
 80062ca:	f001 f8f9 	bl	80074c0 <pxPortInitialiseStack>
 80062ce:	4602      	mov	r2, r0
 80062d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80062d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062e0:	bf00      	nop
 80062e2:	3720      	adds	r7, #32
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062f0:	f001 fa10 	bl	8007714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062f4:	4b2a      	ldr	r3, [pc, #168]	; (80063a0 <prvAddNewTaskToReadyList+0xb8>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3301      	adds	r3, #1
 80062fa:	4a29      	ldr	r2, [pc, #164]	; (80063a0 <prvAddNewTaskToReadyList+0xb8>)
 80062fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062fe:	4b29      	ldr	r3, [pc, #164]	; (80063a4 <prvAddNewTaskToReadyList+0xbc>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d109      	bne.n	800631a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006306:	4a27      	ldr	r2, [pc, #156]	; (80063a4 <prvAddNewTaskToReadyList+0xbc>)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800630c:	4b24      	ldr	r3, [pc, #144]	; (80063a0 <prvAddNewTaskToReadyList+0xb8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d110      	bne.n	8006336 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006314:	f000 fc0e 	bl	8006b34 <prvInitialiseTaskLists>
 8006318:	e00d      	b.n	8006336 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800631a:	4b23      	ldr	r3, [pc, #140]	; (80063a8 <prvAddNewTaskToReadyList+0xc0>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d109      	bne.n	8006336 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006322:	4b20      	ldr	r3, [pc, #128]	; (80063a4 <prvAddNewTaskToReadyList+0xbc>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	429a      	cmp	r2, r3
 800632e:	d802      	bhi.n	8006336 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006330:	4a1c      	ldr	r2, [pc, #112]	; (80063a4 <prvAddNewTaskToReadyList+0xbc>)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006336:	4b1d      	ldr	r3, [pc, #116]	; (80063ac <prvAddNewTaskToReadyList+0xc4>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3301      	adds	r3, #1
 800633c:	4a1b      	ldr	r2, [pc, #108]	; (80063ac <prvAddNewTaskToReadyList+0xc4>)
 800633e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	2201      	movs	r2, #1
 8006346:	409a      	lsls	r2, r3
 8006348:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <prvAddNewTaskToReadyList+0xc8>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4313      	orrs	r3, r2
 800634e:	4a18      	ldr	r2, [pc, #96]	; (80063b0 <prvAddNewTaskToReadyList+0xc8>)
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006356:	4613      	mov	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4a15      	ldr	r2, [pc, #84]	; (80063b4 <prvAddNewTaskToReadyList+0xcc>)
 8006360:	441a      	add	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3304      	adds	r3, #4
 8006366:	4619      	mov	r1, r3
 8006368:	4610      	mov	r0, r2
 800636a:	f7ff f933 	bl	80055d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800636e:	f001 fa01 	bl	8007774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006372:	4b0d      	ldr	r3, [pc, #52]	; (80063a8 <prvAddNewTaskToReadyList+0xc0>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00e      	beq.n	8006398 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800637a:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <prvAddNewTaskToReadyList+0xbc>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	429a      	cmp	r2, r3
 8006386:	d207      	bcs.n	8006398 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006388:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <prvAddNewTaskToReadyList+0xd0>)
 800638a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006398:	bf00      	nop
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20000564 	.word	0x20000564
 80063a4:	20000464 	.word	0x20000464
 80063a8:	20000570 	.word	0x20000570
 80063ac:	20000580 	.word	0x20000580
 80063b0:	2000056c 	.word	0x2000056c
 80063b4:	20000468 	.word	0x20000468
 80063b8:	e000ed04 	.word	0xe000ed04

080063bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d017      	beq.n	80063fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063ce:	4b13      	ldr	r3, [pc, #76]	; (800641c <vTaskDelay+0x60>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <vTaskDelay+0x30>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	60bb      	str	r3, [r7, #8]
}
 80063e8:	bf00      	nop
 80063ea:	e7fe      	b.n	80063ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80063ec:	f000 f880 	bl	80064f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063f0:	2100      	movs	r1, #0
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fd06 	bl	8006e04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063f8:	f000 f888 	bl	800650c <xTaskResumeAll>
 80063fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d107      	bne.n	8006414 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006404:	4b06      	ldr	r3, [pc, #24]	; (8006420 <vTaskDelay+0x64>)
 8006406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006414:	bf00      	nop
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	2000058c 	.word	0x2000058c
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08a      	sub	sp, #40	; 0x28
 8006428:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800642a:	2300      	movs	r3, #0
 800642c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006432:	463a      	mov	r2, r7
 8006434:	1d39      	adds	r1, r7, #4
 8006436:	f107 0308 	add.w	r3, r7, #8
 800643a:	4618      	mov	r0, r3
 800643c:	f7f9 ff2e 	bl	800029c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	9202      	str	r2, [sp, #8]
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	2300      	movs	r3, #0
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	2300      	movs	r3, #0
 8006450:	460a      	mov	r2, r1
 8006452:	4921      	ldr	r1, [pc, #132]	; (80064d8 <vTaskStartScheduler+0xb4>)
 8006454:	4821      	ldr	r0, [pc, #132]	; (80064dc <vTaskStartScheduler+0xb8>)
 8006456:	f7ff fe27 	bl	80060a8 <xTaskCreateStatic>
 800645a:	4603      	mov	r3, r0
 800645c:	4a20      	ldr	r2, [pc, #128]	; (80064e0 <vTaskStartScheduler+0xbc>)
 800645e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006460:	4b1f      	ldr	r3, [pc, #124]	; (80064e0 <vTaskStartScheduler+0xbc>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006468:	2301      	movs	r3, #1
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	e001      	b.n	8006472 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d102      	bne.n	800647e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006478:	f000 fd2a 	bl	8006ed0 <xTimerCreateTimerTask>
 800647c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d116      	bne.n	80064b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	613b      	str	r3, [r7, #16]
}
 8006496:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006498:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <vTaskStartScheduler+0xc0>)
 800649a:	f04f 32ff 	mov.w	r2, #4294967295
 800649e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064a0:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <vTaskStartScheduler+0xc4>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <vTaskStartScheduler+0xc8>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064ac:	f001 f890 	bl	80075d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064b0:	e00e      	b.n	80064d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b8:	d10a      	bne.n	80064d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	60fb      	str	r3, [r7, #12]
}
 80064cc:	bf00      	nop
 80064ce:	e7fe      	b.n	80064ce <vTaskStartScheduler+0xaa>
}
 80064d0:	bf00      	nop
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	08007e28 	.word	0x08007e28
 80064dc:	08006b05 	.word	0x08006b05
 80064e0:	20000588 	.word	0x20000588
 80064e4:	20000584 	.word	0x20000584
 80064e8:	20000570 	.word	0x20000570
 80064ec:	20000568 	.word	0x20000568

080064f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80064f4:	4b04      	ldr	r3, [pc, #16]	; (8006508 <vTaskSuspendAll+0x18>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3301      	adds	r3, #1
 80064fa:	4a03      	ldr	r2, [pc, #12]	; (8006508 <vTaskSuspendAll+0x18>)
 80064fc:	6013      	str	r3, [r2, #0]
}
 80064fe:	bf00      	nop
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	2000058c 	.word	0x2000058c

0800650c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006516:	2300      	movs	r3, #0
 8006518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800651a:	4b41      	ldr	r3, [pc, #260]	; (8006620 <xTaskResumeAll+0x114>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10a      	bne.n	8006538 <xTaskResumeAll+0x2c>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	603b      	str	r3, [r7, #0]
}
 8006534:	bf00      	nop
 8006536:	e7fe      	b.n	8006536 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006538:	f001 f8ec 	bl	8007714 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800653c:	4b38      	ldr	r3, [pc, #224]	; (8006620 <xTaskResumeAll+0x114>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3b01      	subs	r3, #1
 8006542:	4a37      	ldr	r2, [pc, #220]	; (8006620 <xTaskResumeAll+0x114>)
 8006544:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006546:	4b36      	ldr	r3, [pc, #216]	; (8006620 <xTaskResumeAll+0x114>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d161      	bne.n	8006612 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800654e:	4b35      	ldr	r3, [pc, #212]	; (8006624 <xTaskResumeAll+0x118>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d05d      	beq.n	8006612 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006556:	e02e      	b.n	80065b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006558:	4b33      	ldr	r3, [pc, #204]	; (8006628 <xTaskResumeAll+0x11c>)
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3318      	adds	r3, #24
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff f892 	bl	800568e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3304      	adds	r3, #4
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff f88d 	bl	800568e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	2201      	movs	r2, #1
 800657a:	409a      	lsls	r2, r3
 800657c:	4b2b      	ldr	r3, [pc, #172]	; (800662c <xTaskResumeAll+0x120>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4313      	orrs	r3, r2
 8006582:	4a2a      	ldr	r2, [pc, #168]	; (800662c <xTaskResumeAll+0x120>)
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658a:	4613      	mov	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4a27      	ldr	r2, [pc, #156]	; (8006630 <xTaskResumeAll+0x124>)
 8006594:	441a      	add	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3304      	adds	r3, #4
 800659a:	4619      	mov	r1, r3
 800659c:	4610      	mov	r0, r2
 800659e:	f7ff f819 	bl	80055d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a6:	4b23      	ldr	r3, [pc, #140]	; (8006634 <xTaskResumeAll+0x128>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d302      	bcc.n	80065b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80065b0:	4b21      	ldr	r3, [pc, #132]	; (8006638 <xTaskResumeAll+0x12c>)
 80065b2:	2201      	movs	r2, #1
 80065b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065b6:	4b1c      	ldr	r3, [pc, #112]	; (8006628 <xTaskResumeAll+0x11c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1cc      	bne.n	8006558 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065c4:	f000 fb54 	bl	8006c70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80065c8:	4b1c      	ldr	r3, [pc, #112]	; (800663c <xTaskResumeAll+0x130>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d010      	beq.n	80065f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065d4:	f000 f846 	bl	8006664 <xTaskIncrementTick>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80065de:	4b16      	ldr	r3, [pc, #88]	; (8006638 <xTaskResumeAll+0x12c>)
 80065e0:	2201      	movs	r2, #1
 80065e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1f1      	bne.n	80065d4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80065f0:	4b12      	ldr	r3, [pc, #72]	; (800663c <xTaskResumeAll+0x130>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065f6:	4b10      	ldr	r3, [pc, #64]	; (8006638 <xTaskResumeAll+0x12c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d009      	beq.n	8006612 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065fe:	2301      	movs	r3, #1
 8006600:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006602:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <xTaskResumeAll+0x134>)
 8006604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006612:	f001 f8af 	bl	8007774 <vPortExitCritical>

	return xAlreadyYielded;
 8006616:	68bb      	ldr	r3, [r7, #8]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	2000058c 	.word	0x2000058c
 8006624:	20000564 	.word	0x20000564
 8006628:	20000524 	.word	0x20000524
 800662c:	2000056c 	.word	0x2000056c
 8006630:	20000468 	.word	0x20000468
 8006634:	20000464 	.word	0x20000464
 8006638:	20000578 	.word	0x20000578
 800663c:	20000574 	.word	0x20000574
 8006640:	e000ed04 	.word	0xe000ed04

08006644 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800664a:	4b05      	ldr	r3, [pc, #20]	; (8006660 <xTaskGetTickCount+0x1c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006650:	687b      	ldr	r3, [r7, #4]
}
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	20000568 	.word	0x20000568

08006664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800666a:	2300      	movs	r3, #0
 800666c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800666e:	4b51      	ldr	r3, [pc, #324]	; (80067b4 <xTaskIncrementTick+0x150>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	f040 808d 	bne.w	8006792 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006678:	4b4f      	ldr	r3, [pc, #316]	; (80067b8 <xTaskIncrementTick+0x154>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3301      	adds	r3, #1
 800667e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006680:	4a4d      	ldr	r2, [pc, #308]	; (80067b8 <xTaskIncrementTick+0x154>)
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d120      	bne.n	80066ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800668c:	4b4b      	ldr	r3, [pc, #300]	; (80067bc <xTaskIncrementTick+0x158>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <xTaskIncrementTick+0x48>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	603b      	str	r3, [r7, #0]
}
 80066a8:	bf00      	nop
 80066aa:	e7fe      	b.n	80066aa <xTaskIncrementTick+0x46>
 80066ac:	4b43      	ldr	r3, [pc, #268]	; (80067bc <xTaskIncrementTick+0x158>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	4b43      	ldr	r3, [pc, #268]	; (80067c0 <xTaskIncrementTick+0x15c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a41      	ldr	r2, [pc, #260]	; (80067bc <xTaskIncrementTick+0x158>)
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	4a41      	ldr	r2, [pc, #260]	; (80067c0 <xTaskIncrementTick+0x15c>)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	4b40      	ldr	r3, [pc, #256]	; (80067c4 <xTaskIncrementTick+0x160>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3301      	adds	r3, #1
 80066c6:	4a3f      	ldr	r2, [pc, #252]	; (80067c4 <xTaskIncrementTick+0x160>)
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	f000 fad1 	bl	8006c70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066ce:	4b3e      	ldr	r3, [pc, #248]	; (80067c8 <xTaskIncrementTick+0x164>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d34d      	bcc.n	8006774 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066d8:	4b38      	ldr	r3, [pc, #224]	; (80067bc <xTaskIncrementTick+0x158>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <xTaskIncrementTick+0x82>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e000      	b.n	80066e8 <xTaskIncrementTick+0x84>
 80066e6:	2300      	movs	r3, #0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d004      	beq.n	80066f6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ec:	4b36      	ldr	r3, [pc, #216]	; (80067c8 <xTaskIncrementTick+0x164>)
 80066ee:	f04f 32ff 	mov.w	r2, #4294967295
 80066f2:	601a      	str	r2, [r3, #0]
					break;
 80066f4:	e03e      	b.n	8006774 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80066f6:	4b31      	ldr	r3, [pc, #196]	; (80067bc <xTaskIncrementTick+0x158>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	429a      	cmp	r2, r3
 800670c:	d203      	bcs.n	8006716 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800670e:	4a2e      	ldr	r2, [pc, #184]	; (80067c8 <xTaskIncrementTick+0x164>)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6013      	str	r3, [r2, #0]
						break;
 8006714:	e02e      	b.n	8006774 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	3304      	adds	r3, #4
 800671a:	4618      	mov	r0, r3
 800671c:	f7fe ffb7 	bl	800568e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006724:	2b00      	cmp	r3, #0
 8006726:	d004      	beq.n	8006732 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	3318      	adds	r3, #24
 800672c:	4618      	mov	r0, r3
 800672e:	f7fe ffae 	bl	800568e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006736:	2201      	movs	r2, #1
 8006738:	409a      	lsls	r2, r3
 800673a:	4b24      	ldr	r3, [pc, #144]	; (80067cc <xTaskIncrementTick+0x168>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4313      	orrs	r3, r2
 8006740:	4a22      	ldr	r2, [pc, #136]	; (80067cc <xTaskIncrementTick+0x168>)
 8006742:	6013      	str	r3, [r2, #0]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006748:	4613      	mov	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4a1f      	ldr	r2, [pc, #124]	; (80067d0 <xTaskIncrementTick+0x16c>)
 8006752:	441a      	add	r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	3304      	adds	r3, #4
 8006758:	4619      	mov	r1, r3
 800675a:	4610      	mov	r0, r2
 800675c:	f7fe ff3a 	bl	80055d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006764:	4b1b      	ldr	r3, [pc, #108]	; (80067d4 <xTaskIncrementTick+0x170>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	429a      	cmp	r2, r3
 800676c:	d3b4      	bcc.n	80066d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800676e:	2301      	movs	r3, #1
 8006770:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006772:	e7b1      	b.n	80066d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006774:	4b17      	ldr	r3, [pc, #92]	; (80067d4 <xTaskIncrementTick+0x170>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677a:	4915      	ldr	r1, [pc, #84]	; (80067d0 <xTaskIncrementTick+0x16c>)
 800677c:	4613      	mov	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	440b      	add	r3, r1
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d907      	bls.n	800679c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800678c:	2301      	movs	r3, #1
 800678e:	617b      	str	r3, [r7, #20]
 8006790:	e004      	b.n	800679c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006792:	4b11      	ldr	r3, [pc, #68]	; (80067d8 <xTaskIncrementTick+0x174>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3301      	adds	r3, #1
 8006798:	4a0f      	ldr	r2, [pc, #60]	; (80067d8 <xTaskIncrementTick+0x174>)
 800679a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800679c:	4b0f      	ldr	r3, [pc, #60]	; (80067dc <xTaskIncrementTick+0x178>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80067a8:	697b      	ldr	r3, [r7, #20]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	2000058c 	.word	0x2000058c
 80067b8:	20000568 	.word	0x20000568
 80067bc:	2000051c 	.word	0x2000051c
 80067c0:	20000520 	.word	0x20000520
 80067c4:	2000057c 	.word	0x2000057c
 80067c8:	20000584 	.word	0x20000584
 80067cc:	2000056c 	.word	0x2000056c
 80067d0:	20000468 	.word	0x20000468
 80067d4:	20000464 	.word	0x20000464
 80067d8:	20000574 	.word	0x20000574
 80067dc:	20000578 	.word	0x20000578

080067e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067e6:	4b27      	ldr	r3, [pc, #156]	; (8006884 <vTaskSwitchContext+0xa4>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067ee:	4b26      	ldr	r3, [pc, #152]	; (8006888 <vTaskSwitchContext+0xa8>)
 80067f0:	2201      	movs	r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067f4:	e03f      	b.n	8006876 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80067f6:	4b24      	ldr	r3, [pc, #144]	; (8006888 <vTaskSwitchContext+0xa8>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80067fc:	4b23      	ldr	r3, [pc, #140]	; (800688c <vTaskSwitchContext+0xac>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	fab3 f383 	clz	r3, r3
 8006808:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800680a:	7afb      	ldrb	r3, [r7, #11]
 800680c:	f1c3 031f 	rsb	r3, r3, #31
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	491f      	ldr	r1, [pc, #124]	; (8006890 <vTaskSwitchContext+0xb0>)
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10a      	bne.n	800683c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	607b      	str	r3, [r7, #4]
}
 8006838:	bf00      	nop
 800683a:	e7fe      	b.n	800683a <vTaskSwitchContext+0x5a>
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4613      	mov	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4a12      	ldr	r2, [pc, #72]	; (8006890 <vTaskSwitchContext+0xb0>)
 8006848:	4413      	add	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	605a      	str	r2, [r3, #4]
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	3308      	adds	r3, #8
 800685e:	429a      	cmp	r2, r3
 8006860:	d104      	bne.n	800686c <vTaskSwitchContext+0x8c>
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	605a      	str	r2, [r3, #4]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	4a08      	ldr	r2, [pc, #32]	; (8006894 <vTaskSwitchContext+0xb4>)
 8006874:	6013      	str	r3, [r2, #0]
}
 8006876:	bf00      	nop
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	2000058c 	.word	0x2000058c
 8006888:	20000578 	.word	0x20000578
 800688c:	2000056c 	.word	0x2000056c
 8006890:	20000468 	.word	0x20000468
 8006894:	20000464 	.word	0x20000464

08006898 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	60fb      	str	r3, [r7, #12]
}
 80068ba:	bf00      	nop
 80068bc:	e7fe      	b.n	80068bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068be:	4b07      	ldr	r3, [pc, #28]	; (80068dc <vTaskPlaceOnEventList+0x44>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3318      	adds	r3, #24
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7fe fea8 	bl	800561c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068cc:	2101      	movs	r1, #1
 80068ce:	6838      	ldr	r0, [r7, #0]
 80068d0:	f000 fa98 	bl	8006e04 <prvAddCurrentTaskToDelayedList>
}
 80068d4:	bf00      	nop
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000464 	.word	0x20000464

080068e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10a      	bne.n	8006908 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	617b      	str	r3, [r7, #20]
}
 8006904:	bf00      	nop
 8006906:	e7fe      	b.n	8006906 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006908:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <vTaskPlaceOnEventListRestricted+0x54>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3318      	adds	r3, #24
 800690e:	4619      	mov	r1, r3
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f7fe fe5f 	bl	80055d4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800691c:	f04f 33ff 	mov.w	r3, #4294967295
 8006920:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006922:	6879      	ldr	r1, [r7, #4]
 8006924:	68b8      	ldr	r0, [r7, #8]
 8006926:	f000 fa6d 	bl	8006e04 <prvAddCurrentTaskToDelayedList>
	}
 800692a:	bf00      	nop
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20000464 	.word	0x20000464

08006938 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10a      	bne.n	8006964 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	60fb      	str	r3, [r7, #12]
}
 8006960:	bf00      	nop
 8006962:	e7fe      	b.n	8006962 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	3318      	adds	r3, #24
 8006968:	4618      	mov	r0, r3
 800696a:	f7fe fe90 	bl	800568e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800696e:	4b1d      	ldr	r3, [pc, #116]	; (80069e4 <xTaskRemoveFromEventList+0xac>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d11c      	bne.n	80069b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	3304      	adds	r3, #4
 800697a:	4618      	mov	r0, r3
 800697c:	f7fe fe87 	bl	800568e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	2201      	movs	r2, #1
 8006986:	409a      	lsls	r2, r3
 8006988:	4b17      	ldr	r3, [pc, #92]	; (80069e8 <xTaskRemoveFromEventList+0xb0>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4313      	orrs	r3, r2
 800698e:	4a16      	ldr	r2, [pc, #88]	; (80069e8 <xTaskRemoveFromEventList+0xb0>)
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4a13      	ldr	r2, [pc, #76]	; (80069ec <xTaskRemoveFromEventList+0xb4>)
 80069a0:	441a      	add	r2, r3
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	3304      	adds	r3, #4
 80069a6:	4619      	mov	r1, r3
 80069a8:	4610      	mov	r0, r2
 80069aa:	f7fe fe13 	bl	80055d4 <vListInsertEnd>
 80069ae:	e005      	b.n	80069bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	3318      	adds	r3, #24
 80069b4:	4619      	mov	r1, r3
 80069b6:	480e      	ldr	r0, [pc, #56]	; (80069f0 <xTaskRemoveFromEventList+0xb8>)
 80069b8:	f7fe fe0c 	bl	80055d4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c0:	4b0c      	ldr	r3, [pc, #48]	; (80069f4 <xTaskRemoveFromEventList+0xbc>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d905      	bls.n	80069d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069ca:	2301      	movs	r3, #1
 80069cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069ce:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <xTaskRemoveFromEventList+0xc0>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	e001      	b.n	80069da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80069d6:	2300      	movs	r3, #0
 80069d8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80069da:	697b      	ldr	r3, [r7, #20]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	2000058c 	.word	0x2000058c
 80069e8:	2000056c 	.word	0x2000056c
 80069ec:	20000468 	.word	0x20000468
 80069f0:	20000524 	.word	0x20000524
 80069f4:	20000464 	.word	0x20000464
 80069f8:	20000578 	.word	0x20000578

080069fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a04:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <vTaskInternalSetTimeOutState+0x24>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a0c:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <vTaskInternalSetTimeOutState+0x28>)
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	605a      	str	r2, [r3, #4]
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	2000057c 	.word	0x2000057c
 8006a24:	20000568 	.word	0x20000568

08006a28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10a      	bne.n	8006a4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	613b      	str	r3, [r7, #16]
}
 8006a4a:	bf00      	nop
 8006a4c:	e7fe      	b.n	8006a4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	60fb      	str	r3, [r7, #12]
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006a6a:	f000 fe53 	bl	8007714 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a6e:	4b1d      	ldr	r3, [pc, #116]	; (8006ae4 <xTaskCheckForTimeOut+0xbc>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a86:	d102      	bne.n	8006a8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	61fb      	str	r3, [r7, #28]
 8006a8c:	e023      	b.n	8006ad6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4b15      	ldr	r3, [pc, #84]	; (8006ae8 <xTaskCheckForTimeOut+0xc0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d007      	beq.n	8006aaa <xTaskCheckForTimeOut+0x82>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d302      	bcc.n	8006aaa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	61fb      	str	r3, [r7, #28]
 8006aa8:	e015      	b.n	8006ad6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d20b      	bcs.n	8006acc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	1ad2      	subs	r2, r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff ff9b 	bl	80069fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	e004      	b.n	8006ad6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ad6:	f000 fe4d 	bl	8007774 <vPortExitCritical>

	return xReturn;
 8006ada:	69fb      	ldr	r3, [r7, #28]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3720      	adds	r7, #32
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	20000568 	.word	0x20000568
 8006ae8:	2000057c 	.word	0x2000057c

08006aec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006af0:	4b03      	ldr	r3, [pc, #12]	; (8006b00 <vTaskMissedYield+0x14>)
 8006af2:	2201      	movs	r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
}
 8006af6:	bf00      	nop
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	20000578 	.word	0x20000578

08006b04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b0c:	f000 f852 	bl	8006bb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b10:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <prvIdleTask+0x28>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d9f9      	bls.n	8006b0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b18:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <prvIdleTask+0x2c>)
 8006b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b28:	e7f0      	b.n	8006b0c <prvIdleTask+0x8>
 8006b2a:	bf00      	nop
 8006b2c:	20000468 	.word	0x20000468
 8006b30:	e000ed04 	.word	0xe000ed04

08006b34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	607b      	str	r3, [r7, #4]
 8006b3e:	e00c      	b.n	8006b5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4a12      	ldr	r2, [pc, #72]	; (8006b94 <prvInitialiseTaskLists+0x60>)
 8006b4c:	4413      	add	r3, r2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe fd13 	bl	800557a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3301      	adds	r3, #1
 8006b58:	607b      	str	r3, [r7, #4]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b06      	cmp	r3, #6
 8006b5e:	d9ef      	bls.n	8006b40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b60:	480d      	ldr	r0, [pc, #52]	; (8006b98 <prvInitialiseTaskLists+0x64>)
 8006b62:	f7fe fd0a 	bl	800557a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b66:	480d      	ldr	r0, [pc, #52]	; (8006b9c <prvInitialiseTaskLists+0x68>)
 8006b68:	f7fe fd07 	bl	800557a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b6c:	480c      	ldr	r0, [pc, #48]	; (8006ba0 <prvInitialiseTaskLists+0x6c>)
 8006b6e:	f7fe fd04 	bl	800557a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b72:	480c      	ldr	r0, [pc, #48]	; (8006ba4 <prvInitialiseTaskLists+0x70>)
 8006b74:	f7fe fd01 	bl	800557a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b78:	480b      	ldr	r0, [pc, #44]	; (8006ba8 <prvInitialiseTaskLists+0x74>)
 8006b7a:	f7fe fcfe 	bl	800557a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	; (8006bac <prvInitialiseTaskLists+0x78>)
 8006b80:	4a05      	ldr	r2, [pc, #20]	; (8006b98 <prvInitialiseTaskLists+0x64>)
 8006b82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b84:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <prvInitialiseTaskLists+0x7c>)
 8006b86:	4a05      	ldr	r2, [pc, #20]	; (8006b9c <prvInitialiseTaskLists+0x68>)
 8006b88:	601a      	str	r2, [r3, #0]
}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000468 	.word	0x20000468
 8006b98:	200004f4 	.word	0x200004f4
 8006b9c:	20000508 	.word	0x20000508
 8006ba0:	20000524 	.word	0x20000524
 8006ba4:	20000538 	.word	0x20000538
 8006ba8:	20000550 	.word	0x20000550
 8006bac:	2000051c 	.word	0x2000051c
 8006bb0:	20000520 	.word	0x20000520

08006bb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bba:	e019      	b.n	8006bf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bbc:	f000 fdaa 	bl	8007714 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006bc0:	4b10      	ldr	r3, [pc, #64]	; (8006c04 <prvCheckTasksWaitingTermination+0x50>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fe fd5e 	bl	800568e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	; (8006c08 <prvCheckTasksWaitingTermination+0x54>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	4a0b      	ldr	r2, [pc, #44]	; (8006c08 <prvCheckTasksWaitingTermination+0x54>)
 8006bda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006bdc:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <prvCheckTasksWaitingTermination+0x58>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	4a0a      	ldr	r2, [pc, #40]	; (8006c0c <prvCheckTasksWaitingTermination+0x58>)
 8006be4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006be6:	f000 fdc5 	bl	8007774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f810 	bl	8006c10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bf0:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <prvCheckTasksWaitingTermination+0x58>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e1      	bne.n	8006bbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000538 	.word	0x20000538
 8006c08:	20000564 	.word	0x20000564
 8006c0c:	2000054c 	.word	0x2000054c

08006c10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d108      	bne.n	8006c34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 ff5a 	bl	8007ae0 <vPortFree>
				vPortFree( pxTCB );
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 ff57 	bl	8007ae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c32:	e018      	b.n	8006c66 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d103      	bne.n	8006c46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 ff4e 	bl	8007ae0 <vPortFree>
	}
 8006c44:	e00f      	b.n	8006c66 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d00a      	beq.n	8006c66 <prvDeleteTCB+0x56>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	60fb      	str	r3, [r7, #12]
}
 8006c62:	bf00      	nop
 8006c64:	e7fe      	b.n	8006c64 <prvDeleteTCB+0x54>
	}
 8006c66:	bf00      	nop
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c76:	4b0f      	ldr	r3, [pc, #60]	; (8006cb4 <prvResetNextTaskUnblockTime+0x44>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <prvResetNextTaskUnblockTime+0x14>
 8006c80:	2301      	movs	r3, #1
 8006c82:	e000      	b.n	8006c86 <prvResetNextTaskUnblockTime+0x16>
 8006c84:	2300      	movs	r3, #0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d004      	beq.n	8006c94 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c8a:	4b0b      	ldr	r3, [pc, #44]	; (8006cb8 <prvResetNextTaskUnblockTime+0x48>)
 8006c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c90:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c92:	e008      	b.n	8006ca6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c94:	4b07      	ldr	r3, [pc, #28]	; (8006cb4 <prvResetNextTaskUnblockTime+0x44>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	4a05      	ldr	r2, [pc, #20]	; (8006cb8 <prvResetNextTaskUnblockTime+0x48>)
 8006ca4:	6013      	str	r3, [r2, #0]
}
 8006ca6:	bf00      	nop
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	2000051c 	.word	0x2000051c
 8006cb8:	20000584 	.word	0x20000584

08006cbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cc2:	4b0b      	ldr	r3, [pc, #44]	; (8006cf0 <xTaskGetSchedulerState+0x34>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d102      	bne.n	8006cd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	607b      	str	r3, [r7, #4]
 8006cce:	e008      	b.n	8006ce2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cd0:	4b08      	ldr	r3, [pc, #32]	; (8006cf4 <xTaskGetSchedulerState+0x38>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d102      	bne.n	8006cde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006cd8:	2302      	movs	r3, #2
 8006cda:	607b      	str	r3, [r7, #4]
 8006cdc:	e001      	b.n	8006ce2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ce2:	687b      	ldr	r3, [r7, #4]
	}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	20000570 	.word	0x20000570
 8006cf4:	2000058c 	.word	0x2000058c

08006cf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d06e      	beq.n	8006dec <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d0e:	4b3a      	ldr	r3, [pc, #232]	; (8006df8 <xTaskPriorityDisinherit+0x100>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d00a      	beq.n	8006d2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	60fb      	str	r3, [r7, #12]
}
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	60bb      	str	r3, [r7, #8]
}
 8006d48:	bf00      	nop
 8006d4a:	e7fe      	b.n	8006d4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d50:	1e5a      	subs	r2, r3, #1
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d044      	beq.n	8006dec <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d140      	bne.n	8006dec <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe fc8d 	bl	800568e <uxListRemove>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d115      	bne.n	8006da6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7e:	491f      	ldr	r1, [pc, #124]	; (8006dfc <xTaskPriorityDisinherit+0x104>)
 8006d80:	4613      	mov	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	440b      	add	r3, r1
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <xTaskPriorityDisinherit+0xae>
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	2201      	movs	r2, #1
 8006d96:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9a:	43da      	mvns	r2, r3
 8006d9c:	4b18      	ldr	r3, [pc, #96]	; (8006e00 <xTaskPriorityDisinherit+0x108>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4013      	ands	r3, r2
 8006da2:	4a17      	ldr	r2, [pc, #92]	; (8006e00 <xTaskPriorityDisinherit+0x108>)
 8006da4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	f1c3 0207 	rsb	r2, r3, #7
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	409a      	lsls	r2, r3
 8006dc2:	4b0f      	ldr	r3, [pc, #60]	; (8006e00 <xTaskPriorityDisinherit+0x108>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	4a0d      	ldr	r2, [pc, #52]	; (8006e00 <xTaskPriorityDisinherit+0x108>)
 8006dca:	6013      	str	r3, [r2, #0]
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4a08      	ldr	r2, [pc, #32]	; (8006dfc <xTaskPriorityDisinherit+0x104>)
 8006dda:	441a      	add	r2, r3
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	3304      	adds	r3, #4
 8006de0:	4619      	mov	r1, r3
 8006de2:	4610      	mov	r0, r2
 8006de4:	f7fe fbf6 	bl	80055d4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006de8:	2301      	movs	r3, #1
 8006dea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006dec:	697b      	ldr	r3, [r7, #20]
	}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20000464 	.word	0x20000464
 8006dfc:	20000468 	.word	0x20000468
 8006e00:	2000056c 	.word	0x2000056c

08006e04 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e0e:	4b29      	ldr	r3, [pc, #164]	; (8006eb4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e14:	4b28      	ldr	r3, [pc, #160]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fe fc37 	bl	800568e <uxListRemove>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10b      	bne.n	8006e3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006e26:	4b24      	ldr	r3, [pc, #144]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e32:	43da      	mvns	r2, r3
 8006e34:	4b21      	ldr	r3, [pc, #132]	; (8006ebc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4013      	ands	r3, r2
 8006e3a:	4a20      	ldr	r2, [pc, #128]	; (8006ebc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d10a      	bne.n	8006e5c <prvAddCurrentTaskToDelayedList+0x58>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d007      	beq.n	8006e5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e4c:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3304      	adds	r3, #4
 8006e52:	4619      	mov	r1, r3
 8006e54:	481a      	ldr	r0, [pc, #104]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e56:	f7fe fbbd 	bl	80055d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e5a:	e026      	b.n	8006eaa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4413      	add	r3, r2
 8006e62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e64:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d209      	bcs.n	8006e88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e74:	4b13      	ldr	r3, [pc, #76]	; (8006ec4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	4b0f      	ldr	r3, [pc, #60]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	4619      	mov	r1, r3
 8006e80:	4610      	mov	r0, r2
 8006e82:	f7fe fbcb 	bl	800561c <vListInsert>
}
 8006e86:	e010      	b.n	8006eaa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e88:	4b0f      	ldr	r3, [pc, #60]	; (8006ec8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3304      	adds	r3, #4
 8006e92:	4619      	mov	r1, r3
 8006e94:	4610      	mov	r0, r2
 8006e96:	f7fe fbc1 	bl	800561c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d202      	bcs.n	8006eaa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006ea4:	4a09      	ldr	r2, [pc, #36]	; (8006ecc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	6013      	str	r3, [r2, #0]
}
 8006eaa:	bf00      	nop
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20000568 	.word	0x20000568
 8006eb8:	20000464 	.word	0x20000464
 8006ebc:	2000056c 	.word	0x2000056c
 8006ec0:	20000550 	.word	0x20000550
 8006ec4:	20000520 	.word	0x20000520
 8006ec8:	2000051c 	.word	0x2000051c
 8006ecc:	20000584 	.word	0x20000584

08006ed0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b08a      	sub	sp, #40	; 0x28
 8006ed4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006eda:	f000 fab1 	bl	8007440 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006ede:	4b1c      	ldr	r3, [pc, #112]	; (8006f50 <xTimerCreateTimerTask+0x80>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d021      	beq.n	8006f2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006eee:	1d3a      	adds	r2, r7, #4
 8006ef0:	f107 0108 	add.w	r1, r7, #8
 8006ef4:	f107 030c 	add.w	r3, r7, #12
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7f9 f9e9 	bl	80002d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	9202      	str	r2, [sp, #8]
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	2302      	movs	r3, #2
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	460a      	mov	r2, r1
 8006f10:	4910      	ldr	r1, [pc, #64]	; (8006f54 <xTimerCreateTimerTask+0x84>)
 8006f12:	4811      	ldr	r0, [pc, #68]	; (8006f58 <xTimerCreateTimerTask+0x88>)
 8006f14:	f7ff f8c8 	bl	80060a8 <xTaskCreateStatic>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	4a10      	ldr	r2, [pc, #64]	; (8006f5c <xTimerCreateTimerTask+0x8c>)
 8006f1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f1e:	4b0f      	ldr	r3, [pc, #60]	; (8006f5c <xTimerCreateTimerTask+0x8c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f26:	2301      	movs	r3, #1
 8006f28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10a      	bne.n	8006f46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	613b      	str	r3, [r7, #16]
}
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f46:	697b      	ldr	r3, [r7, #20]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	200005c0 	.word	0x200005c0
 8006f54:	08007e30 	.word	0x08007e30
 8006f58:	0800707d 	.word	0x0800707d
 8006f5c:	200005c4 	.word	0x200005c4

08006f60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08a      	sub	sp, #40	; 0x28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10a      	bne.n	8006f8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	623b      	str	r3, [r7, #32]
}
 8006f8a:	bf00      	nop
 8006f8c:	e7fe      	b.n	8006f8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006f8e:	4b1a      	ldr	r3, [pc, #104]	; (8006ff8 <xTimerGenericCommand+0x98>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d02a      	beq.n	8006fec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2b05      	cmp	r3, #5
 8006fa6:	dc18      	bgt.n	8006fda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006fa8:	f7ff fe88 	bl	8006cbc <xTaskGetSchedulerState>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d109      	bne.n	8006fc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006fb2:	4b11      	ldr	r3, [pc, #68]	; (8006ff8 <xTimerGenericCommand+0x98>)
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	f107 0114 	add.w	r1, r7, #20
 8006fba:	2300      	movs	r3, #0
 8006fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fbe:	f7fe fc8f 	bl	80058e0 <xQueueGenericSend>
 8006fc2:	6278      	str	r0, [r7, #36]	; 0x24
 8006fc4:	e012      	b.n	8006fec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006fc6:	4b0c      	ldr	r3, [pc, #48]	; (8006ff8 <xTimerGenericCommand+0x98>)
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	f107 0114 	add.w	r1, r7, #20
 8006fce:	2300      	movs	r3, #0
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f7fe fc85 	bl	80058e0 <xQueueGenericSend>
 8006fd6:	6278      	str	r0, [r7, #36]	; 0x24
 8006fd8:	e008      	b.n	8006fec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006fda:	4b07      	ldr	r3, [pc, #28]	; (8006ff8 <xTimerGenericCommand+0x98>)
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	f107 0114 	add.w	r1, r7, #20
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	f7fe fd79 	bl	8005adc <xQueueGenericSendFromISR>
 8006fea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3728      	adds	r7, #40	; 0x28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	200005c0 	.word	0x200005c0

08006ffc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b088      	sub	sp, #32
 8007000:	af02      	add	r7, sp, #8
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007006:	4b1c      	ldr	r3, [pc, #112]	; (8007078 <prvProcessExpiredTimer+0x7c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	3304      	adds	r3, #4
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe fb3a 	bl	800568e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d122      	bne.n	8007068 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	699a      	ldr	r2, [r3, #24]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	18d1      	adds	r1, r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	6978      	ldr	r0, [r7, #20]
 8007030:	f000 f8c8 	bl	80071c4 <prvInsertTimerInActiveList>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d016      	beq.n	8007068 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800703a:	2300      	movs	r3, #0
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	2300      	movs	r3, #0
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	2100      	movs	r1, #0
 8007044:	6978      	ldr	r0, [r7, #20]
 8007046:	f7ff ff8b 	bl	8006f60 <xTimerGenericCommand>
 800704a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10a      	bne.n	8007068 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	60fb      	str	r3, [r7, #12]
}
 8007064:	bf00      	nop
 8007066:	e7fe      	b.n	8007066 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	6978      	ldr	r0, [r7, #20]
 800706e:	4798      	blx	r3
}
 8007070:	bf00      	nop
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	200005b8 	.word	0x200005b8

0800707c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007084:	f107 0308 	add.w	r3, r7, #8
 8007088:	4618      	mov	r0, r3
 800708a:	f000 f857 	bl	800713c <prvGetNextExpireTime>
 800708e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4619      	mov	r1, r3
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f803 	bl	80070a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800709a:	f000 f8d5 	bl	8007248 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800709e:	e7f1      	b.n	8007084 <prvTimerTask+0x8>

080070a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80070aa:	f7ff fa21 	bl	80064f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070ae:	f107 0308 	add.w	r3, r7, #8
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 f866 	bl	8007184 <prvSampleTimeNow>
 80070b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d130      	bne.n	8007122 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10a      	bne.n	80070dc <prvProcessTimerOrBlockTask+0x3c>
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d806      	bhi.n	80070dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80070ce:	f7ff fa1d 	bl	800650c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80070d2:	68f9      	ldr	r1, [r7, #12]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff ff91 	bl	8006ffc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80070da:	e024      	b.n	8007126 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d008      	beq.n	80070f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80070e2:	4b13      	ldr	r3, [pc, #76]	; (8007130 <prvProcessTimerOrBlockTask+0x90>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	bf0c      	ite	eq
 80070ec:	2301      	moveq	r3, #1
 80070ee:	2300      	movne	r3, #0
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80070f4:	4b0f      	ldr	r3, [pc, #60]	; (8007134 <prvProcessTimerOrBlockTask+0x94>)
 80070f6:	6818      	ldr	r0, [r3, #0]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	4619      	mov	r1, r3
 8007102:	f7fe ff9d 	bl	8006040 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007106:	f7ff fa01 	bl	800650c <xTaskResumeAll>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007110:	4b09      	ldr	r3, [pc, #36]	; (8007138 <prvProcessTimerOrBlockTask+0x98>)
 8007112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	f3bf 8f6f 	isb	sy
}
 8007120:	e001      	b.n	8007126 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007122:	f7ff f9f3 	bl	800650c <xTaskResumeAll>
}
 8007126:	bf00      	nop
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	200005bc 	.word	0x200005bc
 8007134:	200005c0 	.word	0x200005c0
 8007138:	e000ed04 	.word	0xe000ed04

0800713c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007144:	4b0e      	ldr	r3, [pc, #56]	; (8007180 <prvGetNextExpireTime+0x44>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	bf0c      	ite	eq
 800714e:	2301      	moveq	r3, #1
 8007150:	2300      	movne	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d105      	bne.n	800716e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007162:	4b07      	ldr	r3, [pc, #28]	; (8007180 <prvGetNextExpireTime+0x44>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60fb      	str	r3, [r7, #12]
 800716c:	e001      	b.n	8007172 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007172:	68fb      	ldr	r3, [r7, #12]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	200005b8 	.word	0x200005b8

08007184 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800718c:	f7ff fa5a 	bl	8006644 <xTaskGetTickCount>
 8007190:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007192:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <prvSampleTimeNow+0x3c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	429a      	cmp	r2, r3
 800719a:	d205      	bcs.n	80071a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800719c:	f000 f8ee 	bl	800737c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	e002      	b.n	80071ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80071ae:	4a04      	ldr	r2, [pc, #16]	; (80071c0 <prvSampleTimeNow+0x3c>)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80071b4:	68fb      	ldr	r3, [r7, #12]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	200005c8 	.word	0x200005c8

080071c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d812      	bhi.n	8007210 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	1ad2      	subs	r2, r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d302      	bcc.n	80071fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80071f8:	2301      	movs	r3, #1
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	e01b      	b.n	8007236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80071fe:	4b10      	ldr	r3, [pc, #64]	; (8007240 <prvInsertTimerInActiveList+0x7c>)
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3304      	adds	r3, #4
 8007206:	4619      	mov	r1, r3
 8007208:	4610      	mov	r0, r2
 800720a:	f7fe fa07 	bl	800561c <vListInsert>
 800720e:	e012      	b.n	8007236 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d206      	bcs.n	8007226 <prvInsertTimerInActiveList+0x62>
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	429a      	cmp	r2, r3
 800721e:	d302      	bcc.n	8007226 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007220:	2301      	movs	r3, #1
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	e007      	b.n	8007236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007226:	4b07      	ldr	r3, [pc, #28]	; (8007244 <prvInsertTimerInActiveList+0x80>)
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3304      	adds	r3, #4
 800722e:	4619      	mov	r1, r3
 8007230:	4610      	mov	r0, r2
 8007232:	f7fe f9f3 	bl	800561c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007236:	697b      	ldr	r3, [r7, #20]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	200005bc 	.word	0x200005bc
 8007244:	200005b8 	.word	0x200005b8

08007248 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08c      	sub	sp, #48	; 0x30
 800724c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800724e:	e081      	b.n	8007354 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	db7d      	blt.n	8007352 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d004      	beq.n	800726c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	3304      	adds	r3, #4
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe fa11 	bl	800568e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800726c:	1d3b      	adds	r3, r7, #4
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff ff88 	bl	8007184 <prvSampleTimeNow>
 8007274:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b09      	cmp	r3, #9
 800727a:	d86b      	bhi.n	8007354 <prvProcessReceivedCommands+0x10c>
 800727c:	a201      	add	r2, pc, #4	; (adr r2, 8007284 <prvProcessReceivedCommands+0x3c>)
 800727e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007282:	bf00      	nop
 8007284:	080072ad 	.word	0x080072ad
 8007288:	080072ad 	.word	0x080072ad
 800728c:	080072ad 	.word	0x080072ad
 8007290:	08007355 	.word	0x08007355
 8007294:	08007309 	.word	0x08007309
 8007298:	08007341 	.word	0x08007341
 800729c:	080072ad 	.word	0x080072ad
 80072a0:	080072ad 	.word	0x080072ad
 80072a4:	08007355 	.word	0x08007355
 80072a8:	08007309 	.word	0x08007309
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	18d1      	adds	r1, r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a3a      	ldr	r2, [r7, #32]
 80072b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072ba:	f7ff ff83 	bl	80071c4 <prvInsertTimerInActiveList>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d047      	beq.n	8007354 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072ca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d13f      	bne.n	8007354 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	441a      	add	r2, r3
 80072dc:	2300      	movs	r3, #0
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	2300      	movs	r3, #0
 80072e2:	2100      	movs	r1, #0
 80072e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072e6:	f7ff fe3b 	bl	8006f60 <xTimerGenericCommand>
 80072ea:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d130      	bne.n	8007354 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	61bb      	str	r3, [r7, #24]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10a      	bne.n	800732c <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	617b      	str	r3, [r7, #20]
}
 8007328:	bf00      	nop
 800732a:	e7fe      	b.n	800732a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	699a      	ldr	r2, [r3, #24]
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	18d1      	adds	r1, r2, r3
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	6a3a      	ldr	r2, [r7, #32]
 8007338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800733a:	f7ff ff43 	bl	80071c4 <prvInsertTimerInActiveList>
					break;
 800733e:	e009      	b.n	8007354 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800734a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800734c:	f000 fbc8 	bl	8007ae0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007350:	e000      	b.n	8007354 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007352:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007354:	4b08      	ldr	r3, [pc, #32]	; (8007378 <prvProcessReceivedCommands+0x130>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f107 0108 	add.w	r1, r7, #8
 800735c:	2200      	movs	r2, #0
 800735e:	4618      	mov	r0, r3
 8007360:	f7fe fc54 	bl	8005c0c <xQueueReceive>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	f47f af72 	bne.w	8007250 <prvProcessReceivedCommands+0x8>
	}
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	3728      	adds	r7, #40	; 0x28
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	200005c0 	.word	0x200005c0

0800737c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007382:	e045      	b.n	8007410 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007384:	4b2c      	ldr	r3, [pc, #176]	; (8007438 <prvSwitchTimerLists+0xbc>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800738e:	4b2a      	ldr	r3, [pc, #168]	; (8007438 <prvSwitchTimerLists+0xbc>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3304      	adds	r3, #4
 800739c:	4618      	mov	r0, r3
 800739e:	f7fe f976 	bl	800568e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d12e      	bne.n	8007410 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	4413      	add	r3, r2
 80073ba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d90e      	bls.n	80073e2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073d0:	4b19      	ldr	r3, [pc, #100]	; (8007438 <prvSwitchTimerLists+0xbc>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3304      	adds	r3, #4
 80073d8:	4619      	mov	r1, r3
 80073da:	4610      	mov	r0, r2
 80073dc:	f7fe f91e 	bl	800561c <vListInsert>
 80073e0:	e016      	b.n	8007410 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073e2:	2300      	movs	r3, #0
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	2300      	movs	r3, #0
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	2100      	movs	r1, #0
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f7ff fdb7 	bl	8006f60 <xTimerGenericCommand>
 80073f2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10a      	bne.n	8007410 <prvSwitchTimerLists+0x94>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	603b      	str	r3, [r7, #0]
}
 800740c:	bf00      	nop
 800740e:	e7fe      	b.n	800740e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007410:	4b09      	ldr	r3, [pc, #36]	; (8007438 <prvSwitchTimerLists+0xbc>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1b4      	bne.n	8007384 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800741a:	4b07      	ldr	r3, [pc, #28]	; (8007438 <prvSwitchTimerLists+0xbc>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007420:	4b06      	ldr	r3, [pc, #24]	; (800743c <prvSwitchTimerLists+0xc0>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a04      	ldr	r2, [pc, #16]	; (8007438 <prvSwitchTimerLists+0xbc>)
 8007426:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007428:	4a04      	ldr	r2, [pc, #16]	; (800743c <prvSwitchTimerLists+0xc0>)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	6013      	str	r3, [r2, #0]
}
 800742e:	bf00      	nop
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	200005b8 	.word	0x200005b8
 800743c:	200005bc 	.word	0x200005bc

08007440 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007446:	f000 f965 	bl	8007714 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800744a:	4b15      	ldr	r3, [pc, #84]	; (80074a0 <prvCheckForValidListAndQueue+0x60>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d120      	bne.n	8007494 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007452:	4814      	ldr	r0, [pc, #80]	; (80074a4 <prvCheckForValidListAndQueue+0x64>)
 8007454:	f7fe f891 	bl	800557a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007458:	4813      	ldr	r0, [pc, #76]	; (80074a8 <prvCheckForValidListAndQueue+0x68>)
 800745a:	f7fe f88e 	bl	800557a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800745e:	4b13      	ldr	r3, [pc, #76]	; (80074ac <prvCheckForValidListAndQueue+0x6c>)
 8007460:	4a10      	ldr	r2, [pc, #64]	; (80074a4 <prvCheckForValidListAndQueue+0x64>)
 8007462:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007464:	4b12      	ldr	r3, [pc, #72]	; (80074b0 <prvCheckForValidListAndQueue+0x70>)
 8007466:	4a10      	ldr	r2, [pc, #64]	; (80074a8 <prvCheckForValidListAndQueue+0x68>)
 8007468:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800746a:	2300      	movs	r3, #0
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	4b11      	ldr	r3, [pc, #68]	; (80074b4 <prvCheckForValidListAndQueue+0x74>)
 8007470:	4a11      	ldr	r2, [pc, #68]	; (80074b8 <prvCheckForValidListAndQueue+0x78>)
 8007472:	210c      	movs	r1, #12
 8007474:	200a      	movs	r0, #10
 8007476:	f7fe f99d 	bl	80057b4 <xQueueGenericCreateStatic>
 800747a:	4603      	mov	r3, r0
 800747c:	4a08      	ldr	r2, [pc, #32]	; (80074a0 <prvCheckForValidListAndQueue+0x60>)
 800747e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007480:	4b07      	ldr	r3, [pc, #28]	; (80074a0 <prvCheckForValidListAndQueue+0x60>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007488:	4b05      	ldr	r3, [pc, #20]	; (80074a0 <prvCheckForValidListAndQueue+0x60>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	490b      	ldr	r1, [pc, #44]	; (80074bc <prvCheckForValidListAndQueue+0x7c>)
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe fdac 	bl	8005fec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007494:	f000 f96e 	bl	8007774 <vPortExitCritical>
}
 8007498:	bf00      	nop
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	200005c0 	.word	0x200005c0
 80074a4:	20000590 	.word	0x20000590
 80074a8:	200005a4 	.word	0x200005a4
 80074ac:	200005b8 	.word	0x200005b8
 80074b0:	200005bc 	.word	0x200005bc
 80074b4:	20000644 	.word	0x20000644
 80074b8:	200005cc 	.word	0x200005cc
 80074bc:	08007e38 	.word	0x08007e38

080074c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3b04      	subs	r3, #4
 80074d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3b04      	subs	r3, #4
 80074de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f023 0201 	bic.w	r2, r3, #1
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3b04      	subs	r3, #4
 80074ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074f0:	4a0c      	ldr	r2, [pc, #48]	; (8007524 <pxPortInitialiseStack+0x64>)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3b14      	subs	r3, #20
 80074fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3b04      	subs	r3, #4
 8007506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f06f 0202 	mvn.w	r2, #2
 800750e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3b20      	subs	r3, #32
 8007514:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007516:	68fb      	ldr	r3, [r7, #12]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	08007529 	.word	0x08007529

08007528 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800752e:	2300      	movs	r3, #0
 8007530:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007532:	4b12      	ldr	r3, [pc, #72]	; (800757c <prvTaskExitError+0x54>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753a:	d00a      	beq.n	8007552 <prvTaskExitError+0x2a>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	60fb      	str	r3, [r7, #12]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <prvTaskExitError+0x28>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	60bb      	str	r3, [r7, #8]
}
 8007564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007566:	bf00      	nop
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0fc      	beq.n	8007568 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800756e:	bf00      	nop
 8007570:	bf00      	nop
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	2000000c 	.word	0x2000000c

08007580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007580:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <pxCurrentTCBConst2>)
 8007582:	6819      	ldr	r1, [r3, #0]
 8007584:	6808      	ldr	r0, [r1, #0]
 8007586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758a:	f380 8809 	msr	PSP, r0
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f04f 0000 	mov.w	r0, #0
 8007596:	f380 8811 	msr	BASEPRI, r0
 800759a:	4770      	bx	lr
 800759c:	f3af 8000 	nop.w

080075a0 <pxCurrentTCBConst2>:
 80075a0:	20000464 	.word	0x20000464
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop

080075a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075a8:	4808      	ldr	r0, [pc, #32]	; (80075cc <prvPortStartFirstTask+0x24>)
 80075aa:	6800      	ldr	r0, [r0, #0]
 80075ac:	6800      	ldr	r0, [r0, #0]
 80075ae:	f380 8808 	msr	MSP, r0
 80075b2:	f04f 0000 	mov.w	r0, #0
 80075b6:	f380 8814 	msr	CONTROL, r0
 80075ba:	b662      	cpsie	i
 80075bc:	b661      	cpsie	f
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	df00      	svc	0
 80075c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075ca:	bf00      	nop
 80075cc:	e000ed08 	.word	0xe000ed08

080075d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075d6:	4b46      	ldr	r3, [pc, #280]	; (80076f0 <xPortStartScheduler+0x120>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a46      	ldr	r2, [pc, #280]	; (80076f4 <xPortStartScheduler+0x124>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d10a      	bne.n	80075f6 <xPortStartScheduler+0x26>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	613b      	str	r3, [r7, #16]
}
 80075f2:	bf00      	nop
 80075f4:	e7fe      	b.n	80075f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075f6:	4b3e      	ldr	r3, [pc, #248]	; (80076f0 <xPortStartScheduler+0x120>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a3f      	ldr	r2, [pc, #252]	; (80076f8 <xPortStartScheduler+0x128>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d10a      	bne.n	8007616 <xPortStartScheduler+0x46>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	60fb      	str	r3, [r7, #12]
}
 8007612:	bf00      	nop
 8007614:	e7fe      	b.n	8007614 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007616:	4b39      	ldr	r3, [pc, #228]	; (80076fc <xPortStartScheduler+0x12c>)
 8007618:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	22ff      	movs	r2, #255	; 0xff
 8007626:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007638:	b2da      	uxtb	r2, r3
 800763a:	4b31      	ldr	r3, [pc, #196]	; (8007700 <xPortStartScheduler+0x130>)
 800763c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800763e:	4b31      	ldr	r3, [pc, #196]	; (8007704 <xPortStartScheduler+0x134>)
 8007640:	2207      	movs	r2, #7
 8007642:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007644:	e009      	b.n	800765a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007646:	4b2f      	ldr	r3, [pc, #188]	; (8007704 <xPortStartScheduler+0x134>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3b01      	subs	r3, #1
 800764c:	4a2d      	ldr	r2, [pc, #180]	; (8007704 <xPortStartScheduler+0x134>)
 800764e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	b2db      	uxtb	r3, r3
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	b2db      	uxtb	r3, r3
 8007658:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800765a:	78fb      	ldrb	r3, [r7, #3]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007662:	2b80      	cmp	r3, #128	; 0x80
 8007664:	d0ef      	beq.n	8007646 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007666:	4b27      	ldr	r3, [pc, #156]	; (8007704 <xPortStartScheduler+0x134>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f1c3 0307 	rsb	r3, r3, #7
 800766e:	2b04      	cmp	r3, #4
 8007670:	d00a      	beq.n	8007688 <xPortStartScheduler+0xb8>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	60bb      	str	r3, [r7, #8]
}
 8007684:	bf00      	nop
 8007686:	e7fe      	b.n	8007686 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007688:	4b1e      	ldr	r3, [pc, #120]	; (8007704 <xPortStartScheduler+0x134>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	021b      	lsls	r3, r3, #8
 800768e:	4a1d      	ldr	r2, [pc, #116]	; (8007704 <xPortStartScheduler+0x134>)
 8007690:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007692:	4b1c      	ldr	r3, [pc, #112]	; (8007704 <xPortStartScheduler+0x134>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800769a:	4a1a      	ldr	r2, [pc, #104]	; (8007704 <xPortStartScheduler+0x134>)
 800769c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076a6:	4b18      	ldr	r3, [pc, #96]	; (8007708 <xPortStartScheduler+0x138>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a17      	ldr	r2, [pc, #92]	; (8007708 <xPortStartScheduler+0x138>)
 80076ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076b2:	4b15      	ldr	r3, [pc, #84]	; (8007708 <xPortStartScheduler+0x138>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a14      	ldr	r2, [pc, #80]	; (8007708 <xPortStartScheduler+0x138>)
 80076b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076be:	f000 f8dd 	bl	800787c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076c2:	4b12      	ldr	r3, [pc, #72]	; (800770c <xPortStartScheduler+0x13c>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076c8:	f000 f8fc 	bl	80078c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076cc:	4b10      	ldr	r3, [pc, #64]	; (8007710 <xPortStartScheduler+0x140>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a0f      	ldr	r2, [pc, #60]	; (8007710 <xPortStartScheduler+0x140>)
 80076d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80076d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076d8:	f7ff ff66 	bl	80075a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076dc:	f7ff f880 	bl	80067e0 <vTaskSwitchContext>
	prvTaskExitError();
 80076e0:	f7ff ff22 	bl	8007528 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	e000ed00 	.word	0xe000ed00
 80076f4:	410fc271 	.word	0x410fc271
 80076f8:	410fc270 	.word	0x410fc270
 80076fc:	e000e400 	.word	0xe000e400
 8007700:	2000068c 	.word	0x2000068c
 8007704:	20000690 	.word	0x20000690
 8007708:	e000ed20 	.word	0xe000ed20
 800770c:	2000000c 	.word	0x2000000c
 8007710:	e000ef34 	.word	0xe000ef34

08007714 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	607b      	str	r3, [r7, #4]
}
 800772c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800772e:	4b0f      	ldr	r3, [pc, #60]	; (800776c <vPortEnterCritical+0x58>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3301      	adds	r3, #1
 8007734:	4a0d      	ldr	r2, [pc, #52]	; (800776c <vPortEnterCritical+0x58>)
 8007736:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007738:	4b0c      	ldr	r3, [pc, #48]	; (800776c <vPortEnterCritical+0x58>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d10f      	bne.n	8007760 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007740:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <vPortEnterCritical+0x5c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <vPortEnterCritical+0x4c>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	603b      	str	r3, [r7, #0]
}
 800775c:	bf00      	nop
 800775e:	e7fe      	b.n	800775e <vPortEnterCritical+0x4a>
	}
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	2000000c 	.word	0x2000000c
 8007770:	e000ed04 	.word	0xe000ed04

08007774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800777a:	4b12      	ldr	r3, [pc, #72]	; (80077c4 <vPortExitCritical+0x50>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10a      	bne.n	8007798 <vPortExitCritical+0x24>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	607b      	str	r3, [r7, #4]
}
 8007794:	bf00      	nop
 8007796:	e7fe      	b.n	8007796 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007798:	4b0a      	ldr	r3, [pc, #40]	; (80077c4 <vPortExitCritical+0x50>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3b01      	subs	r3, #1
 800779e:	4a09      	ldr	r2, [pc, #36]	; (80077c4 <vPortExitCritical+0x50>)
 80077a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077a2:	4b08      	ldr	r3, [pc, #32]	; (80077c4 <vPortExitCritical+0x50>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d105      	bne.n	80077b6 <vPortExitCritical+0x42>
 80077aa:	2300      	movs	r3, #0
 80077ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	f383 8811 	msr	BASEPRI, r3
}
 80077b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80077b6:	bf00      	nop
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	2000000c 	.word	0x2000000c
	...

080077d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077d0:	f3ef 8009 	mrs	r0, PSP
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	4b15      	ldr	r3, [pc, #84]	; (8007830 <pxCurrentTCBConst>)
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	f01e 0f10 	tst.w	lr, #16
 80077e0:	bf08      	it	eq
 80077e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ea:	6010      	str	r0, [r2, #0]
 80077ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077f4:	f380 8811 	msr	BASEPRI, r0
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f7fe ffee 	bl	80067e0 <vTaskSwitchContext>
 8007804:	f04f 0000 	mov.w	r0, #0
 8007808:	f380 8811 	msr	BASEPRI, r0
 800780c:	bc09      	pop	{r0, r3}
 800780e:	6819      	ldr	r1, [r3, #0]
 8007810:	6808      	ldr	r0, [r1, #0]
 8007812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007816:	f01e 0f10 	tst.w	lr, #16
 800781a:	bf08      	it	eq
 800781c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007820:	f380 8809 	msr	PSP, r0
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	f3af 8000 	nop.w

08007830 <pxCurrentTCBConst>:
 8007830:	20000464 	.word	0x20000464
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007834:	bf00      	nop
 8007836:	bf00      	nop

08007838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	607b      	str	r3, [r7, #4]
}
 8007850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007852:	f7fe ff07 	bl	8006664 <xTaskIncrementTick>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800785c:	4b06      	ldr	r3, [pc, #24]	; (8007878 <SysTick_Handler+0x40>)
 800785e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	2300      	movs	r3, #0
 8007866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	f383 8811 	msr	BASEPRI, r3
}
 800786e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007870:	bf00      	nop
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	e000ed04 	.word	0xe000ed04

0800787c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800787c:	b480      	push	{r7}
 800787e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007880:	4b0b      	ldr	r3, [pc, #44]	; (80078b0 <vPortSetupTimerInterrupt+0x34>)
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007886:	4b0b      	ldr	r3, [pc, #44]	; (80078b4 <vPortSetupTimerInterrupt+0x38>)
 8007888:	2200      	movs	r2, #0
 800788a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800788c:	4b0a      	ldr	r3, [pc, #40]	; (80078b8 <vPortSetupTimerInterrupt+0x3c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a0a      	ldr	r2, [pc, #40]	; (80078bc <vPortSetupTimerInterrupt+0x40>)
 8007892:	fba2 2303 	umull	r2, r3, r2, r3
 8007896:	099b      	lsrs	r3, r3, #6
 8007898:	4a09      	ldr	r2, [pc, #36]	; (80078c0 <vPortSetupTimerInterrupt+0x44>)
 800789a:	3b01      	subs	r3, #1
 800789c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800789e:	4b04      	ldr	r3, [pc, #16]	; (80078b0 <vPortSetupTimerInterrupt+0x34>)
 80078a0:	2207      	movs	r2, #7
 80078a2:	601a      	str	r2, [r3, #0]
}
 80078a4:	bf00      	nop
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	e000e010 	.word	0xe000e010
 80078b4:	e000e018 	.word	0xe000e018
 80078b8:	20000000 	.word	0x20000000
 80078bc:	10624dd3 	.word	0x10624dd3
 80078c0:	e000e014 	.word	0xe000e014

080078c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80078d4 <vPortEnableVFP+0x10>
 80078c8:	6801      	ldr	r1, [r0, #0]
 80078ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80078ce:	6001      	str	r1, [r0, #0]
 80078d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078d2:	bf00      	nop
 80078d4:	e000ed88 	.word	0xe000ed88

080078d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80078de:	f3ef 8305 	mrs	r3, IPSR
 80078e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b0f      	cmp	r3, #15
 80078e8:	d914      	bls.n	8007914 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078ea:	4a17      	ldr	r2, [pc, #92]	; (8007948 <vPortValidateInterruptPriority+0x70>)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4413      	add	r3, r2
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078f4:	4b15      	ldr	r3, [pc, #84]	; (800794c <vPortValidateInterruptPriority+0x74>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	7afa      	ldrb	r2, [r7, #11]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d20a      	bcs.n	8007914 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	607b      	str	r3, [r7, #4]
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007914:	4b0e      	ldr	r3, [pc, #56]	; (8007950 <vPortValidateInterruptPriority+0x78>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800791c:	4b0d      	ldr	r3, [pc, #52]	; (8007954 <vPortValidateInterruptPriority+0x7c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d90a      	bls.n	800793a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	603b      	str	r3, [r7, #0]
}
 8007936:	bf00      	nop
 8007938:	e7fe      	b.n	8007938 <vPortValidateInterruptPriority+0x60>
	}
 800793a:	bf00      	nop
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	e000e3f0 	.word	0xe000e3f0
 800794c:	2000068c 	.word	0x2000068c
 8007950:	e000ed0c 	.word	0xe000ed0c
 8007954:	20000690 	.word	0x20000690

08007958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08a      	sub	sp, #40	; 0x28
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007960:	2300      	movs	r3, #0
 8007962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007964:	f7fe fdc4 	bl	80064f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007968:	4b58      	ldr	r3, [pc, #352]	; (8007acc <pvPortMalloc+0x174>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d101      	bne.n	8007974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007970:	f000 f910 	bl	8007b94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007974:	4b56      	ldr	r3, [pc, #344]	; (8007ad0 <pvPortMalloc+0x178>)
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4013      	ands	r3, r2
 800797c:	2b00      	cmp	r3, #0
 800797e:	f040 808e 	bne.w	8007a9e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01d      	beq.n	80079c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007988:	2208      	movs	r2, #8
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4413      	add	r3, r2
 800798e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	2b00      	cmp	r3, #0
 8007998:	d014      	beq.n	80079c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f023 0307 	bic.w	r3, r3, #7
 80079a0:	3308      	adds	r3, #8
 80079a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00a      	beq.n	80079c4 <pvPortMalloc+0x6c>
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	617b      	str	r3, [r7, #20]
}
 80079c0:	bf00      	nop
 80079c2:	e7fe      	b.n	80079c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d069      	beq.n	8007a9e <pvPortMalloc+0x146>
 80079ca:	4b42      	ldr	r3, [pc, #264]	; (8007ad4 <pvPortMalloc+0x17c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d864      	bhi.n	8007a9e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80079d4:	4b40      	ldr	r3, [pc, #256]	; (8007ad8 <pvPortMalloc+0x180>)
 80079d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80079d8:	4b3f      	ldr	r3, [pc, #252]	; (8007ad8 <pvPortMalloc+0x180>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079de:	e004      	b.n	80079ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d903      	bls.n	80079fc <pvPortMalloc+0xa4>
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1f1      	bne.n	80079e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079fc:	4b33      	ldr	r3, [pc, #204]	; (8007acc <pvPortMalloc+0x174>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d04b      	beq.n	8007a9e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2208      	movs	r2, #8
 8007a0c:	4413      	add	r3, r2
 8007a0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	1ad2      	subs	r2, r2, r3
 8007a20:	2308      	movs	r3, #8
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d91f      	bls.n	8007a68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	f003 0307 	and.w	r3, r3, #7
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <pvPortMalloc+0xf8>
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	613b      	str	r3, [r7, #16]
}
 8007a4c:	bf00      	nop
 8007a4e:	e7fe      	b.n	8007a4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	1ad2      	subs	r2, r2, r3
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a62:	69b8      	ldr	r0, [r7, #24]
 8007a64:	f000 f8f8 	bl	8007c58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a68:	4b1a      	ldr	r3, [pc, #104]	; (8007ad4 <pvPortMalloc+0x17c>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	4a18      	ldr	r2, [pc, #96]	; (8007ad4 <pvPortMalloc+0x17c>)
 8007a74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a76:	4b17      	ldr	r3, [pc, #92]	; (8007ad4 <pvPortMalloc+0x17c>)
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	4b18      	ldr	r3, [pc, #96]	; (8007adc <pvPortMalloc+0x184>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d203      	bcs.n	8007a8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a82:	4b14      	ldr	r3, [pc, #80]	; (8007ad4 <pvPortMalloc+0x17c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a15      	ldr	r2, [pc, #84]	; (8007adc <pvPortMalloc+0x184>)
 8007a88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	4b10      	ldr	r3, [pc, #64]	; (8007ad0 <pvPortMalloc+0x178>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	431a      	orrs	r2, r3
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a9e:	f7fe fd35 	bl	800650c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	f003 0307 	and.w	r3, r3, #7
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <pvPortMalloc+0x16a>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	60fb      	str	r3, [r7, #12]
}
 8007abe:	bf00      	nop
 8007ac0:	e7fe      	b.n	8007ac0 <pvPortMalloc+0x168>
	return pvReturn;
 8007ac2:	69fb      	ldr	r3, [r7, #28]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3728      	adds	r7, #40	; 0x28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	20001e0c 	.word	0x20001e0c
 8007ad0:	20001e18 	.word	0x20001e18
 8007ad4:	20001e10 	.word	0x20001e10
 8007ad8:	20001e04 	.word	0x20001e04
 8007adc:	20001e14 	.word	0x20001e14

08007ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d048      	beq.n	8007b84 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007af2:	2308      	movs	r3, #8
 8007af4:	425b      	negs	r3, r3
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	4413      	add	r3, r2
 8007afa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	4b21      	ldr	r3, [pc, #132]	; (8007b8c <vPortFree+0xac>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4013      	ands	r3, r2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10a      	bne.n	8007b24 <vPortFree+0x44>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	60fb      	str	r3, [r7, #12]
}
 8007b20:	bf00      	nop
 8007b22:	e7fe      	b.n	8007b22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <vPortFree+0x62>
	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	60bb      	str	r3, [r7, #8]
}
 8007b3e:	bf00      	nop
 8007b40:	e7fe      	b.n	8007b40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	4b11      	ldr	r3, [pc, #68]	; (8007b8c <vPortFree+0xac>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d019      	beq.n	8007b84 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d115      	bne.n	8007b84 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	4b0b      	ldr	r3, [pc, #44]	; (8007b8c <vPortFree+0xac>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	43db      	mvns	r3, r3
 8007b62:	401a      	ands	r2, r3
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b68:	f7fe fcc2 	bl	80064f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <vPortFree+0xb0>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4413      	add	r3, r2
 8007b76:	4a06      	ldr	r2, [pc, #24]	; (8007b90 <vPortFree+0xb0>)
 8007b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b7a:	6938      	ldr	r0, [r7, #16]
 8007b7c:	f000 f86c 	bl	8007c58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007b80:	f7fe fcc4 	bl	800650c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b84:	bf00      	nop
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	20001e18 	.word	0x20001e18
 8007b90:	20001e10 	.word	0x20001e10

08007b94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b9a:	f241 7370 	movw	r3, #6000	; 0x1770
 8007b9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ba0:	4b27      	ldr	r3, [pc, #156]	; (8007c40 <prvHeapInit+0xac>)
 8007ba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00c      	beq.n	8007bc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	3307      	adds	r3, #7
 8007bb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0307 	bic.w	r3, r3, #7
 8007bba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	4a1f      	ldr	r2, [pc, #124]	; (8007c40 <prvHeapInit+0xac>)
 8007bc4:	4413      	add	r3, r2
 8007bc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007bcc:	4a1d      	ldr	r2, [pc, #116]	; (8007c44 <prvHeapInit+0xb0>)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007bd2:	4b1c      	ldr	r3, [pc, #112]	; (8007c44 <prvHeapInit+0xb0>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	4413      	add	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007be0:	2208      	movs	r2, #8
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1a9b      	subs	r3, r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 0307 	bic.w	r3, r3, #7
 8007bee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4a15      	ldr	r2, [pc, #84]	; (8007c48 <prvHeapInit+0xb4>)
 8007bf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007bf6:	4b14      	ldr	r3, [pc, #80]	; (8007c48 <prvHeapInit+0xb4>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bfe:	4b12      	ldr	r3, [pc, #72]	; (8007c48 <prvHeapInit+0xb4>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	1ad2      	subs	r2, r2, r3
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c14:	4b0c      	ldr	r3, [pc, #48]	; (8007c48 <prvHeapInit+0xb4>)
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	4a0a      	ldr	r2, [pc, #40]	; (8007c4c <prvHeapInit+0xb8>)
 8007c22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	4a09      	ldr	r2, [pc, #36]	; (8007c50 <prvHeapInit+0xbc>)
 8007c2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c2c:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <prvHeapInit+0xc0>)
 8007c2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c32:	601a      	str	r2, [r3, #0]
}
 8007c34:	bf00      	nop
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	20000694 	.word	0x20000694
 8007c44:	20001e04 	.word	0x20001e04
 8007c48:	20001e0c 	.word	0x20001e0c
 8007c4c:	20001e14 	.word	0x20001e14
 8007c50:	20001e10 	.word	0x20001e10
 8007c54:	20001e18 	.word	0x20001e18

08007c58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c60:	4b28      	ldr	r3, [pc, #160]	; (8007d04 <prvInsertBlockIntoFreeList+0xac>)
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	e002      	b.n	8007c6c <prvInsertBlockIntoFreeList+0x14>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d8f7      	bhi.n	8007c66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	4413      	add	r3, r2
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d108      	bne.n	8007c9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	441a      	add	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	441a      	add	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d118      	bne.n	8007ce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	4b15      	ldr	r3, [pc, #84]	; (8007d08 <prvInsertBlockIntoFreeList+0xb0>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d00d      	beq.n	8007cd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	441a      	add	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	e008      	b.n	8007ce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007cd6:	4b0c      	ldr	r3, [pc, #48]	; (8007d08 <prvInsertBlockIntoFreeList+0xb0>)
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	e003      	b.n	8007ce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d002      	beq.n	8007cf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cf6:	bf00      	nop
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	20001e04 	.word	0x20001e04
 8007d08:	20001e0c 	.word	0x20001e0c

08007d0c <__libc_init_array>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	4d0d      	ldr	r5, [pc, #52]	; (8007d44 <__libc_init_array+0x38>)
 8007d10:	4c0d      	ldr	r4, [pc, #52]	; (8007d48 <__libc_init_array+0x3c>)
 8007d12:	1b64      	subs	r4, r4, r5
 8007d14:	10a4      	asrs	r4, r4, #2
 8007d16:	2600      	movs	r6, #0
 8007d18:	42a6      	cmp	r6, r4
 8007d1a:	d109      	bne.n	8007d30 <__libc_init_array+0x24>
 8007d1c:	4d0b      	ldr	r5, [pc, #44]	; (8007d4c <__libc_init_array+0x40>)
 8007d1e:	4c0c      	ldr	r4, [pc, #48]	; (8007d50 <__libc_init_array+0x44>)
 8007d20:	f000 f82e 	bl	8007d80 <_init>
 8007d24:	1b64      	subs	r4, r4, r5
 8007d26:	10a4      	asrs	r4, r4, #2
 8007d28:	2600      	movs	r6, #0
 8007d2a:	42a6      	cmp	r6, r4
 8007d2c:	d105      	bne.n	8007d3a <__libc_init_array+0x2e>
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}
 8007d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d34:	4798      	blx	r3
 8007d36:	3601      	adds	r6, #1
 8007d38:	e7ee      	b.n	8007d18 <__libc_init_array+0xc>
 8007d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d3e:	4798      	blx	r3
 8007d40:	3601      	adds	r6, #1
 8007d42:	e7f2      	b.n	8007d2a <__libc_init_array+0x1e>
 8007d44:	08007e78 	.word	0x08007e78
 8007d48:	08007e78 	.word	0x08007e78
 8007d4c:	08007e78 	.word	0x08007e78
 8007d50:	08007e7c 	.word	0x08007e7c

08007d54 <memcpy>:
 8007d54:	440a      	add	r2, r1
 8007d56:	4291      	cmp	r1, r2
 8007d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d5c:	d100      	bne.n	8007d60 <memcpy+0xc>
 8007d5e:	4770      	bx	lr
 8007d60:	b510      	push	{r4, lr}
 8007d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d6a:	4291      	cmp	r1, r2
 8007d6c:	d1f9      	bne.n	8007d62 <memcpy+0xe>
 8007d6e:	bd10      	pop	{r4, pc}

08007d70 <memset>:
 8007d70:	4402      	add	r2, r0
 8007d72:	4603      	mov	r3, r0
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d100      	bne.n	8007d7a <memset+0xa>
 8007d78:	4770      	bx	lr
 8007d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d7e:	e7f9      	b.n	8007d74 <memset+0x4>

08007d80 <_init>:
 8007d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d82:	bf00      	nop
 8007d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d86:	bc08      	pop	{r3}
 8007d88:	469e      	mov	lr, r3
 8007d8a:	4770      	bx	lr

08007d8c <_fini>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	bf00      	nop
 8007d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d92:	bc08      	pop	{r3}
 8007d94:	469e      	mov	lr, r3
 8007d96:	4770      	bx	lr
