
Robotic_arm_4DOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006118  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080062a8  080062a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006348  08006348  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006348  08006348  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006348  08006348  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006348  08006348  00016348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800634c  0800634c  0001634c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d60  20000010  08006360  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d70  08006360  00021d70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ea5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db2  00000000  00000000  00031ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00034c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00035cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3a8  00000000  00000000  00036bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013476  00000000  00000000  00052f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9780  00000000  00000000  000663ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010fb6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c4  00000000  00000000  0010fbc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006290 	.word	0x08006290

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006290 	.word	0x08006290

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2240      	movs	r2, #64	; 0x40
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000080 	.word	0x20000080

08000204 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	4a07      	ldr	r2, [pc, #28]	; (8000230 <vApplicationGetTimerTaskMemory+0x2c>)
 8000214:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <vApplicationGetTimerTaskMemory+0x30>)
 800021a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2240      	movs	r2, #64	; 0x40
 8000220:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000222:	bf00      	nop
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000180 	.word	0x20000180
 8000234:	200001d4 	.word	0x200001d4

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b5b0      	push	{r4, r5, r7, lr}
 800023a:	b08e      	sub	sp, #56	; 0x38
 800023c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023e:	f000 fb1b 	bl	8000878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000242:	f000 f853 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000246:	f000 f979 	bl	800053c <MX_GPIO_Init>
  MX_TIM1_Init();
 800024a:	f000 f8a5 	bl	8000398 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800024e:	2100      	movs	r1, #0
 8000250:	4820      	ldr	r0, [pc, #128]	; (80002d4 <main+0x9c>)
 8000252:	f002 fabf 	bl	80027d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000256:	2104      	movs	r1, #4
 8000258:	481e      	ldr	r0, [pc, #120]	; (80002d4 <main+0x9c>)
 800025a:	f002 fabb 	bl	80027d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800025e:	2108      	movs	r1, #8
 8000260:	481c      	ldr	r0, [pc, #112]	; (80002d4 <main+0x9c>)
 8000262:	f002 fab7 	bl	80027d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000266:	210c      	movs	r1, #12
 8000268:	481a      	ldr	r0, [pc, #104]	; (80002d4 <main+0x9c>)
 800026a:	f002 fab3 	bl	80027d4 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 750;
 800026e:	4b1a      	ldr	r3, [pc, #104]	; (80002d8 <main+0xa0>)
 8000270:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000274:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 300;
 8000276:	4b18      	ldr	r3, [pc, #96]	; (80002d8 <main+0xa0>)
 8000278:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800027c:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 1350;
 800027e:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <main+0xa0>)
 8000280:	f240 5246 	movw	r2, #1350	; 0x546
 8000284:	63da      	str	r2, [r3, #60]	; 0x3c
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ServoMotors */
  osThreadDef(ServoMotors, servo_motors, osPriorityNormal, 0, 128);
 8000286:	4b15      	ldr	r3, [pc, #84]	; (80002dc <main+0xa4>)
 8000288:	f107 041c 	add.w	r4, r7, #28
 800028c:	461d      	mov	r5, r3
 800028e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000292:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000296:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ServoMotorsHandle = osThreadCreate(osThread(ServoMotors), NULL);
 800029a:	f107 031c 	add.w	r3, r7, #28
 800029e:	2100      	movs	r1, #0
 80002a0:	4618      	mov	r0, r3
 80002a2:	f003 fb92 	bl	80039ca <osThreadCreate>
 80002a6:	4603      	mov	r3, r0
 80002a8:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <main+0xa8>)
 80002aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of EEPROMsave */
  osThreadDef(EEPROMsave, eeprom_save, osPriorityAboveNormal, 0, 128);
 80002ac:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <main+0xac>)
 80002ae:	463c      	mov	r4, r7
 80002b0:	461d      	mov	r5, r3
 80002b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EEPROMsaveHandle = osThreadCreate(osThread(EEPROMsave), NULL);
 80002be:	463b      	mov	r3, r7
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f003 fb81 	bl	80039ca <osThreadCreate>
 80002c8:	4603      	mov	r3, r0
 80002ca:	4a07      	ldr	r2, [pc, #28]	; (80002e8 <main+0xb0>)
 80002cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002ce:	f003 fb75 	bl	80039bc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d2:	e7fe      	b.n	80002d2 <main+0x9a>
 80002d4:	200002d4 	.word	0x200002d4
 80002d8:	40012c00 	.word	0x40012c00
 80002dc:	080062c0 	.word	0x080062c0
 80002e0:	20000320 	.word	0x20000320
 80002e4:	080062dc 	.word	0x080062dc
 80002e8:	20000324 	.word	0x20000324

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b09c      	sub	sp, #112	; 0x70
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002f6:	2228      	movs	r2, #40	; 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f005 ffc0 	bl	8006280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000310:	463b      	mov	r3, r7
 8000312:	2234      	movs	r2, #52	; 0x34
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f005 ffb2 	bl	8006280 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800031c:	2302      	movs	r3, #2
 800031e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000320:	2301      	movs	r3, #1
 8000322:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000324:	2310      	movs	r3, #16
 8000326:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000328:	2302      	movs	r3, #2
 800032a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800032c:	2300      	movs	r3, #0
 800032e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000330:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000334:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fd26 	bl	8000d8c <HAL_RCC_OscConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000346:	f000 f93c 	bl	80005c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034a:	230f      	movs	r3, #15
 800034c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034e:	2302      	movs	r3, #2
 8000350:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800035e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000362:	2100      	movs	r1, #0
 8000364:	4618      	mov	r0, r3
 8000366:	f001 fd4f 	bl	8001e08 <HAL_RCC_ClockConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000370:	f000 f927 	bl	80005c2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000378:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800037a:	2300      	movs	r3, #0
 800037c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037e:	463b      	mov	r3, r7
 8000380:	4618      	mov	r0, r3
 8000382:	f001 ff87 	bl	8002294 <HAL_RCCEx_PeriphCLKConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800038c:	f000 f919 	bl	80005c2 <Error_Handler>
  }
}
 8000390:	bf00      	nop
 8000392:	3770      	adds	r7, #112	; 0x70
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b09a      	sub	sp, #104	; 0x68
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
 80003c8:	615a      	str	r2, [r3, #20]
 80003ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	222c      	movs	r2, #44	; 0x2c
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f005 ff54 	bl	8006280 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003d8:	4b56      	ldr	r3, [pc, #344]	; (8000534 <MX_TIM1_Init+0x19c>)
 80003da:	4a57      	ldr	r2, [pc, #348]	; (8000538 <MX_TIM1_Init+0x1a0>)
 80003dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 80003de:	4b55      	ldr	r3, [pc, #340]	; (8000534 <MX_TIM1_Init+0x19c>)
 80003e0:	221f      	movs	r2, #31
 80003e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e4:	4b53      	ldr	r3, [pc, #332]	; (8000534 <MX_TIM1_Init+0x19c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80003ea:	4b52      	ldr	r3, [pc, #328]	; (8000534 <MX_TIM1_Init+0x19c>)
 80003ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80003f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f2:	4b50      	ldr	r3, [pc, #320]	; (8000534 <MX_TIM1_Init+0x19c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003f8:	4b4e      	ldr	r3, [pc, #312]	; (8000534 <MX_TIM1_Init+0x19c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fe:	4b4d      	ldr	r3, [pc, #308]	; (8000534 <MX_TIM1_Init+0x19c>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000404:	484b      	ldr	r0, [pc, #300]	; (8000534 <MX_TIM1_Init+0x19c>)
 8000406:	f002 f8d7 	bl	80025b8 <HAL_TIM_Base_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000410:	f000 f8d7 	bl	80005c2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000418:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800041a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800041e:	4619      	mov	r1, r3
 8000420:	4844      	ldr	r0, [pc, #272]	; (8000534 <MX_TIM1_Init+0x19c>)
 8000422:	f002 fcf1 	bl	8002e08 <HAL_TIM_ConfigClockSource>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800042c:	f000 f8c9 	bl	80005c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000430:	4840      	ldr	r0, [pc, #256]	; (8000534 <MX_TIM1_Init+0x19c>)
 8000432:	f002 f96d 	bl	8002710 <HAL_TIM_PWM_Init>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800043c:	f000 f8c1 	bl	80005c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000440:	2300      	movs	r3, #0
 8000442:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000444:	2300      	movs	r3, #0
 8000446:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000448:	2300      	movs	r3, #0
 800044a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800044c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000450:	4619      	mov	r1, r3
 8000452:	4838      	ldr	r0, [pc, #224]	; (8000534 <MX_TIM1_Init+0x19c>)
 8000454:	f003 f99e 	bl	8003794 <HAL_TIMEx_MasterConfigSynchronization>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800045e:	f000 f8b0 	bl	80005c2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000462:	2360      	movs	r3, #96	; 0x60
 8000464:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 750;
 8000466:	f240 23ee 	movw	r3, #750	; 0x2ee
 800046a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800046c:	2300      	movs	r3, #0
 800046e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000470:	2300      	movs	r3, #0
 8000472:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000474:	2300      	movs	r3, #0
 8000476:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000478:	2300      	movs	r3, #0
 800047a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800047c:	2300      	movs	r3, #0
 800047e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000480:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000484:	2200      	movs	r2, #0
 8000486:	4619      	mov	r1, r3
 8000488:	482a      	ldr	r0, [pc, #168]	; (8000534 <MX_TIM1_Init+0x19c>)
 800048a:	f002 fba9 	bl	8002be0 <HAL_TIM_PWM_ConfigChannel>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000494:	f000 f895 	bl	80005c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000498:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800049c:	2204      	movs	r2, #4
 800049e:	4619      	mov	r1, r3
 80004a0:	4824      	ldr	r0, [pc, #144]	; (8000534 <MX_TIM1_Init+0x19c>)
 80004a2:	f002 fb9d 	bl	8002be0 <HAL_TIM_PWM_ConfigChannel>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80004ac:	f000 f889 	bl	80005c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004b4:	2208      	movs	r2, #8
 80004b6:	4619      	mov	r1, r3
 80004b8:	481e      	ldr	r0, [pc, #120]	; (8000534 <MX_TIM1_Init+0x19c>)
 80004ba:	f002 fb91 	bl	8002be0 <HAL_TIM_PWM_ConfigChannel>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80004c4:	f000 f87d 	bl	80005c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004cc:	220c      	movs	r2, #12
 80004ce:	4619      	mov	r1, r3
 80004d0:	4818      	ldr	r0, [pc, #96]	; (8000534 <MX_TIM1_Init+0x19c>)
 80004d2:	f002 fb85 	bl	8002be0 <HAL_TIM_PWM_ConfigChannel>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80004dc:	f000 f871 	bl	80005c2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004fe:	2300      	movs	r3, #0
 8000500:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000506:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800050c:	2300      	movs	r3, #0
 800050e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	4619      	mov	r1, r3
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <MX_TIM1_Init+0x19c>)
 8000516:	f003 f9a3 	bl	8003860 <HAL_TIMEx_ConfigBreakDeadTime>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8000520:	f000 f84f 	bl	80005c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000524:	4803      	ldr	r0, [pc, #12]	; (8000534 <MX_TIM1_Init+0x19c>)
 8000526:	f000 f899 	bl	800065c <HAL_TIM_MspPostInit>

}
 800052a:	bf00      	nop
 800052c:	3768      	adds	r7, #104	; 0x68
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200002d4 	.word	0x200002d4
 8000538:	40012c00 	.word	0x40012c00

0800053c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <MX_GPIO_Init+0x44>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <MX_GPIO_Init+0x44>)
 8000548:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <MX_GPIO_Init+0x44>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_GPIO_Init+0x44>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <MX_GPIO_Init+0x44>)
 8000560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000564:	6153      	str	r3, [r2, #20]
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_GPIO_Init+0x44>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <servo_motors>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_servo_motors */
void servo_motors(void const * argument)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800058c:	2001      	movs	r0, #1
 800058e:	f003 fa68 	bl	8003a62 <osDelay>
 8000592:	e7fb      	b.n	800058c <servo_motors+0x8>

08000594 <eeprom_save>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_eeprom_save */
void eeprom_save(void const * argument)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN eeprom_save */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f003 fa60 	bl	8003a62 <osDelay>
 80005a2:	e7fb      	b.n	800059c <eeprom_save+0x8>

080005a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005b4:	d101      	bne.n	80005ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005b6:	f000 f975 	bl	80008a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c6:	b672      	cpsid	i
}
 80005c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ca:	e7fe      	b.n	80005ca <Error_Handler+0x8>

080005cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <HAL_MspInit+0x4c>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a10      	ldr	r2, [pc, #64]	; (8000618 <HAL_MspInit+0x4c>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <HAL_MspInit+0x4c>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_MspInit+0x4c>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <HAL_MspInit+0x4c>)
 80005f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <HAL_MspInit+0x4c>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	210f      	movs	r1, #15
 8000606:	f06f 0001 	mvn.w	r0, #1
 800060a:	f000 fa23 	bl	8000a54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000

0800061c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <HAL_TIM_Base_MspInit+0x38>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d10b      	bne.n	8000646 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_TIM_Base_MspInit+0x3c>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4a09      	ldr	r2, [pc, #36]	; (8000658 <HAL_TIM_Base_MspInit+0x3c>)
 8000634:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000638:	6193      	str	r3, [r2, #24]
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <HAL_TIM_Base_MspInit+0x3c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40012c00 	.word	0x40012c00
 8000658:	40021000 	.word	0x40021000

0800065c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a11      	ldr	r2, [pc, #68]	; (80006c0 <HAL_TIM_MspPostInit+0x64>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d11b      	bne.n	80006b6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <HAL_TIM_MspPostInit+0x68>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a10      	ldr	r2, [pc, #64]	; (80006c4 <HAL_TIM_MspPostInit+0x68>)
 8000684:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000688:	6153      	str	r3, [r2, #20]
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <HAL_TIM_MspPostInit+0x68>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000696:	230f      	movs	r3, #15
 8000698:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	2302      	movs	r3, #2
 800069c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <HAL_TIM_MspPostInit+0x6c>)
 80006b2:	f000 f9f9 	bl	8000aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80006b6:	bf00      	nop
 80006b8:	3720      	adds	r7, #32
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40012c00 	.word	0x40012c00
 80006c4:	40021000 	.word	0x40021000
 80006c8:	48000800 	.word	0x48000800

080006cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08e      	sub	sp, #56	; 0x38
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80006d8:	2300      	movs	r3, #0
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80006dc:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <HAL_InitTick+0xe4>)
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	4a33      	ldr	r2, [pc, #204]	; (80007b0 <HAL_InitTick+0xe4>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	61d3      	str	r3, [r2, #28]
 80006e8:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <HAL_InitTick+0xe4>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006f4:	f107 0210 	add.w	r2, r7, #16
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4611      	mov	r1, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fd96 	bl	8002230 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000704:	6a3b      	ldr	r3, [r7, #32]
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800070a:	2b00      	cmp	r3, #0
 800070c:	d103      	bne.n	8000716 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800070e:	f001 fd6d 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 8000712:	6378      	str	r0, [r7, #52]	; 0x34
 8000714:	e004      	b.n	8000720 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000716:	f001 fd69 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 800071a:	4603      	mov	r3, r0
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000722:	4a24      	ldr	r2, [pc, #144]	; (80007b4 <HAL_InitTick+0xe8>)
 8000724:	fba2 2303 	umull	r2, r3, r2, r3
 8000728:	0c9b      	lsrs	r3, r3, #18
 800072a:	3b01      	subs	r3, #1
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <HAL_InitTick+0xec>)
 8000730:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000734:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <HAL_InitTick+0xec>)
 8000738:	f240 32e7 	movw	r2, #999	; 0x3e7
 800073c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800073e:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <HAL_InitTick+0xec>)
 8000740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000742:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <HAL_InitTick+0xec>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <HAL_InitTick+0xec>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <HAL_InitTick+0xec>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000756:	4818      	ldr	r0, [pc, #96]	; (80007b8 <HAL_InitTick+0xec>)
 8000758:	f001 ff2e 	bl	80025b8 <HAL_TIM_Base_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000762:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000766:	2b00      	cmp	r3, #0
 8000768:	d11b      	bne.n	80007a2 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800076a:	4813      	ldr	r0, [pc, #76]	; (80007b8 <HAL_InitTick+0xec>)
 800076c:	f001 ff7c 	bl	8002668 <HAL_TIM_Base_Start_IT>
 8000770:	4603      	mov	r3, r0
 8000772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000776:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800077a:	2b00      	cmp	r3, #0
 800077c:	d111      	bne.n	80007a2 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800077e:	201c      	movs	r0, #28
 8000780:	f000 f984 	bl	8000a8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b0f      	cmp	r3, #15
 8000788:	d808      	bhi.n	800079c <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800078a:	2200      	movs	r2, #0
 800078c:	6879      	ldr	r1, [r7, #4]
 800078e:	201c      	movs	r0, #28
 8000790:	f000 f960 	bl	8000a54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000794:	4a09      	ldr	r2, [pc, #36]	; (80007bc <HAL_InitTick+0xf0>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	e002      	b.n	80007a2 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 800079c:	2301      	movs	r3, #1
 800079e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3738      	adds	r7, #56	; 0x38
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000
 80007b4:	431bde83 	.word	0x431bde83
 80007b8:	20000328 	.word	0x20000328
 80007bc:	20000004 	.word	0x20000004

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <NMI_Handler+0x4>

080007c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <MemManage_Handler+0x4>

080007d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <UsageFault_Handler+0x4>

080007de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <TIM2_IRQHandler+0x10>)
 80007f2:	f002 f8d5 	bl	80029a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000328 	.word	0x20000328

08000800 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <SystemInit+0x20>)
 8000806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800080a:	4a05      	ldr	r2, [pc, #20]	; (8000820 <SystemInit+0x20>)
 800080c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800085c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000828:	f7ff ffea 	bl	8000800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <LoopForever+0x6>)
  ldr r1, =_edata
 800082e:	490d      	ldr	r1, [pc, #52]	; (8000864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000830:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <LoopForever+0xe>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000844:	4c0a      	ldr	r4, [pc, #40]	; (8000870 <LoopForever+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000852:	f005 fce3 	bl	800621c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000856:	f7ff fcef 	bl	8000238 <main>

0800085a <LoopForever>:

LoopForever:
    b LoopForever
 800085a:	e7fe      	b.n	800085a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800085c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000868:	08006350 	.word	0x08006350
  ldr r2, =_sbss
 800086c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000870:	20001d70 	.word	0x20001d70

08000874 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC1_IRQHandler>
	...

08000878 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_Init+0x28>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <HAL_Init+0x28>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f8d8 	bl	8000a3e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	200f      	movs	r0, #15
 8000890:	f7ff ff1c 	bl	80006cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f7ff fe9a 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40022000 	.word	0x40022000

080008a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_IncTick+0x20>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_IncTick+0x24>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <HAL_IncTick+0x24>)
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20000374 	.word	0x20000374

080008cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <HAL_GetTick+0x14>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000374 	.word	0x20000374

080008e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <__NVIC_SetPriorityGrouping+0x44>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000900:	4013      	ands	r3, r2
 8000902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800090c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000916:	4a04      	ldr	r2, [pc, #16]	; (8000928 <__NVIC_SetPriorityGrouping+0x44>)
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	60d3      	str	r3, [r2, #12]
}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <__NVIC_GetPriorityGrouping+0x18>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	f003 0307 	and.w	r3, r3, #7
}
 800093a:	4618      	mov	r0, r3
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	2b00      	cmp	r3, #0
 8000958:	db0b      	blt.n	8000972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	f003 021f 	and.w	r2, r3, #31
 8000960:	4907      	ldr	r1, [pc, #28]	; (8000980 <__NVIC_EnableIRQ+0x38>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	095b      	lsrs	r3, r3, #5
 8000968:	2001      	movs	r0, #1
 800096a:	fa00 f202 	lsl.w	r2, r0, r2
 800096e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000e100 	.word	0xe000e100

08000984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	db0a      	blt.n	80009ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	490c      	ldr	r1, [pc, #48]	; (80009d0 <__NVIC_SetPriority+0x4c>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	0112      	lsls	r2, r2, #4
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	440b      	add	r3, r1
 80009a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ac:	e00a      	b.n	80009c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4908      	ldr	r1, [pc, #32]	; (80009d4 <__NVIC_SetPriority+0x50>)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	3b04      	subs	r3, #4
 80009bc:	0112      	lsls	r2, r2, #4
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	440b      	add	r3, r1
 80009c2:	761a      	strb	r2, [r3, #24]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000e100 	.word	0xe000e100
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	f1c3 0307 	rsb	r3, r3, #7
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	bf28      	it	cs
 80009f6:	2304      	movcs	r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3304      	adds	r3, #4
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d902      	bls.n	8000a08 <NVIC_EncodePriority+0x30>
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3b03      	subs	r3, #3
 8000a06:	e000      	b.n	8000a0a <NVIC_EncodePriority+0x32>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43da      	mvns	r2, r3
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	43d9      	mvns	r1, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	4313      	orrs	r3, r2
         );
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3724      	adds	r7, #36	; 0x24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ff4c 	bl	80008e4 <__NVIC_SetPriorityGrouping>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
 8000a60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a66:	f7ff ff61 	bl	800092c <__NVIC_GetPriorityGrouping>
 8000a6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	68b9      	ldr	r1, [r7, #8]
 8000a70:	6978      	ldr	r0, [r7, #20]
 8000a72:	f7ff ffb1 	bl	80009d8 <NVIC_EncodePriority>
 8000a76:	4602      	mov	r2, r0
 8000a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff80 	bl	8000984 <__NVIC_SetPriority>
}
 8000a84:	bf00      	nop
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ff54 	bl	8000948 <__NVIC_EnableIRQ>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab6:	e14e      	b.n	8000d56 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	2101      	movs	r1, #1
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f000 8140 	beq.w	8000d50 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d005      	beq.n	8000ae8 <HAL_GPIO_Init+0x40>
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 0303 	and.w	r3, r3, #3
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d130      	bne.n	8000b4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	2203      	movs	r2, #3
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68da      	ldr	r2, [r3, #12]
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b1e:	2201      	movs	r2, #1
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	091b      	lsrs	r3, r3, #4
 8000b34:	f003 0201 	and.w	r2, r3, #1
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 0303 	and.w	r3, r3, #3
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d017      	beq.n	8000b86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2203      	movs	r2, #3
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 0303 	and.w	r3, r3, #3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d123      	bne.n	8000bda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	08da      	lsrs	r2, r3, #3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3208      	adds	r2, #8
 8000b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	220f      	movs	r2, #15
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	691a      	ldr	r2, [r3, #16]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	f003 0307 	and.w	r3, r3, #7
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	08da      	lsrs	r2, r3, #3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3208      	adds	r2, #8
 8000bd4:	6939      	ldr	r1, [r7, #16]
 8000bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 0203 	and.w	r2, r3, #3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 809a 	beq.w	8000d50 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1c:	4b55      	ldr	r3, [pc, #340]	; (8000d74 <HAL_GPIO_Init+0x2cc>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a54      	ldr	r2, [pc, #336]	; (8000d74 <HAL_GPIO_Init+0x2cc>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b52      	ldr	r3, [pc, #328]	; (8000d74 <HAL_GPIO_Init+0x2cc>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c34:	4a50      	ldr	r2, [pc, #320]	; (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	220f      	movs	r2, #15
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c5e:	d013      	beq.n	8000c88 <HAL_GPIO_Init+0x1e0>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a46      	ldr	r2, [pc, #280]	; (8000d7c <HAL_GPIO_Init+0x2d4>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d00d      	beq.n	8000c84 <HAL_GPIO_Init+0x1dc>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a45      	ldr	r2, [pc, #276]	; (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d007      	beq.n	8000c80 <HAL_GPIO_Init+0x1d8>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a44      	ldr	r2, [pc, #272]	; (8000d84 <HAL_GPIO_Init+0x2dc>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d101      	bne.n	8000c7c <HAL_GPIO_Init+0x1d4>
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e006      	b.n	8000c8a <HAL_GPIO_Init+0x1e2>
 8000c7c:	2305      	movs	r3, #5
 8000c7e:	e004      	b.n	8000c8a <HAL_GPIO_Init+0x1e2>
 8000c80:	2302      	movs	r3, #2
 8000c82:	e002      	b.n	8000c8a <HAL_GPIO_Init+0x1e2>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <HAL_GPIO_Init+0x1e2>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	f002 0203 	and.w	r2, r2, #3
 8000c90:	0092      	lsls	r2, r2, #2
 8000c92:	4093      	lsls	r3, r2
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c9a:	4937      	ldr	r1, [pc, #220]	; (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ca8:	4b37      	ldr	r3, [pc, #220]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ccc:	4a2e      	ldr	r2, [pc, #184]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cf6:	4a24      	ldr	r2, [pc, #144]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f47f aea9 	bne.w	8000ab8 <HAL_GPIO_Init+0x10>
  }
}
 8000d66:	bf00      	nop
 8000d68:	bf00      	nop
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	48000400 	.word	0x48000400
 8000d80:	48000800 	.word	0x48000800
 8000d84:	48000c00 	.word	0x48000c00
 8000d88:	40010400 	.word	0x40010400

08000d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d9c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	f001 b823 	b.w	8001df8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 817d 	beq.w	80010c2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dc8:	4bbc      	ldr	r3, [pc, #752]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 030c 	and.w	r3, r3, #12
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d00c      	beq.n	8000dee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dd4:	4bb9      	ldr	r3, [pc, #740]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 030c 	and.w	r3, r3, #12
 8000ddc:	2b08      	cmp	r3, #8
 8000dde:	d15c      	bne.n	8000e9a <HAL_RCC_OscConfig+0x10e>
 8000de0:	4bb6      	ldr	r3, [pc, #728]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dec:	d155      	bne.n	8000e9a <HAL_RCC_OscConfig+0x10e>
 8000dee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000dfa:	fa93 f3a3 	rbit	r3, r3
 8000dfe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e06:	fab3 f383 	clz	r3, r3
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	095b      	lsrs	r3, r3, #5
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d102      	bne.n	8000e20 <HAL_RCC_OscConfig+0x94>
 8000e1a:	4ba8      	ldr	r3, [pc, #672]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	e015      	b.n	8000e4c <HAL_RCC_OscConfig+0xc0>
 8000e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e24:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e28:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e2c:	fa93 f3a3 	rbit	r3, r3
 8000e30:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e38:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e3c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e40:	fa93 f3a3 	rbit	r3, r3
 8000e44:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e48:	4b9c      	ldr	r3, [pc, #624]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e50:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e54:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e58:	fa92 f2a2 	rbit	r2, r2
 8000e5c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e60:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e64:	fab2 f282 	clz	r2, r2
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	f042 0220 	orr.w	r2, r2, #32
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	f002 021f 	and.w	r2, r2, #31
 8000e74:	2101      	movs	r1, #1
 8000e76:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 811f 	beq.w	80010c0 <HAL_RCC_OscConfig+0x334>
 8000e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f040 8116 	bne.w	80010c0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	f000 bfaf 	b.w	8001df8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eaa:	d106      	bne.n	8000eba <HAL_RCC_OscConfig+0x12e>
 8000eac:	4b83      	ldr	r3, [pc, #524]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a82      	ldr	r2, [pc, #520]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	e036      	b.n	8000f28 <HAL_RCC_OscConfig+0x19c>
 8000eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10c      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x158>
 8000eca:	4b7c      	ldr	r3, [pc, #496]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a7b      	ldr	r2, [pc, #492]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	4b79      	ldr	r3, [pc, #484]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a78      	ldr	r2, [pc, #480]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	e021      	b.n	8000f28 <HAL_RCC_OscConfig+0x19c>
 8000ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ee8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef4:	d10c      	bne.n	8000f10 <HAL_RCC_OscConfig+0x184>
 8000ef6:	4b71      	ldr	r3, [pc, #452]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a70      	ldr	r2, [pc, #448]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b6e      	ldr	r3, [pc, #440]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a6d      	ldr	r2, [pc, #436]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e00b      	b.n	8000f28 <HAL_RCC_OscConfig+0x19c>
 8000f10:	4b6a      	ldr	r3, [pc, #424]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a69      	ldr	r2, [pc, #420]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b67      	ldr	r3, [pc, #412]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a66      	ldr	r2, [pc, #408]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f26:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f28:	4b64      	ldr	r3, [pc, #400]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2c:	f023 020f 	bic.w	r2, r3, #15
 8000f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	495f      	ldr	r1, [pc, #380]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d059      	beq.n	8001006 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f52:	f7ff fcbb 	bl	80008cc <HAL_GetTick>
 8000f56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5a:	e00a      	b.n	8000f72 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fcb6 	bl	80008cc <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b64      	cmp	r3, #100	; 0x64
 8000f6a:	d902      	bls.n	8000f72 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	f000 bf43 	b.w	8001df8 <HAL_RCC_OscConfig+0x106c>
 8000f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f76:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f7e:	fa93 f3a3 	rbit	r3, r3
 8000f82:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f86:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8a:	fab3 f383 	clz	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	095b      	lsrs	r3, r3, #5
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d102      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x218>
 8000f9e:	4b47      	ldr	r3, [pc, #284]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	e015      	b.n	8000fd0 <HAL_RCC_OscConfig+0x244>
 8000fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000fb0:	fa93 f3a3 	rbit	r3, r3
 8000fb4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fbc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fc0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000fc4:	fa93 f3a3 	rbit	r3, r3
 8000fc8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fcc:	4b3b      	ldr	r3, [pc, #236]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fd4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000fd8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fdc:	fa92 f2a2 	rbit	r2, r2
 8000fe0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000fe4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000fe8:	fab2 f282 	clz	r2, r2
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	f042 0220 	orr.w	r2, r2, #32
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	f002 021f 	and.w	r2, r2, #31
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffe:	4013      	ands	r3, r2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0ab      	beq.n	8000f5c <HAL_RCC_OscConfig+0x1d0>
 8001004:	e05d      	b.n	80010c2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001006:	f7ff fc61 	bl	80008cc <HAL_GetTick>
 800100a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100e:	e00a      	b.n	8001026 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff fc5c 	bl	80008cc <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b64      	cmp	r3, #100	; 0x64
 800101e:	d902      	bls.n	8001026 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	f000 bee9 	b.w	8001df8 <HAL_RCC_OscConfig+0x106c>
 8001026:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800102a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001032:	fa93 f3a3 	rbit	r3, r3
 8001036:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800103a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103e:	fab3 f383 	clz	r3, r3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	095b      	lsrs	r3, r3, #5
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d102      	bne.n	8001058 <HAL_RCC_OscConfig+0x2cc>
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	e015      	b.n	8001084 <HAL_RCC_OscConfig+0x2f8>
 8001058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800105c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001060:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001064:	fa93 f3a3 	rbit	r3, r3
 8001068:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800106c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001070:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001074:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001078:	fa93 f3a3 	rbit	r3, r3
 800107c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001088:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800108c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001090:	fa92 f2a2 	rbit	r2, r2
 8001094:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001098:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800109c:	fab2 f282 	clz	r2, r2
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	f042 0220 	orr.w	r2, r2, #32
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	f002 021f 	and.w	r2, r2, #31
 80010ac:	2101      	movs	r1, #1
 80010ae:	fa01 f202 	lsl.w	r2, r1, r2
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1ab      	bne.n	8001010 <HAL_RCC_OscConfig+0x284>
 80010b8:	e003      	b.n	80010c2 <HAL_RCC_OscConfig+0x336>
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 817d 	beq.w	80013d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010d8:	4ba6      	ldr	r3, [pc, #664]	; (8001374 <HAL_RCC_OscConfig+0x5e8>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 030c 	and.w	r3, r3, #12
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00b      	beq.n	80010fc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010e4:	4ba3      	ldr	r3, [pc, #652]	; (8001374 <HAL_RCC_OscConfig+0x5e8>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 030c 	and.w	r3, r3, #12
 80010ec:	2b08      	cmp	r3, #8
 80010ee:	d172      	bne.n	80011d6 <HAL_RCC_OscConfig+0x44a>
 80010f0:	4ba0      	ldr	r3, [pc, #640]	; (8001374 <HAL_RCC_OscConfig+0x5e8>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d16c      	bne.n	80011d6 <HAL_RCC_OscConfig+0x44a>
 80010fc:	2302      	movs	r3, #2
 80010fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001102:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001106:	fa93 f3a3 	rbit	r3, r3
 800110a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800110e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001112:	fab3 f383 	clz	r3, r3
 8001116:	b2db      	uxtb	r3, r3
 8001118:	095b      	lsrs	r3, r3, #5
 800111a:	b2db      	uxtb	r3, r3
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d102      	bne.n	800112c <HAL_RCC_OscConfig+0x3a0>
 8001126:	4b93      	ldr	r3, [pc, #588]	; (8001374 <HAL_RCC_OscConfig+0x5e8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	e013      	b.n	8001154 <HAL_RCC_OscConfig+0x3c8>
 800112c:	2302      	movs	r3, #2
 800112e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001132:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800113e:	2302      	movs	r3, #2
 8001140:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001144:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001148:	fa93 f3a3 	rbit	r3, r3
 800114c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001150:	4b88      	ldr	r3, [pc, #544]	; (8001374 <HAL_RCC_OscConfig+0x5e8>)
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	2202      	movs	r2, #2
 8001156:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800115a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800115e:	fa92 f2a2 	rbit	r2, r2
 8001162:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001166:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800116a:	fab2 f282 	clz	r2, r2
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	f042 0220 	orr.w	r2, r2, #32
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	f002 021f 	and.w	r2, r2, #31
 800117a:	2101      	movs	r1, #1
 800117c:	fa01 f202 	lsl.w	r2, r1, r2
 8001180:	4013      	ands	r3, r2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00a      	beq.n	800119c <HAL_RCC_OscConfig+0x410>
 8001186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800118a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d002      	beq.n	800119c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	f000 be2e 	b.w	8001df8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119c:	4b75      	ldr	r3, [pc, #468]	; (8001374 <HAL_RCC_OscConfig+0x5e8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	21f8      	movs	r1, #248	; 0xf8
 80011b2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011ba:	fa91 f1a1 	rbit	r1, r1
 80011be:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80011c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80011c6:	fab1 f181 	clz	r1, r1
 80011ca:	b2c9      	uxtb	r1, r1
 80011cc:	408b      	lsls	r3, r1
 80011ce:	4969      	ldr	r1, [pc, #420]	; (8001374 <HAL_RCC_OscConfig+0x5e8>)
 80011d0:	4313      	orrs	r3, r2
 80011d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d4:	e0fd      	b.n	80013d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 8088 	beq.w	80012f8 <HAL_RCC_OscConfig+0x56c>
 80011e8:	2301      	movs	r3, #1
 80011ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011f2:	fa93 f3a3 	rbit	r3, r3
 80011f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011fe:	fab3 f383 	clz	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001208:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	461a      	mov	r2, r3
 8001210:	2301      	movs	r3, #1
 8001212:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fb5a 	bl	80008cc <HAL_GetTick>
 8001218:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121c:	e00a      	b.n	8001234 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121e:	f7ff fb55 	bl	80008cc <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d902      	bls.n	8001234 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	f000 bde2 	b.w	8001df8 <HAL_RCC_OscConfig+0x106c>
 8001234:	2302      	movs	r3, #2
 8001236:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001246:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	095b      	lsrs	r3, r3, #5
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d102      	bne.n	8001264 <HAL_RCC_OscConfig+0x4d8>
 800125e:	4b45      	ldr	r3, [pc, #276]	; (8001374 <HAL_RCC_OscConfig+0x5e8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	e013      	b.n	800128c <HAL_RCC_OscConfig+0x500>
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800126e:	fa93 f3a3 	rbit	r3, r3
 8001272:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001276:	2302      	movs	r3, #2
 8001278:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800127c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001280:	fa93 f3a3 	rbit	r3, r3
 8001284:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001288:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <HAL_RCC_OscConfig+0x5e8>)
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	2202      	movs	r2, #2
 800128e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001292:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001296:	fa92 f2a2 	rbit	r2, r2
 800129a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800129e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80012a2:	fab2 f282 	clz	r2, r2
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	f042 0220 	orr.w	r2, r2, #32
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	f002 021f 	and.w	r2, r2, #31
 80012b2:	2101      	movs	r1, #1
 80012b4:	fa01 f202 	lsl.w	r2, r1, r2
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0af      	beq.n	800121e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_RCC_OscConfig+0x5e8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	21f8      	movs	r1, #248	; 0xf8
 80012d4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012dc:	fa91 f1a1 	rbit	r1, r1
 80012e0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012e8:	fab1 f181 	clz	r1, r1
 80012ec:	b2c9      	uxtb	r1, r1
 80012ee:	408b      	lsls	r3, r1
 80012f0:	4920      	ldr	r1, [pc, #128]	; (8001374 <HAL_RCC_OscConfig+0x5e8>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]
 80012f6:	e06c      	b.n	80013d2 <HAL_RCC_OscConfig+0x646>
 80012f8:	2301      	movs	r3, #1
 80012fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001302:	fa93 f3a3 	rbit	r3, r3
 8001306:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800130a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130e:	fab3 f383 	clz	r3, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001318:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	461a      	mov	r2, r3
 8001320:	2300      	movs	r3, #0
 8001322:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fad2 	bl	80008cc <HAL_GetTick>
 8001328:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132c:	e00a      	b.n	8001344 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800132e:	f7ff facd 	bl	80008cc <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d902      	bls.n	8001344 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	f000 bd5a 	b.w	8001df8 <HAL_RCC_OscConfig+0x106c>
 8001344:	2302      	movs	r3, #2
 8001346:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800134e:	fa93 f3a3 	rbit	r3, r3
 8001352:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	fab3 f383 	clz	r3, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	095b      	lsrs	r3, r3, #5
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b01      	cmp	r3, #1
 800136c:	d104      	bne.n	8001378 <HAL_RCC_OscConfig+0x5ec>
 800136e:	4b01      	ldr	r3, [pc, #4]	; (8001374 <HAL_RCC_OscConfig+0x5e8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	e015      	b.n	80013a0 <HAL_RCC_OscConfig+0x614>
 8001374:	40021000 	.word	0x40021000
 8001378:	2302      	movs	r3, #2
 800137a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001382:	fa93 f3a3 	rbit	r3, r3
 8001386:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001390:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800139c:	4bc8      	ldr	r3, [pc, #800]	; (80016c0 <HAL_RCC_OscConfig+0x934>)
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	2202      	movs	r2, #2
 80013a2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80013a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013aa:	fa92 f2a2 	rbit	r2, r2
 80013ae:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80013b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013b6:	fab2 f282 	clz	r2, r2
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	f042 0220 	orr.w	r2, r2, #32
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	f002 021f 	and.w	r2, r2, #31
 80013c6:	2101      	movs	r1, #1
 80013c8:	fa01 f202 	lsl.w	r2, r1, r2
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1ad      	bne.n	800132e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8110 	beq.w	8001608 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d079      	beq.n	80014ec <HAL_RCC_OscConfig+0x760>
 80013f8:	2301      	movs	r3, #1
 80013fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001402:	fa93 f3a3 	rbit	r3, r3
 8001406:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800140a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140e:	fab3 f383 	clz	r3, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	4bab      	ldr	r3, [pc, #684]	; (80016c4 <HAL_RCC_OscConfig+0x938>)
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	461a      	mov	r2, r3
 800141e:	2301      	movs	r3, #1
 8001420:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff fa53 	bl	80008cc <HAL_GetTick>
 8001426:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142a:	e00a      	b.n	8001442 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff fa4e 	bl	80008cc <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d902      	bls.n	8001442 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	f000 bcdb 	b.w	8001df8 <HAL_RCC_OscConfig+0x106c>
 8001442:	2302      	movs	r3, #2
 8001444:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001448:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800144c:	fa93 f3a3 	rbit	r3, r3
 8001450:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001458:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800145c:	2202      	movs	r2, #2
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001464:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	fa93 f2a3 	rbit	r2, r3
 800146e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001480:	2202      	movs	r2, #2
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	fa93 f2a3 	rbit	r2, r3
 8001492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001496:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800149a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149c:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <HAL_RCC_OscConfig+0x934>)
 800149e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014a8:	2102      	movs	r1, #2
 80014aa:	6019      	str	r1, [r3, #0]
 80014ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	fa93 f1a3 	rbit	r1, r3
 80014ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014c2:	6019      	str	r1, [r3, #0]
  return result;
 80014c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	fab3 f383 	clz	r3, r3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	f003 031f 	and.w	r3, r3, #31
 80014de:	2101      	movs	r1, #1
 80014e0:	fa01 f303 	lsl.w	r3, r1, r3
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0a0      	beq.n	800142c <HAL_RCC_OscConfig+0x6a0>
 80014ea:	e08d      	b.n	8001608 <HAL_RCC_OscConfig+0x87c>
 80014ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014f4:	2201      	movs	r2, #1
 80014f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	fa93 f2a3 	rbit	r2, r3
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800150e:	601a      	str	r2, [r3, #0]
  return result;
 8001510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001514:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001518:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151a:	fab3 f383 	clz	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	4b68      	ldr	r3, [pc, #416]	; (80016c4 <HAL_RCC_OscConfig+0x938>)
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	461a      	mov	r2, r3
 800152a:	2300      	movs	r3, #0
 800152c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152e:	f7ff f9cd 	bl	80008cc <HAL_GetTick>
 8001532:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001536:	e00a      	b.n	800154e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001538:	f7ff f9c8 	bl	80008cc <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d902      	bls.n	800154e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	f000 bc55 	b.w	8001df8 <HAL_RCC_OscConfig+0x106c>
 800154e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001552:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001556:	2202      	movs	r2, #2
 8001558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	fa93 f2a3 	rbit	r2, r3
 8001568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001576:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800157a:	2202      	movs	r2, #2
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001582:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	fa93 f2a3 	rbit	r2, r3
 800158c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001590:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800159e:	2202      	movs	r2, #2
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	fa93 f2a3 	rbit	r2, r3
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ba:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <HAL_RCC_OscConfig+0x934>)
 80015bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015c6:	2102      	movs	r1, #2
 80015c8:	6019      	str	r1, [r3, #0]
 80015ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	fa93 f1a3 	rbit	r1, r3
 80015d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015e0:	6019      	str	r1, [r3, #0]
  return result;
 80015e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	fab3 f383 	clz	r3, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	2101      	movs	r1, #1
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	4013      	ands	r3, r2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d197      	bne.n	8001538 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 81a1 	beq.w	8001960 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001624:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <HAL_RCC_OscConfig+0x934>)
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d116      	bne.n	800165e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001630:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <HAL_RCC_OscConfig+0x934>)
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	4a22      	ldr	r2, [pc, #136]	; (80016c0 <HAL_RCC_OscConfig+0x934>)
 8001636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163a:	61d3      	str	r3, [r2, #28]
 800163c:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <HAL_RCC_OscConfig+0x934>)
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001648:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001652:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001656:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001658:	2301      	movs	r3, #1
 800165a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <HAL_RCC_OscConfig+0x93c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001666:	2b00      	cmp	r3, #0
 8001668:	d11a      	bne.n	80016a0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_RCC_OscConfig+0x93c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a16      	ldr	r2, [pc, #88]	; (80016c8 <HAL_RCC_OscConfig+0x93c>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001676:	f7ff f929 	bl	80008cc <HAL_GetTick>
 800167a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167e:	e009      	b.n	8001694 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001680:	f7ff f924 	bl	80008cc <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b64      	cmp	r3, #100	; 0x64
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e3b1      	b.n	8001df8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <HAL_RCC_OscConfig+0x93c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0ef      	beq.n	8001680 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d10d      	bne.n	80016cc <HAL_RCC_OscConfig+0x940>
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_RCC_OscConfig+0x934>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4a02      	ldr	r2, [pc, #8]	; (80016c0 <HAL_RCC_OscConfig+0x934>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6213      	str	r3, [r2, #32]
 80016bc:	e03c      	b.n	8001738 <HAL_RCC_OscConfig+0x9ac>
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000
 80016c4:	10908120 	.word	0x10908120
 80016c8:	40007000 	.word	0x40007000
 80016cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10c      	bne.n	80016f6 <HAL_RCC_OscConfig+0x96a>
 80016dc:	4bc1      	ldr	r3, [pc, #772]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4ac0      	ldr	r2, [pc, #768]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	6213      	str	r3, [r2, #32]
 80016e8:	4bbe      	ldr	r3, [pc, #760]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4abd      	ldr	r2, [pc, #756]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 80016ee:	f023 0304 	bic.w	r3, r3, #4
 80016f2:	6213      	str	r3, [r2, #32]
 80016f4:	e020      	b.n	8001738 <HAL_RCC_OscConfig+0x9ac>
 80016f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b05      	cmp	r3, #5
 8001704:	d10c      	bne.n	8001720 <HAL_RCC_OscConfig+0x994>
 8001706:	4bb7      	ldr	r3, [pc, #732]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	4ab6      	ldr	r2, [pc, #728]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6213      	str	r3, [r2, #32]
 8001712:	4bb4      	ldr	r3, [pc, #720]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4ab3      	ldr	r2, [pc, #716]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6213      	str	r3, [r2, #32]
 800171e:	e00b      	b.n	8001738 <HAL_RCC_OscConfig+0x9ac>
 8001720:	4bb0      	ldr	r3, [pc, #704]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4aaf      	ldr	r2, [pc, #700]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	6213      	str	r3, [r2, #32]
 800172c:	4bad      	ldr	r3, [pc, #692]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4aac      	ldr	r2, [pc, #688]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 8001732:	f023 0304 	bic.w	r3, r3, #4
 8001736:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 8081 	beq.w	800184c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff f8bf 	bl	80008cc <HAL_GetTick>
 800174e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001752:	e00b      	b.n	800176c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7ff f8ba 	bl	80008cc <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	; 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e345      	b.n	8001df8 <HAL_RCC_OscConfig+0x106c>
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001774:	2202      	movs	r2, #2
 8001776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	fa93 f2a3 	rbit	r2, r3
 8001786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001798:	2202      	movs	r2, #2
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	fa93 f2a3 	rbit	r2, r3
 80017aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017b2:	601a      	str	r2, [r3, #0]
  return result;
 80017b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017be:	fab3 f383 	clz	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	095b      	lsrs	r3, r3, #5
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d102      	bne.n	80017d8 <HAL_RCC_OscConfig+0xa4c>
 80017d2:	4b84      	ldr	r3, [pc, #528]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	e013      	b.n	8001800 <HAL_RCC_OscConfig+0xa74>
 80017d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017e0:	2202      	movs	r2, #2
 80017e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	fa93 f2a3 	rbit	r2, r3
 80017f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	4b79      	ldr	r3, [pc, #484]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001804:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001808:	2102      	movs	r1, #2
 800180a:	6011      	str	r1, [r2, #0]
 800180c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001810:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	fa92 f1a2 	rbit	r1, r2
 800181a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800181e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001822:	6011      	str	r1, [r2, #0]
  return result;
 8001824:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001828:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	fab2 f282 	clz	r2, r2
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	f002 021f 	and.w	r2, r2, #31
 800183e:	2101      	movs	r1, #1
 8001840:	fa01 f202 	lsl.w	r2, r1, r2
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d084      	beq.n	8001754 <HAL_RCC_OscConfig+0x9c8>
 800184a:	e07f      	b.n	800194c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184c:	f7ff f83e 	bl	80008cc <HAL_GetTick>
 8001850:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001854:	e00b      	b.n	800186e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff f839 	bl	80008cc <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e2c4      	b.n	8001df8 <HAL_RCC_OscConfig+0x106c>
 800186e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001872:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001876:	2202      	movs	r2, #2
 8001878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	fa93 f2a3 	rbit	r2, r3
 8001888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001896:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800189a:	2202      	movs	r2, #2
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	fa93 f2a3 	rbit	r2, r3
 80018ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018b4:	601a      	str	r2, [r3, #0]
  return result;
 80018b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c0:	fab3 f383 	clz	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d102      	bne.n	80018da <HAL_RCC_OscConfig+0xb4e>
 80018d4:	4b43      	ldr	r3, [pc, #268]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	e013      	b.n	8001902 <HAL_RCC_OscConfig+0xb76>
 80018da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018e2:	2202      	movs	r2, #2
 80018e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	fa93 f2a3 	rbit	r2, r3
 80018f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	4b39      	ldr	r3, [pc, #228]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001906:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800190a:	2102      	movs	r1, #2
 800190c:	6011      	str	r1, [r2, #0]
 800190e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001912:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	fa92 f1a2 	rbit	r1, r2
 800191c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001920:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001924:	6011      	str	r1, [r2, #0]
  return result;
 8001926:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800192a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	fab2 f282 	clz	r2, r2
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	f002 021f 	and.w	r2, r2, #31
 8001940:	2101      	movs	r1, #1
 8001942:	fa01 f202 	lsl.w	r2, r1, r2
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d184      	bne.n	8001856 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800194c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001954:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	4a22      	ldr	r2, [pc, #136]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 800195a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800195e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 8242 	beq.w	8001df6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001972:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <HAL_RCC_OscConfig+0xc58>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b08      	cmp	r3, #8
 800197c:	f000 8213 	beq.w	8001da6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001984:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	2b02      	cmp	r3, #2
 800198e:	f040 8162 	bne.w	8001c56 <HAL_RCC_OscConfig+0xeca>
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800199a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800199e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	fa93 f2a3 	rbit	r2, r3
 80019ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019b6:	601a      	str	r2, [r3, #0]
  return result;
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019c0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	461a      	mov	r2, r3
 80019d4:	2300      	movs	r3, #0
 80019d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7fe ff78 	bl	80008cc <HAL_GetTick>
 80019dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e0:	e00c      	b.n	80019fc <HAL_RCC_OscConfig+0xc70>
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e8:	f7fe ff70 	bl	80008cc <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e1fd      	b.n	8001df8 <HAL_RCC_OscConfig+0x106c>
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a20:	601a      	str	r2, [r3, #0]
  return result;
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d102      	bne.n	8001a46 <HAL_RCC_OscConfig+0xcba>
 8001a40:	4bb0      	ldr	r3, [pc, #704]	; (8001d04 <HAL_RCC_OscConfig+0xf78>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	e027      	b.n	8001a96 <HAL_RCC_OscConfig+0xd0a>
 8001a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	fa93 f2a3 	rbit	r2, r3
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a70:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	fa93 f2a3 	rbit	r2, r3
 8001a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	4b9c      	ldr	r3, [pc, #624]	; (8001d04 <HAL_RCC_OscConfig+0xf78>)
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a9a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a9e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001aa2:	6011      	str	r1, [r2, #0]
 8001aa4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aa8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	fa92 f1a2 	rbit	r1, r2
 8001ab2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ab6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001aba:	6011      	str	r1, [r2, #0]
  return result;
 8001abc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ac0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	fab2 f282 	clz	r2, r2
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	f042 0220 	orr.w	r2, r2, #32
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	f002 021f 	and.w	r2, r2, #31
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d182      	bne.n	80019e8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae2:	4b88      	ldr	r3, [pc, #544]	; (8001d04 <HAL_RCC_OscConfig+0xf78>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	430b      	orrs	r3, r1
 8001b04:	497f      	ldr	r1, [pc, #508]	; (8001d04 <HAL_RCC_OscConfig+0xf78>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
 8001b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	fa93 f2a3 	rbit	r2, r3
 8001b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b2e:	601a      	str	r2, [r3, #0]
  return result;
 8001b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b34:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b38:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7fe febc 	bl	80008cc <HAL_GetTick>
 8001b54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b58:	e009      	b.n	8001b6e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7fe feb7 	bl	80008cc <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e144      	b.n	8001df8 <HAL_RCC_OscConfig+0x106c>
 8001b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b72:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b80:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	fa93 f2a3 	rbit	r2, r3
 8001b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b92:	601a      	str	r2, [r3, #0]
  return result;
 8001b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b98:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	095b      	lsrs	r3, r3, #5
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d102      	bne.n	8001bb8 <HAL_RCC_OscConfig+0xe2c>
 8001bb2:	4b54      	ldr	r3, [pc, #336]	; (8001d04 <HAL_RCC_OscConfig+0xf78>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	e027      	b.n	8001c08 <HAL_RCC_OscConfig+0xe7c>
 8001bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001bc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	fa93 f2a3 	rbit	r2, r3
 8001bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001be6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	fa93 f2a3 	rbit	r2, r3
 8001bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <HAL_RCC_OscConfig+0xf78>)
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c0c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c14:	6011      	str	r1, [r2, #0]
 8001c16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c1a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	fa92 f1a2 	rbit	r1, r2
 8001c24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c28:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c2c:	6011      	str	r1, [r2, #0]
  return result;
 8001c2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c32:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	fab2 f282 	clz	r2, r2
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	f042 0220 	orr.w	r2, r2, #32
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	f002 021f 	and.w	r2, r2, #31
 8001c48:	2101      	movs	r1, #1
 8001c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d082      	beq.n	8001b5a <HAL_RCC_OscConfig+0xdce>
 8001c54:	e0cf      	b.n	8001df6 <HAL_RCC_OscConfig+0x106a>
 8001c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c68:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	fa93 f2a3 	rbit	r2, r3
 8001c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c76:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c7a:	601a      	str	r2, [r3, #0]
  return result;
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	461a      	mov	r2, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7fe fe16 	bl	80008cc <HAL_GetTick>
 8001ca0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca4:	e009      	b.n	8001cba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7fe fe11 	bl	80008cc <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e09e      	b.n	8001df8 <HAL_RCC_OscConfig+0x106c>
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ccc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fa93 f2a3 	rbit	r2, r3
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cde:	601a      	str	r2, [r3, #0]
  return result;
 8001ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ce8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	095b      	lsrs	r3, r3, #5
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d104      	bne.n	8001d08 <HAL_RCC_OscConfig+0xf7c>
 8001cfe:	4b01      	ldr	r3, [pc, #4]	; (8001d04 <HAL_RCC_OscConfig+0xf78>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	e029      	b.n	8001d58 <HAL_RCC_OscConfig+0xfcc>
 8001d04:	40021000 	.word	0x40021000
 8001d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fa93 f2a3 	rbit	r2, r3
 8001d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d28:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d32:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d40:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	fa93 f2a3 	rbit	r2, r3
 8001d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <HAL_RCC_OscConfig+0x1078>)
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d5c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d64:	6011      	str	r1, [r2, #0]
 8001d66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d6a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	fa92 f1a2 	rbit	r1, r2
 8001d74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d78:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d7c:	6011      	str	r1, [r2, #0]
  return result;
 8001d7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d82:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	fab2 f282 	clz	r2, r2
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	f042 0220 	orr.w	r2, r2, #32
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	f002 021f 	and.w	r2, r2, #31
 8001d98:	2101      	movs	r1, #1
 8001d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d180      	bne.n	8001ca6 <HAL_RCC_OscConfig+0xf1a>
 8001da4:	e027      	b.n	8001df6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e01e      	b.n	8001df8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_RCC_OscConfig+0x1078>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001dc6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d10b      	bne.n	8001df2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001dda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001dde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000

08001e08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b09e      	sub	sp, #120	; 0x78
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e162      	b.n	80020e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e20:	4b90      	ldr	r3, [pc, #576]	; (8002064 <HAL_RCC_ClockConfig+0x25c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d910      	bls.n	8001e50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b8d      	ldr	r3, [pc, #564]	; (8002064 <HAL_RCC_ClockConfig+0x25c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 0207 	bic.w	r2, r3, #7
 8001e36:	498b      	ldr	r1, [pc, #556]	; (8002064 <HAL_RCC_ClockConfig+0x25c>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b89      	ldr	r3, [pc, #548]	; (8002064 <HAL_RCC_ClockConfig+0x25c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e14a      	b.n	80020e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e5c:	4b82      	ldr	r3, [pc, #520]	; (8002068 <HAL_RCC_ClockConfig+0x260>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	497f      	ldr	r1, [pc, #508]	; (8002068 <HAL_RCC_ClockConfig+0x260>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80dc 	beq.w	8002034 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d13c      	bne.n	8001efe <HAL_RCC_ClockConfig+0xf6>
 8001e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e88:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d102      	bne.n	8001eae <HAL_RCC_ClockConfig+0xa6>
 8001ea8:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <HAL_RCC_ClockConfig+0x260>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	e00f      	b.n	8001ece <HAL_RCC_ClockConfig+0xc6>
 8001eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	667b      	str	r3, [r7, #100]	; 0x64
 8001ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eca:	4b67      	ldr	r3, [pc, #412]	; (8002068 <HAL_RCC_ClockConfig+0x260>)
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ed2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ed4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ed6:	fa92 f2a2 	rbit	r2, r2
 8001eda:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001edc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ede:	fab2 f282 	clz	r2, r2
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f042 0220 	orr.w	r2, r2, #32
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	f002 021f 	and.w	r2, r2, #31
 8001eee:	2101      	movs	r1, #1
 8001ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d17b      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0f3      	b.n	80020e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d13c      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x178>
 8001f06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	095b      	lsrs	r3, r3, #5
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d102      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x128>
 8001f2a:	4b4f      	ldr	r3, [pc, #316]	; (8002068 <HAL_RCC_ClockConfig+0x260>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	e00f      	b.n	8001f50 <HAL_RCC_ClockConfig+0x148>
 8001f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f42:	643b      	str	r3, [r7, #64]	; 0x40
 8001f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f4c:	4b46      	ldr	r3, [pc, #280]	; (8002068 <HAL_RCC_ClockConfig+0x260>)
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f54:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f58:	fa92 f2a2 	rbit	r2, r2
 8001f5c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f60:	fab2 f282 	clz	r2, r2
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	f042 0220 	orr.w	r2, r2, #32
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	f002 021f 	and.w	r2, r2, #31
 8001f70:	2101      	movs	r1, #1
 8001f72:	fa01 f202 	lsl.w	r2, r1, r2
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d13a      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0b2      	b.n	80020e6 <HAL_RCC_ClockConfig+0x2de>
 8001f80:	2302      	movs	r3, #2
 8001f82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	095b      	lsrs	r3, r3, #5
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d102      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x1a0>
 8001fa2:	4b31      	ldr	r3, [pc, #196]	; (8002068 <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	e00d      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1bc>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	623b      	str	r3, [r7, #32]
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	4b29      	ldr	r3, [pc, #164]	; (8002068 <HAL_RCC_ClockConfig+0x260>)
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	61ba      	str	r2, [r7, #24]
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	fa92 f2a2 	rbit	r2, r2
 8001fce:	617a      	str	r2, [r7, #20]
  return result;
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	fab2 f282 	clz	r2, r2
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	f042 0220 	orr.w	r2, r2, #32
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	f002 021f 	and.w	r2, r2, #31
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e079      	b.n	80020e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_RCC_ClockConfig+0x260>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f023 0203 	bic.w	r2, r3, #3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	491a      	ldr	r1, [pc, #104]	; (8002068 <HAL_RCC_ClockConfig+0x260>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002004:	f7fe fc62 	bl	80008cc <HAL_GetTick>
 8002008:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200a:	e00a      	b.n	8002022 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200c:	f7fe fc5e 	bl	80008cc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	; 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e061      	b.n	80020e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_RCC_ClockConfig+0x260>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 020c 	and.w	r2, r3, #12
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	429a      	cmp	r2, r3
 8002032:	d1eb      	bne.n	800200c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RCC_ClockConfig+0x25c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d214      	bcs.n	800206c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_RCC_ClockConfig+0x25c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 0207 	bic.w	r2, r3, #7
 800204a:	4906      	ldr	r1, [pc, #24]	; (8002064 <HAL_RCC_ClockConfig+0x25c>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b04      	ldr	r3, [pc, #16]	; (8002064 <HAL_RCC_ClockConfig+0x25c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e040      	b.n	80020e6 <HAL_RCC_ClockConfig+0x2de>
 8002064:	40022000 	.word	0x40022000
 8002068:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_RCC_ClockConfig+0x2e8>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	491a      	ldr	r1, [pc, #104]	; (80020f0 <HAL_RCC_ClockConfig+0x2e8>)
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <HAL_RCC_ClockConfig+0x2e8>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4912      	ldr	r1, [pc, #72]	; (80020f0 <HAL_RCC_ClockConfig+0x2e8>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020aa:	f000 f829 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 80020ae:	4601      	mov	r1, r0
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <HAL_RCC_ClockConfig+0x2e8>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020b8:	22f0      	movs	r2, #240	; 0xf0
 80020ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	fa92 f2a2 	rbit	r2, r2
 80020c2:	60fa      	str	r2, [r7, #12]
  return result;
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	fab2 f282 	clz	r2, r2
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	40d3      	lsrs	r3, r2
 80020ce:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x2ec>)
 80020d0:	5cd3      	ldrb	r3, [r2, r3]
 80020d2:	fa21 f303 	lsr.w	r3, r1, r3
 80020d6:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <HAL_RCC_ClockConfig+0x2f0>)
 80020d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_RCC_ClockConfig+0x2f4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe faf4 	bl	80006cc <HAL_InitTick>
  
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3778      	adds	r7, #120	; 0x78
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	08006310 	.word	0x08006310
 80020f8:	20000000 	.word	0x20000000
 80020fc:	20000004 	.word	0x20000004

08002100 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002100:	b480      	push	{r7}
 8002102:	b08b      	sub	sp, #44	; 0x2c
 8002104:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	2300      	movs	r3, #0
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800211a:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b04      	cmp	r3, #4
 8002128:	d002      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x30>
 800212a:	2b08      	cmp	r3, #8
 800212c:	d003      	beq.n	8002136 <HAL_RCC_GetSysClockFreq+0x36>
 800212e:	e03c      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002130:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002132:	623b      	str	r3, [r7, #32]
      break;
 8002134:	e03c      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800213c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002140:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	fa92 f2a2 	rbit	r2, r2
 8002148:	607a      	str	r2, [r7, #4]
  return result;
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	fab2 f282 	clz	r2, r2
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	40d3      	lsrs	r3, r2
 8002154:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800215a:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	220f      	movs	r2, #15
 8002164:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	fa92 f2a2 	rbit	r2, r2
 800216c:	60fa      	str	r2, [r7, #12]
  return result;
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	fab2 f282 	clz	r2, r2
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	40d3      	lsrs	r3, r2
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002188:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
 8002198:	e004      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	623b      	str	r3, [r7, #32]
      break;
 80021a8:	e002      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021ac:	623b      	str	r3, [r7, #32]
      break;
 80021ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b0:	6a3b      	ldr	r3, [r7, #32]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	372c      	adds	r7, #44	; 0x2c
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	007a1200 	.word	0x007a1200
 80021c8:	08006328 	.word	0x08006328
 80021cc:	08006338 	.word	0x08006338
 80021d0:	003d0900 	.word	0x003d0900

080021d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000000 	.word	0x20000000

080021ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021f2:	f7ff ffef 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 80021f6:	4601      	mov	r1, r0
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002200:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002204:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	fa92 f2a2 	rbit	r2, r2
 800220c:	603a      	str	r2, [r7, #0]
  return result;
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	fab2 f282 	clz	r2, r2
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	40d3      	lsrs	r3, r2
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_RCC_GetPCLK1Freq+0x40>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	08006320 	.word	0x08006320

08002230 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	220f      	movs	r2, #15
 800223e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_RCC_GetClockConfig+0x5c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0203 	and.w	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800224c:	4b0f      	ldr	r3, [pc, #60]	; (800228c <HAL_RCC_GetClockConfig+0x5c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_RCC_GetClockConfig+0x5c>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_RCC_GetClockConfig+0x5c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	08db      	lsrs	r3, r3, #3
 800226a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <HAL_RCC_GetClockConfig+0x60>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0207 	and.w	r2, r3, #7
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	601a      	str	r2, [r3, #0]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	40022000 	.word	0x40022000

08002294 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b092      	sub	sp, #72	; 0x48
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 80d4 	beq.w	8002460 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b8:	4b4e      	ldr	r3, [pc, #312]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10e      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c4:	4b4b      	ldr	r3, [pc, #300]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	4a4a      	ldr	r2, [pc, #296]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ce:	61d3      	str	r3, [r2, #28]
 80022d0:	4b48      	ldr	r3, [pc, #288]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022dc:	2301      	movs	r3, #1
 80022de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e2:	4b45      	ldr	r3, [pc, #276]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d118      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ee:	4b42      	ldr	r3, [pc, #264]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a41      	ldr	r2, [pc, #260]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fa:	f7fe fae7 	bl	80008cc <HAL_GetTick>
 80022fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	e008      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002302:	f7fe fae3 	bl	80008cc <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b64      	cmp	r3, #100	; 0x64
 800230e:	d901      	bls.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e14b      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	4b38      	ldr	r3, [pc, #224]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002320:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002328:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800232a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 8084 	beq.w	800243a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800233a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800233c:	429a      	cmp	r2, r3
 800233e:	d07c      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002340:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800234a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800234e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	4b26      	ldr	r3, [pc, #152]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	461a      	mov	r2, r3
 800236a:	2301      	movs	r3, #1
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002372:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800237c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	461a      	mov	r2, r3
 800238e:	2300      	movs	r3, #0
 8002390:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002392:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002396:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d04b      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7fe fa93 	bl	80008cc <HAL_GetTick>
 80023a6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7fe fa8f 	bl	80008cc <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0f5      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x318>
 80023c0:	2302      	movs	r3, #2
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
 80023cc:	2302      	movs	r3, #2
 80023ce:	623b      	str	r3, [r7, #32]
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	61fb      	str	r3, [r7, #28]
  return result;
 80023d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d108      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023ee:	4b01      	ldr	r3, [pc, #4]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	e00d      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40007000 	.word	0x40007000
 80023fc:	10908100 	.word	0x10908100
 8002400:	2302      	movs	r3, #2
 8002402:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	4b69      	ldr	r3, [pc, #420]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	2202      	movs	r2, #2
 8002412:	613a      	str	r2, [r7, #16]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	fa92 f2a2 	rbit	r2, r2
 800241a:	60fa      	str	r2, [r7, #12]
  return result;
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	fab2 f282 	clz	r2, r2
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	f002 021f 	and.w	r2, r2, #31
 800242e:	2101      	movs	r1, #1
 8002430:	fa01 f202 	lsl.w	r2, r1, r2
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0b7      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800243a:	4b5e      	ldr	r3, [pc, #376]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	495b      	ldr	r1, [pc, #364]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002448:	4313      	orrs	r3, r2
 800244a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800244c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002454:	4b57      	ldr	r3, [pc, #348]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	4a56      	ldr	r2, [pc, #344]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800245a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800246c:	4b51      	ldr	r3, [pc, #324]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f023 0203 	bic.w	r2, r3, #3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	494e      	ldr	r1, [pc, #312]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800247a:	4313      	orrs	r3, r2
 800247c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800248a:	4b4a      	ldr	r3, [pc, #296]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f023 0210 	bic.w	r2, r3, #16
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	4947      	ldr	r1, [pc, #284]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002498:	4313      	orrs	r3, r2
 800249a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80024a8:	4b42      	ldr	r3, [pc, #264]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	493f      	ldr	r1, [pc, #252]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d008      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f023 0220 	bic.w	r2, r3, #32
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	4938      	ldr	r1, [pc, #224]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024e4:	4b33      	ldr	r3, [pc, #204]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	4930      	ldr	r1, [pc, #192]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d008      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002502:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	4929      	ldr	r1, [pc, #164]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4921      	ldr	r1, [pc, #132]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800252e:	4313      	orrs	r3, r2
 8002530:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	491a      	ldr	r1, [pc, #104]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800254c:	4313      	orrs	r3, r2
 800254e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	4912      	ldr	r1, [pc, #72]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800256a:	4313      	orrs	r3, r2
 800256c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800257a:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	490b      	ldr	r1, [pc, #44]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002588:	4313      	orrs	r3, r2
 800258a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	4903      	ldr	r1, [pc, #12]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3748      	adds	r7, #72	; 0x48
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000

080025b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e049      	b.n	800265e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe f81c 	bl	800061c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	4619      	mov	r1, r3
 80025f6:	4610      	mov	r0, r2
 80025f8:	f000 fcf8 	bl	8002fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d001      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e03b      	b.n	80026f8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a19      	ldr	r2, [pc, #100]	; (8002704 <HAL_TIM_Base_Start_IT+0x9c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d009      	beq.n	80026b6 <HAL_TIM_Base_Start_IT+0x4e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026aa:	d004      	beq.n	80026b6 <HAL_TIM_Base_Start_IT+0x4e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a15      	ldr	r2, [pc, #84]	; (8002708 <HAL_TIM_Base_Start_IT+0xa0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d115      	bne.n	80026e2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <HAL_TIM_Base_Start_IT+0xa4>)
 80026be:	4013      	ands	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b06      	cmp	r3, #6
 80026c6:	d015      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x8c>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ce:	d011      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e0:	e008      	b.n	80026f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0201 	orr.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e000      	b.n	80026f6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40014000 	.word	0x40014000
 800270c:	00010007 	.word	0x00010007

08002710 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e049      	b.n	80027b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f841 	bl	80027be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f000 fc4c 	bl	8002fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d109      	bne.n	80027f8 <HAL_TIM_PWM_Start+0x24>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	bf14      	ite	ne
 80027f0:	2301      	movne	r3, #1
 80027f2:	2300      	moveq	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e03c      	b.n	8002872 <HAL_TIM_PWM_Start+0x9e>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d109      	bne.n	8002812 <HAL_TIM_PWM_Start+0x3e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	bf14      	ite	ne
 800280a:	2301      	movne	r3, #1
 800280c:	2300      	moveq	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	e02f      	b.n	8002872 <HAL_TIM_PWM_Start+0x9e>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b08      	cmp	r3, #8
 8002816:	d109      	bne.n	800282c <HAL_TIM_PWM_Start+0x58>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b01      	cmp	r3, #1
 8002822:	bf14      	ite	ne
 8002824:	2301      	movne	r3, #1
 8002826:	2300      	moveq	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	e022      	b.n	8002872 <HAL_TIM_PWM_Start+0x9e>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b0c      	cmp	r3, #12
 8002830:	d109      	bne.n	8002846 <HAL_TIM_PWM_Start+0x72>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b01      	cmp	r3, #1
 800283c:	bf14      	ite	ne
 800283e:	2301      	movne	r3, #1
 8002840:	2300      	moveq	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	e015      	b.n	8002872 <HAL_TIM_PWM_Start+0x9e>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b10      	cmp	r3, #16
 800284a:	d109      	bne.n	8002860 <HAL_TIM_PWM_Start+0x8c>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	bf14      	ite	ne
 8002858:	2301      	movne	r3, #1
 800285a:	2300      	moveq	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e008      	b.n	8002872 <HAL_TIM_PWM_Start+0x9e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	bf14      	ite	ne
 800286c:	2301      	movne	r3, #1
 800286e:	2300      	moveq	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e083      	b.n	8002982 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d104      	bne.n	800288a <HAL_TIM_PWM_Start+0xb6>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002888:	e023      	b.n	80028d2 <HAL_TIM_PWM_Start+0xfe>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b04      	cmp	r3, #4
 800288e:	d104      	bne.n	800289a <HAL_TIM_PWM_Start+0xc6>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002898:	e01b      	b.n	80028d2 <HAL_TIM_PWM_Start+0xfe>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b08      	cmp	r3, #8
 800289e:	d104      	bne.n	80028aa <HAL_TIM_PWM_Start+0xd6>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a8:	e013      	b.n	80028d2 <HAL_TIM_PWM_Start+0xfe>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b0c      	cmp	r3, #12
 80028ae:	d104      	bne.n	80028ba <HAL_TIM_PWM_Start+0xe6>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028b8:	e00b      	b.n	80028d2 <HAL_TIM_PWM_Start+0xfe>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d104      	bne.n	80028ca <HAL_TIM_PWM_Start+0xf6>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c8:	e003      	b.n	80028d2 <HAL_TIM_PWM_Start+0xfe>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2201      	movs	r2, #1
 80028d8:	6839      	ldr	r1, [r7, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 ff34 	bl	8003748 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a29      	ldr	r2, [pc, #164]	; (800298c <HAL_TIM_PWM_Start+0x1b8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00e      	beq.n	8002908 <HAL_TIM_PWM_Start+0x134>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a28      	ldr	r2, [pc, #160]	; (8002990 <HAL_TIM_PWM_Start+0x1bc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d009      	beq.n	8002908 <HAL_TIM_PWM_Start+0x134>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a26      	ldr	r2, [pc, #152]	; (8002994 <HAL_TIM_PWM_Start+0x1c0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d004      	beq.n	8002908 <HAL_TIM_PWM_Start+0x134>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a25      	ldr	r2, [pc, #148]	; (8002998 <HAL_TIM_PWM_Start+0x1c4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d101      	bne.n	800290c <HAL_TIM_PWM_Start+0x138>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <HAL_TIM_PWM_Start+0x13a>
 800290c:	2300      	movs	r3, #0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d007      	beq.n	8002922 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002920:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a19      	ldr	r2, [pc, #100]	; (800298c <HAL_TIM_PWM_Start+0x1b8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d009      	beq.n	8002940 <HAL_TIM_PWM_Start+0x16c>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002934:	d004      	beq.n	8002940 <HAL_TIM_PWM_Start+0x16c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a15      	ldr	r2, [pc, #84]	; (8002990 <HAL_TIM_PWM_Start+0x1bc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d115      	bne.n	800296c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_TIM_PWM_Start+0x1c8>)
 8002948:	4013      	ands	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b06      	cmp	r3, #6
 8002950:	d015      	beq.n	800297e <HAL_TIM_PWM_Start+0x1aa>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002958:	d011      	beq.n	800297e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296a:	e008      	b.n	800297e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	e000      	b.n	8002980 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800297e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40012c00 	.word	0x40012c00
 8002990:	40014000 	.word	0x40014000
 8002994:	40014400 	.word	0x40014400
 8002998:	40014800 	.word	0x40014800
 800299c:	00010007 	.word	0x00010007

080029a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d122      	bne.n	80029fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d11b      	bne.n	80029fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0202 	mvn.w	r2, #2
 80029cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fae3 	bl	8002fae <HAL_TIM_IC_CaptureCallback>
 80029e8:	e005      	b.n	80029f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fad5 	bl	8002f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fae6 	bl	8002fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d122      	bne.n	8002a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d11b      	bne.n	8002a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0204 	mvn.w	r2, #4
 8002a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2202      	movs	r2, #2
 8002a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fab9 	bl	8002fae <HAL_TIM_IC_CaptureCallback>
 8002a3c:	e005      	b.n	8002a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 faab 	bl	8002f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 fabc 	bl	8002fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d122      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d11b      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0208 	mvn.w	r2, #8
 8002a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2204      	movs	r2, #4
 8002a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fa8f 	bl	8002fae <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fa81 	bl	8002f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fa92 	bl	8002fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d122      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d11b      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0210 	mvn.w	r2, #16
 8002ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2208      	movs	r2, #8
 8002ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa65 	bl	8002fae <HAL_TIM_IC_CaptureCallback>
 8002ae4:	e005      	b.n	8002af2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fa57 	bl	8002f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fa68 	bl	8002fc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d10e      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d107      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0201 	mvn.w	r2, #1
 8002b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fd fd40 	bl	80005a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2e:	2b80      	cmp	r3, #128	; 0x80
 8002b30:	d10e      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3c:	2b80      	cmp	r3, #128	; 0x80
 8002b3e:	d107      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 ff0a 	bl	8003964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b5e:	d10e      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6a:	2b80      	cmp	r3, #128	; 0x80
 8002b6c:	d107      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fefd 	bl	8003978 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b40      	cmp	r3, #64	; 0x40
 8002b8a:	d10e      	bne.n	8002baa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b96:	2b40      	cmp	r3, #64	; 0x40
 8002b98:	d107      	bne.n	8002baa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fa16 	bl	8002fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d10e      	bne.n	8002bd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d107      	bne.n	8002bd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f06f 0220 	mvn.w	r2, #32
 8002bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 febd 	bl	8003950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e0ff      	b.n	8002dfe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b14      	cmp	r3, #20
 8002c0a:	f200 80f0 	bhi.w	8002dee <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002c0e:	a201      	add	r2, pc, #4	; (adr r2, 8002c14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c69 	.word	0x08002c69
 8002c18:	08002def 	.word	0x08002def
 8002c1c:	08002def 	.word	0x08002def
 8002c20:	08002def 	.word	0x08002def
 8002c24:	08002ca9 	.word	0x08002ca9
 8002c28:	08002def 	.word	0x08002def
 8002c2c:	08002def 	.word	0x08002def
 8002c30:	08002def 	.word	0x08002def
 8002c34:	08002ceb 	.word	0x08002ceb
 8002c38:	08002def 	.word	0x08002def
 8002c3c:	08002def 	.word	0x08002def
 8002c40:	08002def 	.word	0x08002def
 8002c44:	08002d2b 	.word	0x08002d2b
 8002c48:	08002def 	.word	0x08002def
 8002c4c:	08002def 	.word	0x08002def
 8002c50:	08002def 	.word	0x08002def
 8002c54:	08002d6d 	.word	0x08002d6d
 8002c58:	08002def 	.word	0x08002def
 8002c5c:	08002def 	.word	0x08002def
 8002c60:	08002def 	.word	0x08002def
 8002c64:	08002dad 	.word	0x08002dad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fa2a 	bl	80030c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0208 	orr.w	r2, r2, #8
 8002c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0204 	bic.w	r2, r2, #4
 8002c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6999      	ldr	r1, [r3, #24]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	619a      	str	r2, [r3, #24]
      break;
 8002ca6:	e0a5      	b.n	8002df4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fa90 	bl	80031d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6999      	ldr	r1, [r3, #24]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	021a      	lsls	r2, r3, #8
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	619a      	str	r2, [r3, #24]
      break;
 8002ce8:	e084      	b.n	8002df4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 faef 	bl	80032d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69da      	ldr	r2, [r3, #28]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0208 	orr.w	r2, r2, #8
 8002d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0204 	bic.w	r2, r2, #4
 8002d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69d9      	ldr	r1, [r3, #28]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	61da      	str	r2, [r3, #28]
      break;
 8002d28:	e064      	b.n	8002df4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fb4d 	bl	80033d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69da      	ldr	r2, [r3, #28]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69d9      	ldr	r1, [r3, #28]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	021a      	lsls	r2, r3, #8
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	61da      	str	r2, [r3, #28]
      break;
 8002d6a:	e043      	b.n	8002df4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fb90 	bl	8003498 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0208 	orr.w	r2, r2, #8
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0204 	bic.w	r2, r2, #4
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002daa:	e023      	b.n	8002df4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fbce 	bl	8003554 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	021a      	lsls	r2, r3, #8
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002dec:	e002      	b.n	8002df4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
      break;
 8002df2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop

08002e08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_TIM_ConfigClockSource+0x1c>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e0b6      	b.n	8002f92 <HAL_TIM_ConfigClockSource+0x18a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e60:	d03e      	beq.n	8002ee0 <HAL_TIM_ConfigClockSource+0xd8>
 8002e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e66:	f200 8087 	bhi.w	8002f78 <HAL_TIM_ConfigClockSource+0x170>
 8002e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6e:	f000 8086 	beq.w	8002f7e <HAL_TIM_ConfigClockSource+0x176>
 8002e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e76:	d87f      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x170>
 8002e78:	2b70      	cmp	r3, #112	; 0x70
 8002e7a:	d01a      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0xaa>
 8002e7c:	2b70      	cmp	r3, #112	; 0x70
 8002e7e:	d87b      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x170>
 8002e80:	2b60      	cmp	r3, #96	; 0x60
 8002e82:	d050      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0x11e>
 8002e84:	2b60      	cmp	r3, #96	; 0x60
 8002e86:	d877      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x170>
 8002e88:	2b50      	cmp	r3, #80	; 0x50
 8002e8a:	d03c      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0xfe>
 8002e8c:	2b50      	cmp	r3, #80	; 0x50
 8002e8e:	d873      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x170>
 8002e90:	2b40      	cmp	r3, #64	; 0x40
 8002e92:	d058      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0x13e>
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d86f      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x170>
 8002e98:	2b30      	cmp	r3, #48	; 0x30
 8002e9a:	d064      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15e>
 8002e9c:	2b30      	cmp	r3, #48	; 0x30
 8002e9e:	d86b      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x170>
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d060      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15e>
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d867      	bhi.n	8002f78 <HAL_TIM_ConfigClockSource+0x170>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d05c      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15e>
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d05a      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x15e>
 8002eb0:	e062      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6899      	ldr	r1, [r3, #8]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f000 fc21 	bl	8003708 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ed4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	609a      	str	r2, [r3, #8]
      break;
 8002ede:	e04f      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6899      	ldr	r1, [r3, #8]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f000 fc0a 	bl	8003708 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f02:	609a      	str	r2, [r3, #8]
      break;
 8002f04:	e03c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6859      	ldr	r1, [r3, #4]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f000 fb7e 	bl	8003614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2150      	movs	r1, #80	; 0x50
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fbd7 	bl	80036d2 <TIM_ITRx_SetConfig>
      break;
 8002f24:	e02c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	461a      	mov	r2, r3
 8002f34:	f000 fb9d 	bl	8003672 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2160      	movs	r1, #96	; 0x60
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fbc7 	bl	80036d2 <TIM_ITRx_SetConfig>
      break;
 8002f44:	e01c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f000 fb5e 	bl	8003614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2140      	movs	r1, #64	; 0x40
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fbb7 	bl	80036d2 <TIM_ITRx_SetConfig>
      break;
 8002f64:	e00c      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4610      	mov	r0, r2
 8002f72:	f000 fbae 	bl	80036d2 <TIM_ITRx_SetConfig>
      break;
 8002f76:	e003      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7c:	e000      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a2e      	ldr	r2, [pc, #184]	; (80030b8 <TIM_Base_SetConfig+0xcc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d003      	beq.n	800300c <TIM_Base_SetConfig+0x20>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300a:	d108      	bne.n	800301e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a25      	ldr	r2, [pc, #148]	; (80030b8 <TIM_Base_SetConfig+0xcc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00f      	beq.n	8003046 <TIM_Base_SetConfig+0x5a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302c:	d00b      	beq.n	8003046 <TIM_Base_SetConfig+0x5a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a22      	ldr	r2, [pc, #136]	; (80030bc <TIM_Base_SetConfig+0xd0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d007      	beq.n	8003046 <TIM_Base_SetConfig+0x5a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a21      	ldr	r2, [pc, #132]	; (80030c0 <TIM_Base_SetConfig+0xd4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d003      	beq.n	8003046 <TIM_Base_SetConfig+0x5a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a20      	ldr	r2, [pc, #128]	; (80030c4 <TIM_Base_SetConfig+0xd8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d108      	bne.n	8003058 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <TIM_Base_SetConfig+0xcc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00b      	beq.n	800309c <TIM_Base_SetConfig+0xb0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a0d      	ldr	r2, [pc, #52]	; (80030bc <TIM_Base_SetConfig+0xd0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d007      	beq.n	800309c <TIM_Base_SetConfig+0xb0>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a0c      	ldr	r2, [pc, #48]	; (80030c0 <TIM_Base_SetConfig+0xd4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d003      	beq.n	800309c <TIM_Base_SetConfig+0xb0>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a0b      	ldr	r2, [pc, #44]	; (80030c4 <TIM_Base_SetConfig+0xd8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d103      	bne.n	80030a4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	615a      	str	r2, [r3, #20]
}
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40014000 	.word	0x40014000
 80030c0:	40014400 	.word	0x40014400
 80030c4:	40014800 	.word	0x40014800

080030c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f023 0201 	bic.w	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f023 0302 	bic.w	r3, r3, #2
 8003114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a28      	ldr	r2, [pc, #160]	; (80031c4 <TIM_OC1_SetConfig+0xfc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00b      	beq.n	8003140 <TIM_OC1_SetConfig+0x78>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a27      	ldr	r2, [pc, #156]	; (80031c8 <TIM_OC1_SetConfig+0x100>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d007      	beq.n	8003140 <TIM_OC1_SetConfig+0x78>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a26      	ldr	r2, [pc, #152]	; (80031cc <TIM_OC1_SetConfig+0x104>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d003      	beq.n	8003140 <TIM_OC1_SetConfig+0x78>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a25      	ldr	r2, [pc, #148]	; (80031d0 <TIM_OC1_SetConfig+0x108>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d10c      	bne.n	800315a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f023 0308 	bic.w	r3, r3, #8
 8003146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f023 0304 	bic.w	r3, r3, #4
 8003158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a19      	ldr	r2, [pc, #100]	; (80031c4 <TIM_OC1_SetConfig+0xfc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00b      	beq.n	800317a <TIM_OC1_SetConfig+0xb2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <TIM_OC1_SetConfig+0x100>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <TIM_OC1_SetConfig+0xb2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a17      	ldr	r2, [pc, #92]	; (80031cc <TIM_OC1_SetConfig+0x104>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d003      	beq.n	800317a <TIM_OC1_SetConfig+0xb2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <TIM_OC1_SetConfig+0x108>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d111      	bne.n	800319e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	621a      	str	r2, [r3, #32]
}
 80031b8:	bf00      	nop
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40012c00 	.word	0x40012c00
 80031c8:	40014000 	.word	0x40014000
 80031cc:	40014400 	.word	0x40014400
 80031d0:	40014800 	.word	0x40014800

080031d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f023 0210 	bic.w	r2, r3, #16
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f023 0320 	bic.w	r3, r3, #32
 8003222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a24      	ldr	r2, [pc, #144]	; (80032c4 <TIM_OC2_SetConfig+0xf0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d10d      	bne.n	8003254 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800323e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003252:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <TIM_OC2_SetConfig+0xf0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00b      	beq.n	8003274 <TIM_OC2_SetConfig+0xa0>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a1a      	ldr	r2, [pc, #104]	; (80032c8 <TIM_OC2_SetConfig+0xf4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d007      	beq.n	8003274 <TIM_OC2_SetConfig+0xa0>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a19      	ldr	r2, [pc, #100]	; (80032cc <TIM_OC2_SetConfig+0xf8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d003      	beq.n	8003274 <TIM_OC2_SetConfig+0xa0>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a18      	ldr	r2, [pc, #96]	; (80032d0 <TIM_OC2_SetConfig+0xfc>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d113      	bne.n	800329c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800327a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003282:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	621a      	str	r2, [r3, #32]
}
 80032b6:	bf00      	nop
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	40014000 	.word	0x40014000
 80032cc:	40014400 	.word	0x40014400
 80032d0:	40014800 	.word	0x40014800

080032d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0303 	bic.w	r3, r3, #3
 800330e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a23      	ldr	r2, [pc, #140]	; (80033c0 <TIM_OC3_SetConfig+0xec>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d10d      	bne.n	8003352 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800333c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003350:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a1a      	ldr	r2, [pc, #104]	; (80033c0 <TIM_OC3_SetConfig+0xec>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00b      	beq.n	8003372 <TIM_OC3_SetConfig+0x9e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a19      	ldr	r2, [pc, #100]	; (80033c4 <TIM_OC3_SetConfig+0xf0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <TIM_OC3_SetConfig+0x9e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <TIM_OC3_SetConfig+0xf4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d003      	beq.n	8003372 <TIM_OC3_SetConfig+0x9e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a17      	ldr	r2, [pc, #92]	; (80033cc <TIM_OC3_SetConfig+0xf8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d113      	bne.n	800339a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	621a      	str	r2, [r3, #32]
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40014000 	.word	0x40014000
 80033c8:	40014400 	.word	0x40014400
 80033cc:	40014800 	.word	0x40014800

080033d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800341e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	031b      	lsls	r3, r3, #12
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a16      	ldr	r2, [pc, #88]	; (8003488 <TIM_OC4_SetConfig+0xb8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00b      	beq.n	800344c <TIM_OC4_SetConfig+0x7c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a15      	ldr	r2, [pc, #84]	; (800348c <TIM_OC4_SetConfig+0xbc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d007      	beq.n	800344c <TIM_OC4_SetConfig+0x7c>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a14      	ldr	r2, [pc, #80]	; (8003490 <TIM_OC4_SetConfig+0xc0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_OC4_SetConfig+0x7c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a13      	ldr	r2, [pc, #76]	; (8003494 <TIM_OC4_SetConfig+0xc4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d109      	bne.n	8003460 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	019b      	lsls	r3, r3, #6
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40014000 	.word	0x40014000
 8003490:	40014400 	.word	0x40014400
 8003494:	40014800 	.word	0x40014800

08003498 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a15      	ldr	r2, [pc, #84]	; (8003544 <TIM_OC5_SetConfig+0xac>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00b      	beq.n	800350a <TIM_OC5_SetConfig+0x72>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a14      	ldr	r2, [pc, #80]	; (8003548 <TIM_OC5_SetConfig+0xb0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d007      	beq.n	800350a <TIM_OC5_SetConfig+0x72>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a13      	ldr	r2, [pc, #76]	; (800354c <TIM_OC5_SetConfig+0xb4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <TIM_OC5_SetConfig+0x72>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a12      	ldr	r2, [pc, #72]	; (8003550 <TIM_OC5_SetConfig+0xb8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d109      	bne.n	800351e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003510:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	621a      	str	r2, [r3, #32]
}
 8003538:	bf00      	nop
 800353a:	371c      	adds	r7, #28
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	40012c00 	.word	0x40012c00
 8003548:	40014000 	.word	0x40014000
 800354c:	40014400 	.word	0x40014400
 8003550:	40014800 	.word	0x40014800

08003554 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800359a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	051b      	lsls	r3, r3, #20
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a16      	ldr	r2, [pc, #88]	; (8003604 <TIM_OC6_SetConfig+0xb0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00b      	beq.n	80035c8 <TIM_OC6_SetConfig+0x74>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a15      	ldr	r2, [pc, #84]	; (8003608 <TIM_OC6_SetConfig+0xb4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <TIM_OC6_SetConfig+0x74>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a14      	ldr	r2, [pc, #80]	; (800360c <TIM_OC6_SetConfig+0xb8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_OC6_SetConfig+0x74>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a13      	ldr	r2, [pc, #76]	; (8003610 <TIM_OC6_SetConfig+0xbc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d109      	bne.n	80035dc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	029b      	lsls	r3, r3, #10
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	621a      	str	r2, [r3, #32]
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40012c00 	.word	0x40012c00
 8003608:	40014000 	.word	0x40014000
 800360c:	40014400 	.word	0x40014400
 8003610:	40014800 	.word	0x40014800

08003614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f023 0201 	bic.w	r2, r3, #1
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800363e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f023 030a 	bic.w	r3, r3, #10
 8003650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	621a      	str	r2, [r3, #32]
}
 8003666:	bf00      	nop
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003672:	b480      	push	{r7}
 8003674:	b087      	sub	sp, #28
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	f023 0210 	bic.w	r2, r3, #16
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800369c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	031b      	lsls	r3, r3, #12
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b085      	sub	sp, #20
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f043 0307 	orr.w	r3, r3, #7
 80036f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	609a      	str	r2, [r3, #8]
}
 80036fc:	bf00      	nop
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	021a      	lsls	r2, r3, #8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	431a      	orrs	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4313      	orrs	r3, r2
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	609a      	str	r2, [r3, #8]
}
 800373c:	bf00      	nop
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	2201      	movs	r2, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a1a      	ldr	r2, [r3, #32]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	43db      	mvns	r3, r3
 800376a:	401a      	ands	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a1a      	ldr	r2, [r3, #32]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	431a      	orrs	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	621a      	str	r2, [r3, #32]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e04f      	b.n	800384c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a21      	ldr	r2, [pc, #132]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d108      	bne.n	80037e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a14      	ldr	r2, [pc, #80]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d009      	beq.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003814:	d004      	beq.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a10      	ldr	r2, [pc, #64]	; (800385c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d10c      	bne.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003826:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	4313      	orrs	r3, r2
 8003830:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40014000 	.word	0x40014000

08003860 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003878:	2302      	movs	r3, #2
 800387a:	e060      	b.n	800393e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a14      	ldr	r2, [pc, #80]	; (800394c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d115      	bne.n	800392c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	051b      	lsls	r3, r3, #20
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40012c00 	.word	0x40012c00

08003950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800399a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800399e:	2b84      	cmp	r3, #132	; 0x84
 80039a0:	d005      	beq.n	80039ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80039a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4413      	add	r3, r2
 80039aa:	3303      	adds	r3, #3
 80039ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80039ae:	68fb      	ldr	r3, [r7, #12]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80039c0:	f000 ffb8 	bl	8004934 <vTaskStartScheduler>
  
  return osOK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	bd80      	pop	{r7, pc}

080039ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80039ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039cc:	b089      	sub	sp, #36	; 0x24
 80039ce:	af04      	add	r7, sp, #16
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d020      	beq.n	8003a1e <osThreadCreate+0x54>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d01c      	beq.n	8003a1e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685c      	ldr	r4, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681d      	ldr	r5, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691e      	ldr	r6, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff ffc8 	bl	800398c <makeFreeRtosPriority>
 80039fc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a06:	9202      	str	r2, [sp, #8]
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	9100      	str	r1, [sp, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	4632      	mov	r2, r6
 8003a10:	4629      	mov	r1, r5
 8003a12:	4620      	mov	r0, r4
 8003a14:	f000 fdd0 	bl	80045b8 <xTaskCreateStatic>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e01c      	b.n	8003a58 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685c      	ldr	r4, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a2a:	b29e      	uxth	r6, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff ffaa 	bl	800398c <makeFreeRtosPriority>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	f107 030c 	add.w	r3, r7, #12
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	9200      	str	r2, [sp, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	4632      	mov	r2, r6
 8003a46:	4629      	mov	r1, r5
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f000 fe11 	bl	8004670 <xTaskCreate>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d001      	beq.n	8003a58 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003a58:	68fb      	ldr	r3, [r7, #12]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a62 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <osDelay+0x16>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	e000      	b.n	8003a7a <osDelay+0x18>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 ff26 	bl	80048cc <vTaskDelay>
  
  return osOK;
 8003a80:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f103 0208 	add.w	r2, r3, #8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f103 0208 	add.w	r2, r3, #8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f103 0208 	add.w	r2, r3, #8
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	601a      	str	r2, [r3, #0]
}
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b42:	d103      	bne.n	8003b4c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	e00c      	b.n	8003b66 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3308      	adds	r3, #8
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	e002      	b.n	8003b5a <vListInsert+0x2e>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d2f6      	bcs.n	8003b54 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	601a      	str	r2, [r3, #0]
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6892      	ldr	r2, [r2, #8]
 8003bb4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6852      	ldr	r2, [r2, #4]
 8003bbe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d103      	bne.n	8003bd2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	1e5a      	subs	r2, r3, #1
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10a      	bne.n	8003c1e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c1a:	bf00      	nop
 8003c1c:	e7fe      	b.n	8003c1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c1e:	f002 f801 	bl	8005c24 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	68f9      	ldr	r1, [r7, #12]
 8003c2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	441a      	add	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	68f9      	ldr	r1, [r7, #12]
 8003c52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	441a      	add	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	22ff      	movs	r2, #255	; 0xff
 8003c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	22ff      	movs	r2, #255	; 0xff
 8003c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d114      	bne.n	8003c9e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01a      	beq.n	8003cb2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3310      	adds	r3, #16
 8003c80:	4618      	mov	r0, r3
 8003c82:	f001 f8e1 	bl	8004e48 <xTaskRemoveFromEventList>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d012      	beq.n	8003cb2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c8c:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <xQueueGenericReset+0xcc>)
 8003c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	e009      	b.n	8003cb2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3310      	adds	r3, #16
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fef1 	bl	8003a8a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3324      	adds	r3, #36	; 0x24
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff feec 	bl	8003a8a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cb2:	f001 ffe7 	bl	8005c84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cb6:	2301      	movs	r3, #1
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	e000ed04 	.word	0xe000ed04

08003cc4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08e      	sub	sp, #56	; 0x38
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10a      	bne.n	8003cee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003cea:	bf00      	nop
 8003cec:	e7fe      	b.n	8003cec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10a      	bne.n	8003d0a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d06:	bf00      	nop
 8003d08:	e7fe      	b.n	8003d08 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <xQueueGenericCreateStatic+0x52>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <xQueueGenericCreateStatic+0x56>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <xQueueGenericCreateStatic+0x58>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	623b      	str	r3, [r7, #32]
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d102      	bne.n	8003d42 <xQueueGenericCreateStatic+0x7e>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <xQueueGenericCreateStatic+0x82>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <xQueueGenericCreateStatic+0x84>
 8003d46:	2300      	movs	r3, #0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	61fb      	str	r3, [r7, #28]
}
 8003d5e:	bf00      	nop
 8003d60:	e7fe      	b.n	8003d60 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d62:	2348      	movs	r3, #72	; 0x48
 8003d64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b48      	cmp	r3, #72	; 0x48
 8003d6a:	d00a      	beq.n	8003d82 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	61bb      	str	r3, [r7, #24]
}
 8003d7e:	bf00      	nop
 8003d80:	e7fe      	b.n	8003d80 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00d      	beq.n	8003da8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d94:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f805 	bl	8003db2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3730      	adds	r7, #48	; 0x30
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	e002      	b.n	8003dd4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003de0:	2101      	movs	r1, #1
 8003de2:	69b8      	ldr	r0, [r7, #24]
 8003de4:	f7ff ff06 	bl	8003bf4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003de8:	bf00      	nop
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08e      	sub	sp, #56	; 0x38
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <xQueueGenericSend+0x32>
	__asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e1e:	bf00      	nop
 8003e20:	e7fe      	b.n	8003e20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d103      	bne.n	8003e30 <xQueueGenericSend+0x40>
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <xQueueGenericSend+0x44>
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <xQueueGenericSend+0x46>
 8003e34:	2300      	movs	r3, #0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10a      	bne.n	8003e50 <xQueueGenericSend+0x60>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e4c:	bf00      	nop
 8003e4e:	e7fe      	b.n	8003e4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d103      	bne.n	8003e5e <xQueueGenericSend+0x6e>
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <xQueueGenericSend+0x72>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <xQueueGenericSend+0x74>
 8003e62:	2300      	movs	r3, #0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <xQueueGenericSend+0x8e>
	__asm volatile
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	623b      	str	r3, [r7, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	e7fe      	b.n	8003e7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e7e:	f001 f9a5 	bl	80051cc <xTaskGetSchedulerState>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d102      	bne.n	8003e8e <xQueueGenericSend+0x9e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <xQueueGenericSend+0xa2>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <xQueueGenericSend+0xa4>
 8003e92:	2300      	movs	r3, #0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <xQueueGenericSend+0xbe>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	61fb      	str	r3, [r7, #28]
}
 8003eaa:	bf00      	nop
 8003eac:	e7fe      	b.n	8003eac <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003eae:	f001 feb9 	bl	8005c24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d302      	bcc.n	8003ec4 <xQueueGenericSend+0xd4>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d129      	bne.n	8003f18 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eca:	f000 fa07 	bl	80042dc <prvCopyDataToQueue>
 8003ece:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d010      	beq.n	8003efa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	3324      	adds	r3, #36	; 0x24
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 ffb3 	bl	8004e48 <xTaskRemoveFromEventList>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d013      	beq.n	8003f10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ee8:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <xQueueGenericSend+0x1f8>)
 8003eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	e00a      	b.n	8003f10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d007      	beq.n	8003f10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f00:	4b39      	ldr	r3, [pc, #228]	; (8003fe8 <xQueueGenericSend+0x1f8>)
 8003f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f10:	f001 feb8 	bl	8005c84 <vPortExitCritical>
				return pdPASS;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e063      	b.n	8003fe0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f1e:	f001 feb1 	bl	8005c84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	e05c      	b.n	8003fe0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d106      	bne.n	8003f3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f2c:	f107 0314 	add.w	r3, r7, #20
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 ffeb 	bl	8004f0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f36:	2301      	movs	r3, #1
 8003f38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f3a:	f001 fea3 	bl	8005c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f3e:	f000 fd5f 	bl	8004a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f42:	f001 fe6f 	bl	8005c24 <vPortEnterCritical>
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f4c:	b25b      	sxtb	r3, r3
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d103      	bne.n	8003f5c <xQueueGenericSend+0x16c>
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f62:	b25b      	sxtb	r3, r3
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d103      	bne.n	8003f72 <xQueueGenericSend+0x182>
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f72:	f001 fe87 	bl	8005c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f76:	1d3a      	adds	r2, r7, #4
 8003f78:	f107 0314 	add.w	r3, r7, #20
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 ffda 	bl	8004f38 <xTaskCheckForTimeOut>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d124      	bne.n	8003fd4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f8c:	f000 fa9e 	bl	80044cc <prvIsQueueFull>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d018      	beq.n	8003fc8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	3310      	adds	r3, #16
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 ff02 	bl	8004da8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fa6:	f000 fa29 	bl	80043fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003faa:	f000 fd37 	bl	8004a1c <xTaskResumeAll>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f47f af7c 	bne.w	8003eae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003fb6:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <xQueueGenericSend+0x1f8>)
 8003fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	e772      	b.n	8003eae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fca:	f000 fa17 	bl	80043fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fce:	f000 fd25 	bl	8004a1c <xTaskResumeAll>
 8003fd2:	e76c      	b.n	8003eae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fd6:	f000 fa11 	bl	80043fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fda:	f000 fd1f 	bl	8004a1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003fde:	2300      	movs	r3, #0
		}
	}
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3738      	adds	r7, #56	; 0x38
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	e000ed04 	.word	0xe000ed04

08003fec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08e      	sub	sp, #56	; 0x38
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10a      	bne.n	800401a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004016:	bf00      	nop
 8004018:	e7fe      	b.n	8004018 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d103      	bne.n	8004028 <xQueueGenericSendFromISR+0x3c>
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <xQueueGenericSendFromISR+0x40>
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <xQueueGenericSendFromISR+0x42>
 800402c:	2300      	movs	r3, #0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10a      	bne.n	8004048 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	623b      	str	r3, [r7, #32]
}
 8004044:	bf00      	nop
 8004046:	e7fe      	b.n	8004046 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d103      	bne.n	8004056 <xQueueGenericSendFromISR+0x6a>
 800404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <xQueueGenericSendFromISR+0x6e>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <xQueueGenericSendFromISR+0x70>
 800405a:	2300      	movs	r3, #0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	61fb      	str	r3, [r7, #28]
}
 8004072:	bf00      	nop
 8004074:	e7fe      	b.n	8004074 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004076:	f001 feb7 	bl	8005de8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800407a:	f3ef 8211 	mrs	r2, BASEPRI
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	61ba      	str	r2, [r7, #24]
 8004090:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004092:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409e:	429a      	cmp	r2, r3
 80040a0:	d302      	bcc.n	80040a8 <xQueueGenericSendFromISR+0xbc>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d12c      	bne.n	8004102 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040b8:	f000 f910 	bl	80042dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80040bc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d112      	bne.n	80040ec <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d016      	beq.n	80040fc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	3324      	adds	r3, #36	; 0x24
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 feb8 	bl	8004e48 <xTaskRemoveFromEventList>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00e      	beq.n	80040fc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00b      	beq.n	80040fc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	e007      	b.n	80040fc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040f0:	3301      	adds	r3, #1
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	b25a      	sxtb	r2, r3
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80040fc:	2301      	movs	r3, #1
 80040fe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004100:	e001      	b.n	8004106 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004102:	2300      	movs	r3, #0
 8004104:	637b      	str	r3, [r7, #52]	; 0x34
 8004106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004108:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004110:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004114:	4618      	mov	r0, r3
 8004116:	3738      	adds	r7, #56	; 0x38
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08c      	sub	sp, #48	; 0x30
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004128:	2300      	movs	r3, #0
 800412a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <xQueueReceive+0x30>
	__asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	623b      	str	r3, [r7, #32]
}
 8004148:	bf00      	nop
 800414a:	e7fe      	b.n	800414a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d103      	bne.n	800415a <xQueueReceive+0x3e>
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <xQueueReceive+0x42>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <xQueueReceive+0x44>
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <xQueueReceive+0x5e>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	61fb      	str	r3, [r7, #28]
}
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800417a:	f001 f827 	bl	80051cc <xTaskGetSchedulerState>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d102      	bne.n	800418a <xQueueReceive+0x6e>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <xQueueReceive+0x72>
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <xQueueReceive+0x74>
 800418e:	2300      	movs	r3, #0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <xQueueReceive+0x8e>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	61bb      	str	r3, [r7, #24]
}
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80041aa:	f001 fd3b 	bl	8005c24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01f      	beq.n	80041fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041be:	f000 f8f7 	bl	80043b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	1e5a      	subs	r2, r3, #1
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00f      	beq.n	80041f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	3310      	adds	r3, #16
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fe36 	bl	8004e48 <xTaskRemoveFromEventList>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041e2:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <xQueueReceive+0x1bc>)
 80041e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041f2:	f001 fd47 	bl	8005c84 <vPortExitCritical>
				return pdPASS;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e069      	b.n	80042ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d103      	bne.n	8004208 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004200:	f001 fd40 	bl	8005c84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004204:	2300      	movs	r3, #0
 8004206:	e062      	b.n	80042ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800420e:	f107 0310 	add.w	r3, r7, #16
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fe7a 	bl	8004f0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004218:	2301      	movs	r3, #1
 800421a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800421c:	f001 fd32 	bl	8005c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004220:	f000 fbee 	bl	8004a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004224:	f001 fcfe 	bl	8005c24 <vPortEnterCritical>
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800422e:	b25b      	sxtb	r3, r3
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d103      	bne.n	800423e <xQueueReceive+0x122>
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004244:	b25b      	sxtb	r3, r3
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424a:	d103      	bne.n	8004254 <xQueueReceive+0x138>
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004254:	f001 fd16 	bl	8005c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004258:	1d3a      	adds	r2, r7, #4
 800425a:	f107 0310 	add.w	r3, r7, #16
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fe69 	bl	8004f38 <xTaskCheckForTimeOut>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d123      	bne.n	80042b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800426c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800426e:	f000 f917 	bl	80044a0 <prvIsQueueEmpty>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d017      	beq.n	80042a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427a:	3324      	adds	r3, #36	; 0x24
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	4611      	mov	r1, r2
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fd91 	bl	8004da8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004288:	f000 f8b8 	bl	80043fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800428c:	f000 fbc6 	bl	8004a1c <xTaskResumeAll>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d189      	bne.n	80041aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004296:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <xQueueReceive+0x1bc>)
 8004298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	e780      	b.n	80041aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042aa:	f000 f8a7 	bl	80043fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042ae:	f000 fbb5 	bl	8004a1c <xTaskResumeAll>
 80042b2:	e77a      	b.n	80041aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042b6:	f000 f8a1 	bl	80043fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042ba:	f000 fbaf 	bl	8004a1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042c0:	f000 f8ee 	bl	80044a0 <prvIsQueueEmpty>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f43f af6f 	beq.w	80041aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3730      	adds	r7, #48	; 0x30
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10d      	bne.n	8004316 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d14d      	bne.n	800439e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	4618      	mov	r0, r3
 8004308:	f000 ff7e 	bl	8005208 <xTaskPriorityDisinherit>
 800430c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	605a      	str	r2, [r3, #4]
 8004314:	e043      	b.n	800439e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d119      	bne.n	8004350 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6898      	ldr	r0, [r3, #8]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	461a      	mov	r2, r3
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	f001 ff9c 	bl	8006264 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	441a      	add	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	d32b      	bcc.n	800439e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	609a      	str	r2, [r3, #8]
 800434e:	e026      	b.n	800439e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68d8      	ldr	r0, [r3, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	461a      	mov	r2, r3
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	f001 ff82 	bl	8006264 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	425b      	negs	r3, r3
 800436a:	441a      	add	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d207      	bcs.n	800438c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	425b      	negs	r3, r3
 8004386:	441a      	add	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d105      	bne.n	800439e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	3b01      	subs	r3, #1
 800439c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80043a6:	697b      	ldr	r3, [r7, #20]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d018      	beq.n	80043f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	441a      	add	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d303      	bcc.n	80043e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68d9      	ldr	r1, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	461a      	mov	r2, r3
 80043ee:	6838      	ldr	r0, [r7, #0]
 80043f0:	f001 ff38 	bl	8006264 <memcpy>
	}
}
 80043f4:	bf00      	nop
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004404:	f001 fc0e 	bl	8005c24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800440e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004410:	e011      	b.n	8004436 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	2b00      	cmp	r3, #0
 8004418:	d012      	beq.n	8004440 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3324      	adds	r3, #36	; 0x24
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fd12 	bl	8004e48 <xTaskRemoveFromEventList>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800442a:	f000 fde7 	bl	8004ffc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	3b01      	subs	r3, #1
 8004432:	b2db      	uxtb	r3, r3
 8004434:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800443a:	2b00      	cmp	r3, #0
 800443c:	dce9      	bgt.n	8004412 <prvUnlockQueue+0x16>
 800443e:	e000      	b.n	8004442 <prvUnlockQueue+0x46>
					break;
 8004440:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	22ff      	movs	r2, #255	; 0xff
 8004446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800444a:	f001 fc1b 	bl	8005c84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800444e:	f001 fbe9 	bl	8005c24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004458:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800445a:	e011      	b.n	8004480 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d012      	beq.n	800448a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3310      	adds	r3, #16
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fced 	bl	8004e48 <xTaskRemoveFromEventList>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004474:	f000 fdc2 	bl	8004ffc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004478:	7bbb      	ldrb	r3, [r7, #14]
 800447a:	3b01      	subs	r3, #1
 800447c:	b2db      	uxtb	r3, r3
 800447e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004484:	2b00      	cmp	r3, #0
 8004486:	dce9      	bgt.n	800445c <prvUnlockQueue+0x60>
 8004488:	e000      	b.n	800448c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800448a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	22ff      	movs	r2, #255	; 0xff
 8004490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004494:	f001 fbf6 	bl	8005c84 <vPortExitCritical>
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044a8:	f001 fbbc 	bl	8005c24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d102      	bne.n	80044ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044b4:	2301      	movs	r3, #1
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	e001      	b.n	80044be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044be:	f001 fbe1 	bl	8005c84 <vPortExitCritical>

	return xReturn;
 80044c2:	68fb      	ldr	r3, [r7, #12]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044d4:	f001 fba6 	bl	8005c24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d102      	bne.n	80044ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044e4:	2301      	movs	r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	e001      	b.n	80044ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044ee:	f001 fbc9 	bl	8005c84 <vPortExitCritical>

	return xReturn;
 80044f2:	68fb      	ldr	r3, [r7, #12]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	e014      	b.n	8004536 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800450c:	4a0f      	ldr	r2, [pc, #60]	; (800454c <vQueueAddToRegistry+0x50>)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10b      	bne.n	8004530 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004518:	490c      	ldr	r1, [pc, #48]	; (800454c <vQueueAddToRegistry+0x50>)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004522:	4a0a      	ldr	r2, [pc, #40]	; (800454c <vQueueAddToRegistry+0x50>)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	4413      	add	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800452e:	e006      	b.n	800453e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3301      	adds	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b07      	cmp	r3, #7
 800453a:	d9e7      	bls.n	800450c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	20000378 	.word	0x20000378

08004550 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004560:	f001 fb60 	bl	8005c24 <vPortEnterCritical>
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800456a:	b25b      	sxtb	r3, r3
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d103      	bne.n	800457a <vQueueWaitForMessageRestricted+0x2a>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004580:	b25b      	sxtb	r3, r3
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d103      	bne.n	8004590 <vQueueWaitForMessageRestricted+0x40>
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004590:	f001 fb78 	bl	8005c84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	2b00      	cmp	r3, #0
 800459a:	d106      	bne.n	80045aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	3324      	adds	r3, #36	; 0x24
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fc23 	bl	8004df0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80045aa:	6978      	ldr	r0, [r7, #20]
 80045ac:	f7ff ff26 	bl	80043fc <prvUnlockQueue>
	}
 80045b0:	bf00      	nop
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08e      	sub	sp, #56	; 0x38
 80045bc:	af04      	add	r7, sp, #16
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	623b      	str	r3, [r7, #32]
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80045e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <xTaskCreateStatic+0x46>
	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	61fb      	str	r3, [r7, #28]
}
 80045fa:	bf00      	nop
 80045fc:	e7fe      	b.n	80045fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045fe:	2354      	movs	r3, #84	; 0x54
 8004600:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b54      	cmp	r3, #84	; 0x54
 8004606:	d00a      	beq.n	800461e <xTaskCreateStatic+0x66>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	61bb      	str	r3, [r7, #24]
}
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01e      	beq.n	8004662 <xTaskCreateStatic+0xaa>
 8004624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004626:	2b00      	cmp	r3, #0
 8004628:	d01b      	beq.n	8004662 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004632:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	2202      	movs	r2, #2
 8004638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800463c:	2300      	movs	r3, #0
 800463e:	9303      	str	r3, [sp, #12]
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	9302      	str	r3, [sp, #8]
 8004644:	f107 0314 	add.w	r3, r7, #20
 8004648:	9301      	str	r3, [sp, #4]
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f850 	bl	80046fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800465a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800465c:	f000 f8cc 	bl	80047f8 <prvAddNewTaskToReadyList>
 8004660:	e001      	b.n	8004666 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004666:	697b      	ldr	r3, [r7, #20]
	}
 8004668:	4618      	mov	r0, r3
 800466a:	3728      	adds	r7, #40	; 0x28
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08c      	sub	sp, #48	; 0x30
 8004674:	af04      	add	r7, sp, #16
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	4613      	mov	r3, r2
 800467e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4618      	mov	r0, r3
 8004686:	f001 fbef 	bl	8005e68 <pvPortMalloc>
 800468a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00e      	beq.n	80046b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004692:	2054      	movs	r0, #84	; 0x54
 8004694:	f001 fbe8 	bl	8005e68 <pvPortMalloc>
 8004698:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
 80046a6:	e005      	b.n	80046b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046a8:	6978      	ldr	r0, [r7, #20]
 80046aa:	f001 fca1 	bl	8005ff0 <vPortFree>
 80046ae:	e001      	b.n	80046b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d017      	beq.n	80046ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046c2:	88fa      	ldrh	r2, [r7, #6]
 80046c4:	2300      	movs	r3, #0
 80046c6:	9303      	str	r3, [sp, #12]
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	9302      	str	r3, [sp, #8]
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f80e 	bl	80046fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046de:	69f8      	ldr	r0, [r7, #28]
 80046e0:	f000 f88a 	bl	80047f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046e4:	2301      	movs	r3, #1
 80046e6:	61bb      	str	r3, [r7, #24]
 80046e8:	e002      	b.n	80046f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046ea:	f04f 33ff 	mov.w	r3, #4294967295
 80046ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046f0:	69bb      	ldr	r3, [r7, #24]
	}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b088      	sub	sp, #32
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004712:	3b01      	subs	r3, #1
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	f023 0307 	bic.w	r3, r3, #7
 8004720:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <prvInitialiseNewTask+0x48>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	617b      	str	r3, [r7, #20]
}
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
 8004746:	e012      	b.n	800476e <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	4413      	add	r3, r2
 800474e:	7819      	ldrb	r1, [r3, #0]
 8004750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	4413      	add	r3, r2
 8004756:	3334      	adds	r3, #52	; 0x34
 8004758:	460a      	mov	r2, r1
 800475a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	4413      	add	r3, r2
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d006      	beq.n	8004776 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	3301      	adds	r3, #1
 800476c:	61fb      	str	r3, [r7, #28]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	2b0f      	cmp	r3, #15
 8004772:	d9e9      	bls.n	8004748 <prvInitialiseNewTask+0x4e>
 8004774:	e000      	b.n	8004778 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004776:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004782:	2b06      	cmp	r3, #6
 8004784:	d901      	bls.n	800478a <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004786:	2306      	movs	r3, #6
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800478e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004794:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	2200      	movs	r2, #0
 800479a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479e:	3304      	adds	r3, #4
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff f992 	bl	8003aca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	3318      	adds	r3, #24
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff f98d 	bl	8003aca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	f1c3 0207 	rsb	r2, r3, #7
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047c4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	2200      	movs	r2, #0
 80047ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	69b8      	ldr	r0, [r7, #24]
 80047da:	f001 f8f9 	bl	80059d0 <pxPortInitialiseStack>
 80047de:	4602      	mov	r2, r0
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80047e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047f0:	bf00      	nop
 80047f2:	3720      	adds	r7, #32
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004800:	f001 fa10 	bl	8005c24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004804:	4b2a      	ldr	r3, [pc, #168]	; (80048b0 <prvAddNewTaskToReadyList+0xb8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3301      	adds	r3, #1
 800480a:	4a29      	ldr	r2, [pc, #164]	; (80048b0 <prvAddNewTaskToReadyList+0xb8>)
 800480c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800480e:	4b29      	ldr	r3, [pc, #164]	; (80048b4 <prvAddNewTaskToReadyList+0xbc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004816:	4a27      	ldr	r2, [pc, #156]	; (80048b4 <prvAddNewTaskToReadyList+0xbc>)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800481c:	4b24      	ldr	r3, [pc, #144]	; (80048b0 <prvAddNewTaskToReadyList+0xb8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d110      	bne.n	8004846 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004824:	f000 fc0e 	bl	8005044 <prvInitialiseTaskLists>
 8004828:	e00d      	b.n	8004846 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800482a:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <prvAddNewTaskToReadyList+0xc0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004832:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <prvAddNewTaskToReadyList+0xbc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	429a      	cmp	r2, r3
 800483e:	d802      	bhi.n	8004846 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004840:	4a1c      	ldr	r2, [pc, #112]	; (80048b4 <prvAddNewTaskToReadyList+0xbc>)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004846:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <prvAddNewTaskToReadyList+0xc4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3301      	adds	r3, #1
 800484c:	4a1b      	ldr	r2, [pc, #108]	; (80048bc <prvAddNewTaskToReadyList+0xc4>)
 800484e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	2201      	movs	r2, #1
 8004856:	409a      	lsls	r2, r3
 8004858:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <prvAddNewTaskToReadyList+0xc8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4313      	orrs	r3, r2
 800485e:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <prvAddNewTaskToReadyList+0xc8>)
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4a15      	ldr	r2, [pc, #84]	; (80048c4 <prvAddNewTaskToReadyList+0xcc>)
 8004870:	441a      	add	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3304      	adds	r3, #4
 8004876:	4619      	mov	r1, r3
 8004878:	4610      	mov	r0, r2
 800487a:	f7ff f933 	bl	8003ae4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800487e:	f001 fa01 	bl	8005c84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004882:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <prvAddNewTaskToReadyList+0xc0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00e      	beq.n	80048a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <prvAddNewTaskToReadyList+0xbc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	429a      	cmp	r2, r3
 8004896:	d207      	bcs.n	80048a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <prvAddNewTaskToReadyList+0xd0>)
 800489a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048a8:	bf00      	nop
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	200004b8 	.word	0x200004b8
 80048b4:	200003b8 	.word	0x200003b8
 80048b8:	200004c4 	.word	0x200004c4
 80048bc:	200004d4 	.word	0x200004d4
 80048c0:	200004c0 	.word	0x200004c0
 80048c4:	200003bc 	.word	0x200003bc
 80048c8:	e000ed04 	.word	0xe000ed04

080048cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d017      	beq.n	800490e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048de:	4b13      	ldr	r3, [pc, #76]	; (800492c <vTaskDelay+0x60>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <vTaskDelay+0x30>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	60bb      	str	r3, [r7, #8]
}
 80048f8:	bf00      	nop
 80048fa:	e7fe      	b.n	80048fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80048fc:	f000 f880 	bl	8004a00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004900:	2100      	movs	r1, #0
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fd06 	bl	8005314 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004908:	f000 f888 	bl	8004a1c <xTaskResumeAll>
 800490c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d107      	bne.n	8004924 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <vTaskDelay+0x64>)
 8004916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	200004e0 	.word	0x200004e0
 8004930:	e000ed04 	.word	0xe000ed04

08004934 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08a      	sub	sp, #40	; 0x28
 8004938:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004942:	463a      	mov	r2, r7
 8004944:	1d39      	adds	r1, r7, #4
 8004946:	f107 0308 	add.w	r3, r7, #8
 800494a:	4618      	mov	r0, r3
 800494c:	f7fb fc40 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004950:	6839      	ldr	r1, [r7, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	9202      	str	r2, [sp, #8]
 8004958:	9301      	str	r3, [sp, #4]
 800495a:	2300      	movs	r3, #0
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	2300      	movs	r3, #0
 8004960:	460a      	mov	r2, r1
 8004962:	4921      	ldr	r1, [pc, #132]	; (80049e8 <vTaskStartScheduler+0xb4>)
 8004964:	4821      	ldr	r0, [pc, #132]	; (80049ec <vTaskStartScheduler+0xb8>)
 8004966:	f7ff fe27 	bl	80045b8 <xTaskCreateStatic>
 800496a:	4603      	mov	r3, r0
 800496c:	4a20      	ldr	r2, [pc, #128]	; (80049f0 <vTaskStartScheduler+0xbc>)
 800496e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004970:	4b1f      	ldr	r3, [pc, #124]	; (80049f0 <vTaskStartScheduler+0xbc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004978:	2301      	movs	r3, #1
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	e001      	b.n	8004982 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d102      	bne.n	800498e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004988:	f000 fd2a 	bl	80053e0 <xTimerCreateTimerTask>
 800498c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d116      	bne.n	80049c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	613b      	str	r3, [r7, #16]
}
 80049a6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049a8:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <vTaskStartScheduler+0xc0>)
 80049aa:	f04f 32ff 	mov.w	r2, #4294967295
 80049ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049b0:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <vTaskStartScheduler+0xc4>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <vTaskStartScheduler+0xc8>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049bc:	f001 f890 	bl	8005ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049c0:	e00e      	b.n	80049e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d10a      	bne.n	80049e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	60fb      	str	r3, [r7, #12]
}
 80049dc:	bf00      	nop
 80049de:	e7fe      	b.n	80049de <vTaskStartScheduler+0xaa>
}
 80049e0:	bf00      	nop
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	080062f8 	.word	0x080062f8
 80049ec:	08005015 	.word	0x08005015
 80049f0:	200004dc 	.word	0x200004dc
 80049f4:	200004d8 	.word	0x200004d8
 80049f8:	200004c4 	.word	0x200004c4
 80049fc:	200004bc 	.word	0x200004bc

08004a00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a04:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <vTaskSuspendAll+0x18>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	4a03      	ldr	r2, [pc, #12]	; (8004a18 <vTaskSuspendAll+0x18>)
 8004a0c:	6013      	str	r3, [r2, #0]
}
 8004a0e:	bf00      	nop
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	200004e0 	.word	0x200004e0

08004a1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a2a:	4b41      	ldr	r3, [pc, #260]	; (8004b30 <xTaskResumeAll+0x114>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10a      	bne.n	8004a48 <xTaskResumeAll+0x2c>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	603b      	str	r3, [r7, #0]
}
 8004a44:	bf00      	nop
 8004a46:	e7fe      	b.n	8004a46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a48:	f001 f8ec 	bl	8005c24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a4c:	4b38      	ldr	r3, [pc, #224]	; (8004b30 <xTaskResumeAll+0x114>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	4a37      	ldr	r2, [pc, #220]	; (8004b30 <xTaskResumeAll+0x114>)
 8004a54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a56:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <xTaskResumeAll+0x114>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d161      	bne.n	8004b22 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a5e:	4b35      	ldr	r3, [pc, #212]	; (8004b34 <xTaskResumeAll+0x118>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d05d      	beq.n	8004b22 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a66:	e02e      	b.n	8004ac6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004a68:	4b33      	ldr	r3, [pc, #204]	; (8004b38 <xTaskResumeAll+0x11c>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3318      	adds	r3, #24
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff f892 	bl	8003b9e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff f88d 	bl	8003b9e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	2201      	movs	r2, #1
 8004a8a:	409a      	lsls	r2, r3
 8004a8c:	4b2b      	ldr	r3, [pc, #172]	; (8004b3c <xTaskResumeAll+0x120>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	4a2a      	ldr	r2, [pc, #168]	; (8004b3c <xTaskResumeAll+0x120>)
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4a27      	ldr	r2, [pc, #156]	; (8004b40 <xTaskResumeAll+0x124>)
 8004aa4:	441a      	add	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f7ff f819 	bl	8003ae4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab6:	4b23      	ldr	r3, [pc, #140]	; (8004b44 <xTaskResumeAll+0x128>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d302      	bcc.n	8004ac6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004ac0:	4b21      	ldr	r3, [pc, #132]	; (8004b48 <xTaskResumeAll+0x12c>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ac6:	4b1c      	ldr	r3, [pc, #112]	; (8004b38 <xTaskResumeAll+0x11c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1cc      	bne.n	8004a68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ad4:	f000 fb54 	bl	8005180 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ad8:	4b1c      	ldr	r3, [pc, #112]	; (8004b4c <xTaskResumeAll+0x130>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d010      	beq.n	8004b06 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ae4:	f000 f846 	bl	8004b74 <xTaskIncrementTick>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004aee:	4b16      	ldr	r3, [pc, #88]	; (8004b48 <xTaskResumeAll+0x12c>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f1      	bne.n	8004ae4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004b00:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <xTaskResumeAll+0x130>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b06:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <xTaskResumeAll+0x12c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <xTaskResumeAll+0x134>)
 8004b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b22:	f001 f8af 	bl	8005c84 <vPortExitCritical>

	return xAlreadyYielded;
 8004b26:	68bb      	ldr	r3, [r7, #8]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	200004e0 	.word	0x200004e0
 8004b34:	200004b8 	.word	0x200004b8
 8004b38:	20000478 	.word	0x20000478
 8004b3c:	200004c0 	.word	0x200004c0
 8004b40:	200003bc 	.word	0x200003bc
 8004b44:	200003b8 	.word	0x200003b8
 8004b48:	200004cc 	.word	0x200004cc
 8004b4c:	200004c8 	.word	0x200004c8
 8004b50:	e000ed04 	.word	0xe000ed04

08004b54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b5a:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <xTaskGetTickCount+0x1c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b60:	687b      	ldr	r3, [r7, #4]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	200004bc 	.word	0x200004bc

08004b74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b7e:	4b51      	ldr	r3, [pc, #324]	; (8004cc4 <xTaskIncrementTick+0x150>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f040 808d 	bne.w	8004ca2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b88:	4b4f      	ldr	r3, [pc, #316]	; (8004cc8 <xTaskIncrementTick+0x154>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b90:	4a4d      	ldr	r2, [pc, #308]	; (8004cc8 <xTaskIncrementTick+0x154>)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d120      	bne.n	8004bde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b9c:	4b4b      	ldr	r3, [pc, #300]	; (8004ccc <xTaskIncrementTick+0x158>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <xTaskIncrementTick+0x48>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	603b      	str	r3, [r7, #0]
}
 8004bb8:	bf00      	nop
 8004bba:	e7fe      	b.n	8004bba <xTaskIncrementTick+0x46>
 8004bbc:	4b43      	ldr	r3, [pc, #268]	; (8004ccc <xTaskIncrementTick+0x158>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	4b43      	ldr	r3, [pc, #268]	; (8004cd0 <xTaskIncrementTick+0x15c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a41      	ldr	r2, [pc, #260]	; (8004ccc <xTaskIncrementTick+0x158>)
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	4a41      	ldr	r2, [pc, #260]	; (8004cd0 <xTaskIncrementTick+0x15c>)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	4b40      	ldr	r3, [pc, #256]	; (8004cd4 <xTaskIncrementTick+0x160>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	4a3f      	ldr	r2, [pc, #252]	; (8004cd4 <xTaskIncrementTick+0x160>)
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	f000 fad1 	bl	8005180 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bde:	4b3e      	ldr	r3, [pc, #248]	; (8004cd8 <xTaskIncrementTick+0x164>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d34d      	bcc.n	8004c84 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004be8:	4b38      	ldr	r3, [pc, #224]	; (8004ccc <xTaskIncrementTick+0x158>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <xTaskIncrementTick+0x82>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <xTaskIncrementTick+0x84>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d004      	beq.n	8004c06 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bfc:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <xTaskIncrementTick+0x164>)
 8004bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8004c02:	601a      	str	r2, [r3, #0]
					break;
 8004c04:	e03e      	b.n	8004c84 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c06:	4b31      	ldr	r3, [pc, #196]	; (8004ccc <xTaskIncrementTick+0x158>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d203      	bcs.n	8004c26 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c1e:	4a2e      	ldr	r2, [pc, #184]	; (8004cd8 <xTaskIncrementTick+0x164>)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6013      	str	r3, [r2, #0]
						break;
 8004c24:	e02e      	b.n	8004c84 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe ffb7 	bl	8003b9e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d004      	beq.n	8004c42 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	3318      	adds	r3, #24
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fe ffae 	bl	8003b9e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c46:	2201      	movs	r2, #1
 8004c48:	409a      	lsls	r2, r3
 8004c4a:	4b24      	ldr	r3, [pc, #144]	; (8004cdc <xTaskIncrementTick+0x168>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	4a22      	ldr	r2, [pc, #136]	; (8004cdc <xTaskIncrementTick+0x168>)
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4a1f      	ldr	r2, [pc, #124]	; (8004ce0 <xTaskIncrementTick+0x16c>)
 8004c62:	441a      	add	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	f7fe ff3a 	bl	8003ae4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c74:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <xTaskIncrementTick+0x170>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d3b4      	bcc.n	8004be8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c82:	e7b1      	b.n	8004be8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c84:	4b17      	ldr	r3, [pc, #92]	; (8004ce4 <xTaskIncrementTick+0x170>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8a:	4915      	ldr	r1, [pc, #84]	; (8004ce0 <xTaskIncrementTick+0x16c>)
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d907      	bls.n	8004cac <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	e004      	b.n	8004cac <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ca2:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <xTaskIncrementTick+0x174>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	4a0f      	ldr	r2, [pc, #60]	; (8004ce8 <xTaskIncrementTick+0x174>)
 8004caa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004cac:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <xTaskIncrementTick+0x178>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004cb8:	697b      	ldr	r3, [r7, #20]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	200004e0 	.word	0x200004e0
 8004cc8:	200004bc 	.word	0x200004bc
 8004ccc:	20000470 	.word	0x20000470
 8004cd0:	20000474 	.word	0x20000474
 8004cd4:	200004d0 	.word	0x200004d0
 8004cd8:	200004d8 	.word	0x200004d8
 8004cdc:	200004c0 	.word	0x200004c0
 8004ce0:	200003bc 	.word	0x200003bc
 8004ce4:	200003b8 	.word	0x200003b8
 8004ce8:	200004c8 	.word	0x200004c8
 8004cec:	200004cc 	.word	0x200004cc

08004cf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cf6:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <vTaskSwitchContext+0xa4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cfe:	4b26      	ldr	r3, [pc, #152]	; (8004d98 <vTaskSwitchContext+0xa8>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d04:	e03f      	b.n	8004d86 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004d06:	4b24      	ldr	r3, [pc, #144]	; (8004d98 <vTaskSwitchContext+0xa8>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004d0c:	4b23      	ldr	r3, [pc, #140]	; (8004d9c <vTaskSwitchContext+0xac>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	fab3 f383 	clz	r3, r3
 8004d18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d1a:	7afb      	ldrb	r3, [r7, #11]
 8004d1c:	f1c3 031f 	rsb	r3, r3, #31
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	491f      	ldr	r1, [pc, #124]	; (8004da0 <vTaskSwitchContext+0xb0>)
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	607b      	str	r3, [r7, #4]
}
 8004d48:	bf00      	nop
 8004d4a:	e7fe      	b.n	8004d4a <vTaskSwitchContext+0x5a>
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4a12      	ldr	r2, [pc, #72]	; (8004da0 <vTaskSwitchContext+0xb0>)
 8004d58:	4413      	add	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	605a      	str	r2, [r3, #4]
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d104      	bne.n	8004d7c <vTaskSwitchContext+0x8c>
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	605a      	str	r2, [r3, #4]
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	4a08      	ldr	r2, [pc, #32]	; (8004da4 <vTaskSwitchContext+0xb4>)
 8004d84:	6013      	str	r3, [r2, #0]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	200004e0 	.word	0x200004e0
 8004d98:	200004cc 	.word	0x200004cc
 8004d9c:	200004c0 	.word	0x200004c0
 8004da0:	200003bc 	.word	0x200003bc
 8004da4:	200003b8 	.word	0x200003b8

08004da8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	60fb      	str	r3, [r7, #12]
}
 8004dca:	bf00      	nop
 8004dcc:	e7fe      	b.n	8004dcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dce:	4b07      	ldr	r3, [pc, #28]	; (8004dec <vTaskPlaceOnEventList+0x44>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3318      	adds	r3, #24
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fe fea8 	bl	8003b2c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ddc:	2101      	movs	r1, #1
 8004dde:	6838      	ldr	r0, [r7, #0]
 8004de0:	f000 fa98 	bl	8005314 <prvAddCurrentTaskToDelayedList>
}
 8004de4:	bf00      	nop
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	200003b8 	.word	0x200003b8

08004df0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	617b      	str	r3, [r7, #20]
}
 8004e14:	bf00      	nop
 8004e16:	e7fe      	b.n	8004e16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <vTaskPlaceOnEventListRestricted+0x54>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3318      	adds	r3, #24
 8004e1e:	4619      	mov	r1, r3
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f7fe fe5f 	bl	8003ae4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	68b8      	ldr	r0, [r7, #8]
 8004e36:	f000 fa6d 	bl	8005314 <prvAddCurrentTaskToDelayedList>
	}
 8004e3a:	bf00      	nop
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	200003b8 	.word	0x200003b8

08004e48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10a      	bne.n	8004e74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	60fb      	str	r3, [r7, #12]
}
 8004e70:	bf00      	nop
 8004e72:	e7fe      	b.n	8004e72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	3318      	adds	r3, #24
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fe fe90 	bl	8003b9e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e7e:	4b1d      	ldr	r3, [pc, #116]	; (8004ef4 <xTaskRemoveFromEventList+0xac>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d11c      	bne.n	8004ec0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fe87 	bl	8003b9e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	2201      	movs	r2, #1
 8004e96:	409a      	lsls	r2, r3
 8004e98:	4b17      	ldr	r3, [pc, #92]	; (8004ef8 <xTaskRemoveFromEventList+0xb0>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	4a16      	ldr	r2, [pc, #88]	; (8004ef8 <xTaskRemoveFromEventList+0xb0>)
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4a13      	ldr	r2, [pc, #76]	; (8004efc <xTaskRemoveFromEventList+0xb4>)
 8004eb0:	441a      	add	r2, r3
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4610      	mov	r0, r2
 8004eba:	f7fe fe13 	bl	8003ae4 <vListInsertEnd>
 8004ebe:	e005      	b.n	8004ecc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	3318      	adds	r3, #24
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	480e      	ldr	r0, [pc, #56]	; (8004f00 <xTaskRemoveFromEventList+0xb8>)
 8004ec8:	f7fe fe0c 	bl	8003ae4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <xTaskRemoveFromEventList+0xbc>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d905      	bls.n	8004ee6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004eda:	2301      	movs	r3, #1
 8004edc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <xTaskRemoveFromEventList+0xc0>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	e001      	b.n	8004eea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004eea:	697b      	ldr	r3, [r7, #20]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	200004e0 	.word	0x200004e0
 8004ef8:	200004c0 	.word	0x200004c0
 8004efc:	200003bc 	.word	0x200003bc
 8004f00:	20000478 	.word	0x20000478
 8004f04:	200003b8 	.word	0x200003b8
 8004f08:	200004cc 	.word	0x200004cc

08004f0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <vTaskInternalSetTimeOutState+0x24>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f1c:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <vTaskInternalSetTimeOutState+0x28>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	605a      	str	r2, [r3, #4]
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	200004d0 	.word	0x200004d0
 8004f34:	200004bc 	.word	0x200004bc

08004f38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	613b      	str	r3, [r7, #16]
}
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10a      	bne.n	8004f7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	60fb      	str	r3, [r7, #12]
}
 8004f76:	bf00      	nop
 8004f78:	e7fe      	b.n	8004f78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004f7a:	f000 fe53 	bl	8005c24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f7e:	4b1d      	ldr	r3, [pc, #116]	; (8004ff4 <xTaskCheckForTimeOut+0xbc>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d102      	bne.n	8004f9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	61fb      	str	r3, [r7, #28]
 8004f9c:	e023      	b.n	8004fe6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4b15      	ldr	r3, [pc, #84]	; (8004ff8 <xTaskCheckForTimeOut+0xc0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d007      	beq.n	8004fba <xTaskCheckForTimeOut+0x82>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d302      	bcc.n	8004fba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	61fb      	str	r3, [r7, #28]
 8004fb8:	e015      	b.n	8004fe6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d20b      	bcs.n	8004fdc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	1ad2      	subs	r2, r2, r3
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff ff9b 	bl	8004f0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	e004      	b.n	8004fe6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004fe6:	f000 fe4d 	bl	8005c84 <vPortExitCritical>

	return xReturn;
 8004fea:	69fb      	ldr	r3, [r7, #28]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3720      	adds	r7, #32
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	200004bc 	.word	0x200004bc
 8004ff8:	200004d0 	.word	0x200004d0

08004ffc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005000:	4b03      	ldr	r3, [pc, #12]	; (8005010 <vTaskMissedYield+0x14>)
 8005002:	2201      	movs	r2, #1
 8005004:	601a      	str	r2, [r3, #0]
}
 8005006:	bf00      	nop
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	200004cc 	.word	0x200004cc

08005014 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800501c:	f000 f852 	bl	80050c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005020:	4b06      	ldr	r3, [pc, #24]	; (800503c <prvIdleTask+0x28>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d9f9      	bls.n	800501c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005028:	4b05      	ldr	r3, [pc, #20]	; (8005040 <prvIdleTask+0x2c>)
 800502a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005038:	e7f0      	b.n	800501c <prvIdleTask+0x8>
 800503a:	bf00      	nop
 800503c:	200003bc 	.word	0x200003bc
 8005040:	e000ed04 	.word	0xe000ed04

08005044 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800504a:	2300      	movs	r3, #0
 800504c:	607b      	str	r3, [r7, #4]
 800504e:	e00c      	b.n	800506a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4a12      	ldr	r2, [pc, #72]	; (80050a4 <prvInitialiseTaskLists+0x60>)
 800505c:	4413      	add	r3, r2
 800505e:	4618      	mov	r0, r3
 8005060:	f7fe fd13 	bl	8003a8a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3301      	adds	r3, #1
 8005068:	607b      	str	r3, [r7, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b06      	cmp	r3, #6
 800506e:	d9ef      	bls.n	8005050 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005070:	480d      	ldr	r0, [pc, #52]	; (80050a8 <prvInitialiseTaskLists+0x64>)
 8005072:	f7fe fd0a 	bl	8003a8a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005076:	480d      	ldr	r0, [pc, #52]	; (80050ac <prvInitialiseTaskLists+0x68>)
 8005078:	f7fe fd07 	bl	8003a8a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800507c:	480c      	ldr	r0, [pc, #48]	; (80050b0 <prvInitialiseTaskLists+0x6c>)
 800507e:	f7fe fd04 	bl	8003a8a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005082:	480c      	ldr	r0, [pc, #48]	; (80050b4 <prvInitialiseTaskLists+0x70>)
 8005084:	f7fe fd01 	bl	8003a8a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005088:	480b      	ldr	r0, [pc, #44]	; (80050b8 <prvInitialiseTaskLists+0x74>)
 800508a:	f7fe fcfe 	bl	8003a8a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800508e:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <prvInitialiseTaskLists+0x78>)
 8005090:	4a05      	ldr	r2, [pc, #20]	; (80050a8 <prvInitialiseTaskLists+0x64>)
 8005092:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005094:	4b0a      	ldr	r3, [pc, #40]	; (80050c0 <prvInitialiseTaskLists+0x7c>)
 8005096:	4a05      	ldr	r2, [pc, #20]	; (80050ac <prvInitialiseTaskLists+0x68>)
 8005098:	601a      	str	r2, [r3, #0]
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	200003bc 	.word	0x200003bc
 80050a8:	20000448 	.word	0x20000448
 80050ac:	2000045c 	.word	0x2000045c
 80050b0:	20000478 	.word	0x20000478
 80050b4:	2000048c 	.word	0x2000048c
 80050b8:	200004a4 	.word	0x200004a4
 80050bc:	20000470 	.word	0x20000470
 80050c0:	20000474 	.word	0x20000474

080050c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050ca:	e019      	b.n	8005100 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050cc:	f000 fdaa 	bl	8005c24 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80050d0:	4b10      	ldr	r3, [pc, #64]	; (8005114 <prvCheckTasksWaitingTermination+0x50>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3304      	adds	r3, #4
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fe fd5e 	bl	8003b9e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050e2:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <prvCheckTasksWaitingTermination+0x54>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	4a0b      	ldr	r2, [pc, #44]	; (8005118 <prvCheckTasksWaitingTermination+0x54>)
 80050ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <prvCheckTasksWaitingTermination+0x58>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	4a0a      	ldr	r2, [pc, #40]	; (800511c <prvCheckTasksWaitingTermination+0x58>)
 80050f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050f6:	f000 fdc5 	bl	8005c84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f810 	bl	8005120 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005100:	4b06      	ldr	r3, [pc, #24]	; (800511c <prvCheckTasksWaitingTermination+0x58>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e1      	bne.n	80050cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005108:	bf00      	nop
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	2000048c 	.word	0x2000048c
 8005118:	200004b8 	.word	0x200004b8
 800511c:	200004a0 	.word	0x200004a0

08005120 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800512e:	2b00      	cmp	r3, #0
 8005130:	d108      	bne.n	8005144 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	4618      	mov	r0, r3
 8005138:	f000 ff5a 	bl	8005ff0 <vPortFree>
				vPortFree( pxTCB );
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 ff57 	bl	8005ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005142:	e018      	b.n	8005176 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800514a:	2b01      	cmp	r3, #1
 800514c:	d103      	bne.n	8005156 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 ff4e 	bl	8005ff0 <vPortFree>
	}
 8005154:	e00f      	b.n	8005176 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800515c:	2b02      	cmp	r3, #2
 800515e:	d00a      	beq.n	8005176 <prvDeleteTCB+0x56>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	60fb      	str	r3, [r7, #12]
}
 8005172:	bf00      	nop
 8005174:	e7fe      	b.n	8005174 <prvDeleteTCB+0x54>
	}
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005186:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <prvResetNextTaskUnblockTime+0x44>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <prvResetNextTaskUnblockTime+0x14>
 8005190:	2301      	movs	r3, #1
 8005192:	e000      	b.n	8005196 <prvResetNextTaskUnblockTime+0x16>
 8005194:	2300      	movs	r3, #0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800519a:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <prvResetNextTaskUnblockTime+0x48>)
 800519c:	f04f 32ff 	mov.w	r2, #4294967295
 80051a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051a2:	e008      	b.n	80051b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80051a4:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <prvResetNextTaskUnblockTime+0x44>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	4a05      	ldr	r2, [pc, #20]	; (80051c8 <prvResetNextTaskUnblockTime+0x48>)
 80051b4:	6013      	str	r3, [r2, #0]
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	20000470 	.word	0x20000470
 80051c8:	200004d8 	.word	0x200004d8

080051cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051d2:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <xTaskGetSchedulerState+0x34>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d102      	bne.n	80051e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051da:	2301      	movs	r3, #1
 80051dc:	607b      	str	r3, [r7, #4]
 80051de:	e008      	b.n	80051f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051e0:	4b08      	ldr	r3, [pc, #32]	; (8005204 <xTaskGetSchedulerState+0x38>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d102      	bne.n	80051ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051e8:	2302      	movs	r3, #2
 80051ea:	607b      	str	r3, [r7, #4]
 80051ec:	e001      	b.n	80051f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051ee:	2300      	movs	r3, #0
 80051f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051f2:	687b      	ldr	r3, [r7, #4]
	}
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	200004c4 	.word	0x200004c4
 8005204:	200004e0 	.word	0x200004e0

08005208 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d06e      	beq.n	80052fc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800521e:	4b3a      	ldr	r3, [pc, #232]	; (8005308 <xTaskPriorityDisinherit+0x100>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	429a      	cmp	r2, r3
 8005226:	d00a      	beq.n	800523e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	60fb      	str	r3, [r7, #12]
}
 800523a:	bf00      	nop
 800523c:	e7fe      	b.n	800523c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	60bb      	str	r3, [r7, #8]
}
 8005258:	bf00      	nop
 800525a:	e7fe      	b.n	800525a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005260:	1e5a      	subs	r2, r3, #1
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	429a      	cmp	r2, r3
 8005270:	d044      	beq.n	80052fc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005276:	2b00      	cmp	r3, #0
 8005278:	d140      	bne.n	80052fc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3304      	adds	r3, #4
 800527e:	4618      	mov	r0, r3
 8005280:	f7fe fc8d 	bl	8003b9e <uxListRemove>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d115      	bne.n	80052b6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528e:	491f      	ldr	r1, [pc, #124]	; (800530c <xTaskPriorityDisinherit+0x104>)
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <xTaskPriorityDisinherit+0xae>
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	2201      	movs	r2, #1
 80052a6:	fa02 f303 	lsl.w	r3, r2, r3
 80052aa:	43da      	mvns	r2, r3
 80052ac:	4b18      	ldr	r3, [pc, #96]	; (8005310 <xTaskPriorityDisinherit+0x108>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4013      	ands	r3, r2
 80052b2:	4a17      	ldr	r2, [pc, #92]	; (8005310 <xTaskPriorityDisinherit+0x108>)
 80052b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	f1c3 0207 	rsb	r2, r3, #7
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	2201      	movs	r2, #1
 80052d0:	409a      	lsls	r2, r3
 80052d2:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <xTaskPriorityDisinherit+0x108>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	4a0d      	ldr	r2, [pc, #52]	; (8005310 <xTaskPriorityDisinherit+0x108>)
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4a08      	ldr	r2, [pc, #32]	; (800530c <xTaskPriorityDisinherit+0x104>)
 80052ea:	441a      	add	r2, r3
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	3304      	adds	r3, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	4610      	mov	r0, r2
 80052f4:	f7fe fbf6 	bl	8003ae4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052f8:	2301      	movs	r3, #1
 80052fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052fc:	697b      	ldr	r3, [r7, #20]
	}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	200003b8 	.word	0x200003b8
 800530c:	200003bc 	.word	0x200003bc
 8005310:	200004c0 	.word	0x200004c0

08005314 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800531e:	4b29      	ldr	r3, [pc, #164]	; (80053c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005324:	4b28      	ldr	r3, [pc, #160]	; (80053c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3304      	adds	r3, #4
 800532a:	4618      	mov	r0, r3
 800532c:	f7fe fc37 	bl	8003b9e <uxListRemove>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10b      	bne.n	800534e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005336:	4b24      	ldr	r3, [pc, #144]	; (80053c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	2201      	movs	r2, #1
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	43da      	mvns	r2, r3
 8005344:	4b21      	ldr	r3, [pc, #132]	; (80053cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4013      	ands	r3, r2
 800534a:	4a20      	ldr	r2, [pc, #128]	; (80053cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800534c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005354:	d10a      	bne.n	800536c <prvAddCurrentTaskToDelayedList+0x58>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800535c:	4b1a      	ldr	r3, [pc, #104]	; (80053c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3304      	adds	r3, #4
 8005362:	4619      	mov	r1, r3
 8005364:	481a      	ldr	r0, [pc, #104]	; (80053d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005366:	f7fe fbbd 	bl	8003ae4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800536a:	e026      	b.n	80053ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4413      	add	r3, r2
 8005372:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005374:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	429a      	cmp	r2, r3
 8005382:	d209      	bcs.n	8005398 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005384:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	4b0f      	ldr	r3, [pc, #60]	; (80053c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3304      	adds	r3, #4
 800538e:	4619      	mov	r1, r3
 8005390:	4610      	mov	r0, r2
 8005392:	f7fe fbcb 	bl	8003b2c <vListInsert>
}
 8005396:	e010      	b.n	80053ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005398:	4b0f      	ldr	r3, [pc, #60]	; (80053d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3304      	adds	r3, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	4610      	mov	r0, r2
 80053a6:	f7fe fbc1 	bl	8003b2c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80053aa:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d202      	bcs.n	80053ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80053b4:	4a09      	ldr	r2, [pc, #36]	; (80053dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6013      	str	r3, [r2, #0]
}
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	200004bc 	.word	0x200004bc
 80053c8:	200003b8 	.word	0x200003b8
 80053cc:	200004c0 	.word	0x200004c0
 80053d0:	200004a4 	.word	0x200004a4
 80053d4:	20000474 	.word	0x20000474
 80053d8:	20000470 	.word	0x20000470
 80053dc:	200004d8 	.word	0x200004d8

080053e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08a      	sub	sp, #40	; 0x28
 80053e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80053ea:	f000 fab1 	bl	8005950 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80053ee:	4b1c      	ldr	r3, [pc, #112]	; (8005460 <xTimerCreateTimerTask+0x80>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d021      	beq.n	800543a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053fe:	1d3a      	adds	r2, r7, #4
 8005400:	f107 0108 	add.w	r1, r7, #8
 8005404:	f107 030c 	add.w	r3, r7, #12
 8005408:	4618      	mov	r0, r3
 800540a:	f7fa fefb 	bl	8000204 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	9202      	str	r2, [sp, #8]
 8005416:	9301      	str	r3, [sp, #4]
 8005418:	2302      	movs	r3, #2
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	2300      	movs	r3, #0
 800541e:	460a      	mov	r2, r1
 8005420:	4910      	ldr	r1, [pc, #64]	; (8005464 <xTimerCreateTimerTask+0x84>)
 8005422:	4811      	ldr	r0, [pc, #68]	; (8005468 <xTimerCreateTimerTask+0x88>)
 8005424:	f7ff f8c8 	bl	80045b8 <xTaskCreateStatic>
 8005428:	4603      	mov	r3, r0
 800542a:	4a10      	ldr	r2, [pc, #64]	; (800546c <xTimerCreateTimerTask+0x8c>)
 800542c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800542e:	4b0f      	ldr	r3, [pc, #60]	; (800546c <xTimerCreateTimerTask+0x8c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005436:	2301      	movs	r3, #1
 8005438:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	613b      	str	r3, [r7, #16]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005456:	697b      	ldr	r3, [r7, #20]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	20000514 	.word	0x20000514
 8005464:	08006300 	.word	0x08006300
 8005468:	0800558d 	.word	0x0800558d
 800546c:	20000518 	.word	0x20000518

08005470 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08a      	sub	sp, #40	; 0x28
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800547e:	2300      	movs	r3, #0
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10a      	bne.n	800549e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	623b      	str	r3, [r7, #32]
}
 800549a:	bf00      	nop
 800549c:	e7fe      	b.n	800549c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800549e:	4b1a      	ldr	r3, [pc, #104]	; (8005508 <xTimerGenericCommand+0x98>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d02a      	beq.n	80054fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b05      	cmp	r3, #5
 80054b6:	dc18      	bgt.n	80054ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80054b8:	f7ff fe88 	bl	80051cc <xTaskGetSchedulerState>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d109      	bne.n	80054d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80054c2:	4b11      	ldr	r3, [pc, #68]	; (8005508 <xTimerGenericCommand+0x98>)
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	f107 0114 	add.w	r1, r7, #20
 80054ca:	2300      	movs	r3, #0
 80054cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ce:	f7fe fc8f 	bl	8003df0 <xQueueGenericSend>
 80054d2:	6278      	str	r0, [r7, #36]	; 0x24
 80054d4:	e012      	b.n	80054fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054d6:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <xTimerGenericCommand+0x98>)
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	f107 0114 	add.w	r1, r7, #20
 80054de:	2300      	movs	r3, #0
 80054e0:	2200      	movs	r2, #0
 80054e2:	f7fe fc85 	bl	8003df0 <xQueueGenericSend>
 80054e6:	6278      	str	r0, [r7, #36]	; 0x24
 80054e8:	e008      	b.n	80054fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054ea:	4b07      	ldr	r3, [pc, #28]	; (8005508 <xTimerGenericCommand+0x98>)
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	f107 0114 	add.w	r1, r7, #20
 80054f2:	2300      	movs	r3, #0
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	f7fe fd79 	bl	8003fec <xQueueGenericSendFromISR>
 80054fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3728      	adds	r7, #40	; 0x28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20000514 	.word	0x20000514

0800550c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af02      	add	r7, sp, #8
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005516:	4b1c      	ldr	r3, [pc, #112]	; (8005588 <prvProcessExpiredTimer+0x7c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	3304      	adds	r3, #4
 8005524:	4618      	mov	r0, r3
 8005526:	f7fe fb3a 	bl	8003b9e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d122      	bne.n	8005578 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	18d1      	adds	r1, r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	6978      	ldr	r0, [r7, #20]
 8005540:	f000 f8c8 	bl	80056d4 <prvInsertTimerInActiveList>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d016      	beq.n	8005578 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800554a:	2300      	movs	r3, #0
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	2300      	movs	r3, #0
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	2100      	movs	r1, #0
 8005554:	6978      	ldr	r0, [r7, #20]
 8005556:	f7ff ff8b 	bl	8005470 <xTimerGenericCommand>
 800555a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	60fb      	str	r3, [r7, #12]
}
 8005574:	bf00      	nop
 8005576:	e7fe      	b.n	8005576 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	6978      	ldr	r0, [r7, #20]
 800557e:	4798      	blx	r3
}
 8005580:	bf00      	nop
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	2000050c 	.word	0x2000050c

0800558c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005594:	f107 0308 	add.w	r3, r7, #8
 8005598:	4618      	mov	r0, r3
 800559a:	f000 f857 	bl	800564c <prvGetNextExpireTime>
 800559e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4619      	mov	r1, r3
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 f803 	bl	80055b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80055aa:	f000 f8d5 	bl	8005758 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055ae:	e7f1      	b.n	8005594 <prvTimerTask+0x8>

080055b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80055ba:	f7ff fa21 	bl	8004a00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055be:	f107 0308 	add.w	r3, r7, #8
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 f866 	bl	8005694 <prvSampleTimeNow>
 80055c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d130      	bne.n	8005632 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10a      	bne.n	80055ec <prvProcessTimerOrBlockTask+0x3c>
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d806      	bhi.n	80055ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055de:	f7ff fa1d 	bl	8004a1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055e2:	68f9      	ldr	r1, [r7, #12]
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff ff91 	bl	800550c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055ea:	e024      	b.n	8005636 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d008      	beq.n	8005604 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055f2:	4b13      	ldr	r3, [pc, #76]	; (8005640 <prvProcessTimerOrBlockTask+0x90>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bf0c      	ite	eq
 80055fc:	2301      	moveq	r3, #1
 80055fe:	2300      	movne	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005604:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <prvProcessTimerOrBlockTask+0x94>)
 8005606:	6818      	ldr	r0, [r3, #0]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	4619      	mov	r1, r3
 8005612:	f7fe ff9d 	bl	8004550 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005616:	f7ff fa01 	bl	8004a1c <xTaskResumeAll>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005620:	4b09      	ldr	r3, [pc, #36]	; (8005648 <prvProcessTimerOrBlockTask+0x98>)
 8005622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	f3bf 8f6f 	isb	sy
}
 8005630:	e001      	b.n	8005636 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005632:	f7ff f9f3 	bl	8004a1c <xTaskResumeAll>
}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20000510 	.word	0x20000510
 8005644:	20000514 	.word	0x20000514
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005654:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <prvGetNextExpireTime+0x44>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf0c      	ite	eq
 800565e:	2301      	moveq	r3, #1
 8005660:	2300      	movne	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d105      	bne.n	800567e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005672:	4b07      	ldr	r3, [pc, #28]	; (8005690 <prvGetNextExpireTime+0x44>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	e001      	b.n	8005682 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005682:	68fb      	ldr	r3, [r7, #12]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	2000050c 	.word	0x2000050c

08005694 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800569c:	f7ff fa5a 	bl	8004b54 <xTaskGetTickCount>
 80056a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80056a2:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <prvSampleTimeNow+0x3c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d205      	bcs.n	80056b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80056ac:	f000 f8ee 	bl	800588c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	e002      	b.n	80056be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80056be:	4a04      	ldr	r2, [pc, #16]	; (80056d0 <prvSampleTimeNow+0x3c>)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80056c4:	68fb      	ldr	r3, [r7, #12]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	2000051c 	.word	0x2000051c

080056d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d812      	bhi.n	8005720 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	1ad2      	subs	r2, r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	429a      	cmp	r2, r3
 8005706:	d302      	bcc.n	800570e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005708:	2301      	movs	r3, #1
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e01b      	b.n	8005746 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800570e:	4b10      	ldr	r3, [pc, #64]	; (8005750 <prvInsertTimerInActiveList+0x7c>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3304      	adds	r3, #4
 8005716:	4619      	mov	r1, r3
 8005718:	4610      	mov	r0, r2
 800571a:	f7fe fa07 	bl	8003b2c <vListInsert>
 800571e:	e012      	b.n	8005746 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d206      	bcs.n	8005736 <prvInsertTimerInActiveList+0x62>
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d302      	bcc.n	8005736 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005730:	2301      	movs	r3, #1
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	e007      	b.n	8005746 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005736:	4b07      	ldr	r3, [pc, #28]	; (8005754 <prvInsertTimerInActiveList+0x80>)
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3304      	adds	r3, #4
 800573e:	4619      	mov	r1, r3
 8005740:	4610      	mov	r0, r2
 8005742:	f7fe f9f3 	bl	8003b2c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005746:	697b      	ldr	r3, [r7, #20]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	20000510 	.word	0x20000510
 8005754:	2000050c 	.word	0x2000050c

08005758 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08c      	sub	sp, #48	; 0x30
 800575c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800575e:	e081      	b.n	8005864 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	db7d      	blt.n	8005862 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d004      	beq.n	800577c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	3304      	adds	r3, #4
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe fa11 	bl	8003b9e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800577c:	1d3b      	adds	r3, r7, #4
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff ff88 	bl	8005694 <prvSampleTimeNow>
 8005784:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b09      	cmp	r3, #9
 800578a:	d86b      	bhi.n	8005864 <prvProcessReceivedCommands+0x10c>
 800578c:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <prvProcessReceivedCommands+0x3c>)
 800578e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005792:	bf00      	nop
 8005794:	080057bd 	.word	0x080057bd
 8005798:	080057bd 	.word	0x080057bd
 800579c:	080057bd 	.word	0x080057bd
 80057a0:	08005865 	.word	0x08005865
 80057a4:	08005819 	.word	0x08005819
 80057a8:	08005851 	.word	0x08005851
 80057ac:	080057bd 	.word	0x080057bd
 80057b0:	080057bd 	.word	0x080057bd
 80057b4:	08005865 	.word	0x08005865
 80057b8:	08005819 	.word	0x08005819
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	18d1      	adds	r1, r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a3a      	ldr	r2, [r7, #32]
 80057c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057ca:	f7ff ff83 	bl	80056d4 <prvInsertTimerInActiveList>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d047      	beq.n	8005864 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057da:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d13f      	bne.n	8005864 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	441a      	add	r2, r3
 80057ec:	2300      	movs	r3, #0
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	2300      	movs	r3, #0
 80057f2:	2100      	movs	r1, #0
 80057f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057f6:	f7ff fe3b 	bl	8005470 <xTimerGenericCommand>
 80057fa:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d130      	bne.n	8005864 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	61bb      	str	r3, [r7, #24]
}
 8005814:	bf00      	nop
 8005816:	e7fe      	b.n	8005816 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10a      	bne.n	800583c <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	617b      	str	r3, [r7, #20]
}
 8005838:	bf00      	nop
 800583a:	e7fe      	b.n	800583a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	699a      	ldr	r2, [r3, #24]
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	18d1      	adds	r1, r2, r3
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	6a3a      	ldr	r2, [r7, #32]
 8005848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800584a:	f7ff ff43 	bl	80056d4 <prvInsertTimerInActiveList>
					break;
 800584e:	e009      	b.n	8005864 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005856:	2b00      	cmp	r3, #0
 8005858:	d104      	bne.n	8005864 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800585a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800585c:	f000 fbc8 	bl	8005ff0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005860:	e000      	b.n	8005864 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005862:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005864:	4b08      	ldr	r3, [pc, #32]	; (8005888 <prvProcessReceivedCommands+0x130>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f107 0108 	add.w	r1, r7, #8
 800586c:	2200      	movs	r2, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f7fe fc54 	bl	800411c <xQueueReceive>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	f47f af72 	bne.w	8005760 <prvProcessReceivedCommands+0x8>
	}
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	3728      	adds	r7, #40	; 0x28
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20000514 	.word	0x20000514

0800588c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005892:	e045      	b.n	8005920 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005894:	4b2c      	ldr	r3, [pc, #176]	; (8005948 <prvSwitchTimerLists+0xbc>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800589e:	4b2a      	ldr	r3, [pc, #168]	; (8005948 <prvSwitchTimerLists+0xbc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fe f976 	bl	8003b9e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d12e      	bne.n	8005920 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4413      	add	r3, r2
 80058ca:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d90e      	bls.n	80058f2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058e0:	4b19      	ldr	r3, [pc, #100]	; (8005948 <prvSwitchTimerLists+0xbc>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4619      	mov	r1, r3
 80058ea:	4610      	mov	r0, r2
 80058ec:	f7fe f91e 	bl	8003b2c <vListInsert>
 80058f0:	e016      	b.n	8005920 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058f2:	2300      	movs	r3, #0
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	2300      	movs	r3, #0
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	2100      	movs	r1, #0
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f7ff fdb7 	bl	8005470 <xTimerGenericCommand>
 8005902:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10a      	bne.n	8005920 <prvSwitchTimerLists+0x94>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	603b      	str	r3, [r7, #0]
}
 800591c:	bf00      	nop
 800591e:	e7fe      	b.n	800591e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005920:	4b09      	ldr	r3, [pc, #36]	; (8005948 <prvSwitchTimerLists+0xbc>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1b4      	bne.n	8005894 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800592a:	4b07      	ldr	r3, [pc, #28]	; (8005948 <prvSwitchTimerLists+0xbc>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005930:	4b06      	ldr	r3, [pc, #24]	; (800594c <prvSwitchTimerLists+0xc0>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a04      	ldr	r2, [pc, #16]	; (8005948 <prvSwitchTimerLists+0xbc>)
 8005936:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005938:	4a04      	ldr	r2, [pc, #16]	; (800594c <prvSwitchTimerLists+0xc0>)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	6013      	str	r3, [r2, #0]
}
 800593e:	bf00      	nop
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	2000050c 	.word	0x2000050c
 800594c:	20000510 	.word	0x20000510

08005950 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005956:	f000 f965 	bl	8005c24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800595a:	4b15      	ldr	r3, [pc, #84]	; (80059b0 <prvCheckForValidListAndQueue+0x60>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d120      	bne.n	80059a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005962:	4814      	ldr	r0, [pc, #80]	; (80059b4 <prvCheckForValidListAndQueue+0x64>)
 8005964:	f7fe f891 	bl	8003a8a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005968:	4813      	ldr	r0, [pc, #76]	; (80059b8 <prvCheckForValidListAndQueue+0x68>)
 800596a:	f7fe f88e 	bl	8003a8a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800596e:	4b13      	ldr	r3, [pc, #76]	; (80059bc <prvCheckForValidListAndQueue+0x6c>)
 8005970:	4a10      	ldr	r2, [pc, #64]	; (80059b4 <prvCheckForValidListAndQueue+0x64>)
 8005972:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005974:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <prvCheckForValidListAndQueue+0x70>)
 8005976:	4a10      	ldr	r2, [pc, #64]	; (80059b8 <prvCheckForValidListAndQueue+0x68>)
 8005978:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800597a:	2300      	movs	r3, #0
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	4b11      	ldr	r3, [pc, #68]	; (80059c4 <prvCheckForValidListAndQueue+0x74>)
 8005980:	4a11      	ldr	r2, [pc, #68]	; (80059c8 <prvCheckForValidListAndQueue+0x78>)
 8005982:	210c      	movs	r1, #12
 8005984:	200a      	movs	r0, #10
 8005986:	f7fe f99d 	bl	8003cc4 <xQueueGenericCreateStatic>
 800598a:	4603      	mov	r3, r0
 800598c:	4a08      	ldr	r2, [pc, #32]	; (80059b0 <prvCheckForValidListAndQueue+0x60>)
 800598e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005990:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <prvCheckForValidListAndQueue+0x60>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005998:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <prvCheckForValidListAndQueue+0x60>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	490b      	ldr	r1, [pc, #44]	; (80059cc <prvCheckForValidListAndQueue+0x7c>)
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe fdac 	bl	80044fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059a4:	f000 f96e 	bl	8005c84 <vPortExitCritical>
}
 80059a8:	bf00      	nop
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000514 	.word	0x20000514
 80059b4:	200004e4 	.word	0x200004e4
 80059b8:	200004f8 	.word	0x200004f8
 80059bc:	2000050c 	.word	0x2000050c
 80059c0:	20000510 	.word	0x20000510
 80059c4:	20000598 	.word	0x20000598
 80059c8:	20000520 	.word	0x20000520
 80059cc:	08006308 	.word	0x08006308

080059d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3b04      	subs	r3, #4
 80059e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3b04      	subs	r3, #4
 80059ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f023 0201 	bic.w	r2, r3, #1
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3b04      	subs	r3, #4
 80059fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a00:	4a0c      	ldr	r2, [pc, #48]	; (8005a34 <pxPortInitialiseStack+0x64>)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3b14      	subs	r3, #20
 8005a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3b04      	subs	r3, #4
 8005a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f06f 0202 	mvn.w	r2, #2
 8005a1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3b20      	subs	r3, #32
 8005a24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a26:	68fb      	ldr	r3, [r7, #12]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	08005a39 	.word	0x08005a39

08005a38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a42:	4b12      	ldr	r3, [pc, #72]	; (8005a8c <prvTaskExitError+0x54>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4a:	d00a      	beq.n	8005a62 <prvTaskExitError+0x2a>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	60fb      	str	r3, [r7, #12]
}
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <prvTaskExitError+0x28>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	60bb      	str	r3, [r7, #8]
}
 8005a74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a76:	bf00      	nop
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0fc      	beq.n	8005a78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a7e:	bf00      	nop
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	2000000c 	.word	0x2000000c

08005a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a90:	4b07      	ldr	r3, [pc, #28]	; (8005ab0 <pxCurrentTCBConst2>)
 8005a92:	6819      	ldr	r1, [r3, #0]
 8005a94:	6808      	ldr	r0, [r1, #0]
 8005a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9a:	f380 8809 	msr	PSP, r0
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f04f 0000 	mov.w	r0, #0
 8005aa6:	f380 8811 	msr	BASEPRI, r0
 8005aaa:	4770      	bx	lr
 8005aac:	f3af 8000 	nop.w

08005ab0 <pxCurrentTCBConst2>:
 8005ab0:	200003b8 	.word	0x200003b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ab4:	bf00      	nop
 8005ab6:	bf00      	nop

08005ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ab8:	4808      	ldr	r0, [pc, #32]	; (8005adc <prvPortStartFirstTask+0x24>)
 8005aba:	6800      	ldr	r0, [r0, #0]
 8005abc:	6800      	ldr	r0, [r0, #0]
 8005abe:	f380 8808 	msr	MSP, r0
 8005ac2:	f04f 0000 	mov.w	r0, #0
 8005ac6:	f380 8814 	msr	CONTROL, r0
 8005aca:	b662      	cpsie	i
 8005acc:	b661      	cpsie	f
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	df00      	svc	0
 8005ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ada:	bf00      	nop
 8005adc:	e000ed08 	.word	0xe000ed08

08005ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ae6:	4b46      	ldr	r3, [pc, #280]	; (8005c00 <xPortStartScheduler+0x120>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a46      	ldr	r2, [pc, #280]	; (8005c04 <xPortStartScheduler+0x124>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d10a      	bne.n	8005b06 <xPortStartScheduler+0x26>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	613b      	str	r3, [r7, #16]
}
 8005b02:	bf00      	nop
 8005b04:	e7fe      	b.n	8005b04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b06:	4b3e      	ldr	r3, [pc, #248]	; (8005c00 <xPortStartScheduler+0x120>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a3f      	ldr	r2, [pc, #252]	; (8005c08 <xPortStartScheduler+0x128>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d10a      	bne.n	8005b26 <xPortStartScheduler+0x46>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	60fb      	str	r3, [r7, #12]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b26:	4b39      	ldr	r3, [pc, #228]	; (8005c0c <xPortStartScheduler+0x12c>)
 8005b28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	22ff      	movs	r2, #255	; 0xff
 8005b36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	4b31      	ldr	r3, [pc, #196]	; (8005c10 <xPortStartScheduler+0x130>)
 8005b4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b4e:	4b31      	ldr	r3, [pc, #196]	; (8005c14 <xPortStartScheduler+0x134>)
 8005b50:	2207      	movs	r2, #7
 8005b52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b54:	e009      	b.n	8005b6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005b56:	4b2f      	ldr	r3, [pc, #188]	; (8005c14 <xPortStartScheduler+0x134>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	4a2d      	ldr	r2, [pc, #180]	; (8005c14 <xPortStartScheduler+0x134>)
 8005b5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b6a:	78fb      	ldrb	r3, [r7, #3]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b72:	2b80      	cmp	r3, #128	; 0x80
 8005b74:	d0ef      	beq.n	8005b56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b76:	4b27      	ldr	r3, [pc, #156]	; (8005c14 <xPortStartScheduler+0x134>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f1c3 0307 	rsb	r3, r3, #7
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d00a      	beq.n	8005b98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	60bb      	str	r3, [r7, #8]
}
 8005b94:	bf00      	nop
 8005b96:	e7fe      	b.n	8005b96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b98:	4b1e      	ldr	r3, [pc, #120]	; (8005c14 <xPortStartScheduler+0x134>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	4a1d      	ldr	r2, [pc, #116]	; (8005c14 <xPortStartScheduler+0x134>)
 8005ba0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ba2:	4b1c      	ldr	r3, [pc, #112]	; (8005c14 <xPortStartScheduler+0x134>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005baa:	4a1a      	ldr	r2, [pc, #104]	; (8005c14 <xPortStartScheduler+0x134>)
 8005bac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005bb6:	4b18      	ldr	r3, [pc, #96]	; (8005c18 <xPortStartScheduler+0x138>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <xPortStartScheduler+0x138>)
 8005bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005bc2:	4b15      	ldr	r3, [pc, #84]	; (8005c18 <xPortStartScheduler+0x138>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a14      	ldr	r2, [pc, #80]	; (8005c18 <xPortStartScheduler+0x138>)
 8005bc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005bcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005bce:	f000 f8dd 	bl	8005d8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bd2:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <xPortStartScheduler+0x13c>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005bd8:	f000 f8fc 	bl	8005dd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005bdc:	4b10      	ldr	r3, [pc, #64]	; (8005c20 <xPortStartScheduler+0x140>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a0f      	ldr	r2, [pc, #60]	; (8005c20 <xPortStartScheduler+0x140>)
 8005be2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005be6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005be8:	f7ff ff66 	bl	8005ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bec:	f7ff f880 	bl	8004cf0 <vTaskSwitchContext>
	prvTaskExitError();
 8005bf0:	f7ff ff22 	bl	8005a38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	e000ed00 	.word	0xe000ed00
 8005c04:	410fc271 	.word	0x410fc271
 8005c08:	410fc270 	.word	0x410fc270
 8005c0c:	e000e400 	.word	0xe000e400
 8005c10:	200005e0 	.word	0x200005e0
 8005c14:	200005e4 	.word	0x200005e4
 8005c18:	e000ed20 	.word	0xe000ed20
 8005c1c:	2000000c 	.word	0x2000000c
 8005c20:	e000ef34 	.word	0xe000ef34

08005c24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	607b      	str	r3, [r7, #4]
}
 8005c3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c3e:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <vPortEnterCritical+0x58>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3301      	adds	r3, #1
 8005c44:	4a0d      	ldr	r2, [pc, #52]	; (8005c7c <vPortEnterCritical+0x58>)
 8005c46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c48:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <vPortEnterCritical+0x58>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d10f      	bne.n	8005c70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c50:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <vPortEnterCritical+0x5c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	603b      	str	r3, [r7, #0]
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <vPortEnterCritical+0x4a>
	}
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	2000000c 	.word	0x2000000c
 8005c80:	e000ed04 	.word	0xe000ed04

08005c84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c8a:	4b12      	ldr	r3, [pc, #72]	; (8005cd4 <vPortExitCritical+0x50>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10a      	bne.n	8005ca8 <vPortExitCritical+0x24>
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	607b      	str	r3, [r7, #4]
}
 8005ca4:	bf00      	nop
 8005ca6:	e7fe      	b.n	8005ca6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ca8:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <vPortExitCritical+0x50>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	4a09      	ldr	r2, [pc, #36]	; (8005cd4 <vPortExitCritical+0x50>)
 8005cb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cb2:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <vPortExitCritical+0x50>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d105      	bne.n	8005cc6 <vPortExitCritical+0x42>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	f383 8811 	msr	BASEPRI, r3
}
 8005cc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	2000000c 	.word	0x2000000c
	...

08005ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ce0:	f3ef 8009 	mrs	r0, PSP
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	4b15      	ldr	r3, [pc, #84]	; (8005d40 <pxCurrentTCBConst>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	f01e 0f10 	tst.w	lr, #16
 8005cf0:	bf08      	it	eq
 8005cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfa:	6010      	str	r0, [r2, #0]
 8005cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d04:	f380 8811 	msr	BASEPRI, r0
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f7fe ffee 	bl	8004cf0 <vTaskSwitchContext>
 8005d14:	f04f 0000 	mov.w	r0, #0
 8005d18:	f380 8811 	msr	BASEPRI, r0
 8005d1c:	bc09      	pop	{r0, r3}
 8005d1e:	6819      	ldr	r1, [r3, #0]
 8005d20:	6808      	ldr	r0, [r1, #0]
 8005d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d26:	f01e 0f10 	tst.w	lr, #16
 8005d2a:	bf08      	it	eq
 8005d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d30:	f380 8809 	msr	PSP, r0
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	f3af 8000 	nop.w

08005d40 <pxCurrentTCBConst>:
 8005d40:	200003b8 	.word	0x200003b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop

08005d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	607b      	str	r3, [r7, #4]
}
 8005d60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d62:	f7fe ff07 	bl	8004b74 <xTaskIncrementTick>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d6c:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <SysTick_Handler+0x40>)
 8005d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	2300      	movs	r3, #0
 8005d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	f383 8811 	msr	BASEPRI, r3
}
 8005d7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d80:	bf00      	nop
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	e000ed04 	.word	0xe000ed04

08005d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d90:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <vPortSetupTimerInterrupt+0x34>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d96:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <vPortSetupTimerInterrupt+0x38>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <vPortSetupTimerInterrupt+0x3c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a0a      	ldr	r2, [pc, #40]	; (8005dcc <vPortSetupTimerInterrupt+0x40>)
 8005da2:	fba2 2303 	umull	r2, r3, r2, r3
 8005da6:	099b      	lsrs	r3, r3, #6
 8005da8:	4a09      	ldr	r2, [pc, #36]	; (8005dd0 <vPortSetupTimerInterrupt+0x44>)
 8005daa:	3b01      	subs	r3, #1
 8005dac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dae:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <vPortSetupTimerInterrupt+0x34>)
 8005db0:	2207      	movs	r2, #7
 8005db2:	601a      	str	r2, [r3, #0]
}
 8005db4:	bf00      	nop
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	e000e010 	.word	0xe000e010
 8005dc4:	e000e018 	.word	0xe000e018
 8005dc8:	20000000 	.word	0x20000000
 8005dcc:	10624dd3 	.word	0x10624dd3
 8005dd0:	e000e014 	.word	0xe000e014

08005dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005de4 <vPortEnableVFP+0x10>
 8005dd8:	6801      	ldr	r1, [r0, #0]
 8005dda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005dde:	6001      	str	r1, [r0, #0]
 8005de0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005de2:	bf00      	nop
 8005de4:	e000ed88 	.word	0xe000ed88

08005de8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005dee:	f3ef 8305 	mrs	r3, IPSR
 8005df2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b0f      	cmp	r3, #15
 8005df8:	d914      	bls.n	8005e24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005dfa:	4a17      	ldr	r2, [pc, #92]	; (8005e58 <vPortValidateInterruptPriority+0x70>)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4413      	add	r3, r2
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e04:	4b15      	ldr	r3, [pc, #84]	; (8005e5c <vPortValidateInterruptPriority+0x74>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	7afa      	ldrb	r2, [r7, #11]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d20a      	bcs.n	8005e24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	607b      	str	r3, [r7, #4]
}
 8005e20:	bf00      	nop
 8005e22:	e7fe      	b.n	8005e22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e24:	4b0e      	ldr	r3, [pc, #56]	; (8005e60 <vPortValidateInterruptPriority+0x78>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e2c:	4b0d      	ldr	r3, [pc, #52]	; (8005e64 <vPortValidateInterruptPriority+0x7c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d90a      	bls.n	8005e4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	603b      	str	r3, [r7, #0]
}
 8005e46:	bf00      	nop
 8005e48:	e7fe      	b.n	8005e48 <vPortValidateInterruptPriority+0x60>
	}
 8005e4a:	bf00      	nop
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	e000e3f0 	.word	0xe000e3f0
 8005e5c:	200005e0 	.word	0x200005e0
 8005e60:	e000ed0c 	.word	0xe000ed0c
 8005e64:	200005e4 	.word	0x200005e4

08005e68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08a      	sub	sp, #40	; 0x28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e74:	f7fe fdc4 	bl	8004a00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e78:	4b58      	ldr	r3, [pc, #352]	; (8005fdc <pvPortMalloc+0x174>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e80:	f000 f910 	bl	80060a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e84:	4b56      	ldr	r3, [pc, #344]	; (8005fe0 <pvPortMalloc+0x178>)
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f040 808e 	bne.w	8005fae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01d      	beq.n	8005ed4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e98:	2208      	movs	r2, #8
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f003 0307 	and.w	r3, r3, #7
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d014      	beq.n	8005ed4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f023 0307 	bic.w	r3, r3, #7
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <pvPortMalloc+0x6c>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	617b      	str	r3, [r7, #20]
}
 8005ed0:	bf00      	nop
 8005ed2:	e7fe      	b.n	8005ed2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d069      	beq.n	8005fae <pvPortMalloc+0x146>
 8005eda:	4b42      	ldr	r3, [pc, #264]	; (8005fe4 <pvPortMalloc+0x17c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d864      	bhi.n	8005fae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ee4:	4b40      	ldr	r3, [pc, #256]	; (8005fe8 <pvPortMalloc+0x180>)
 8005ee6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ee8:	4b3f      	ldr	r3, [pc, #252]	; (8005fe8 <pvPortMalloc+0x180>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eee:	e004      	b.n	8005efa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d903      	bls.n	8005f0c <pvPortMalloc+0xa4>
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1f1      	bne.n	8005ef0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f0c:	4b33      	ldr	r3, [pc, #204]	; (8005fdc <pvPortMalloc+0x174>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d04b      	beq.n	8005fae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2208      	movs	r2, #8
 8005f1c:	4413      	add	r3, r2
 8005f1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	1ad2      	subs	r2, r2, r3
 8005f30:	2308      	movs	r3, #8
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d91f      	bls.n	8005f78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <pvPortMalloc+0xf8>
	__asm volatile
 8005f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	613b      	str	r3, [r7, #16]
}
 8005f5c:	bf00      	nop
 8005f5e:	e7fe      	b.n	8005f5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	1ad2      	subs	r2, r2, r3
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f72:	69b8      	ldr	r0, [r7, #24]
 8005f74:	f000 f8f8 	bl	8006168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f78:	4b1a      	ldr	r3, [pc, #104]	; (8005fe4 <pvPortMalloc+0x17c>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	4a18      	ldr	r2, [pc, #96]	; (8005fe4 <pvPortMalloc+0x17c>)
 8005f84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f86:	4b17      	ldr	r3, [pc, #92]	; (8005fe4 <pvPortMalloc+0x17c>)
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	4b18      	ldr	r3, [pc, #96]	; (8005fec <pvPortMalloc+0x184>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d203      	bcs.n	8005f9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f92:	4b14      	ldr	r3, [pc, #80]	; (8005fe4 <pvPortMalloc+0x17c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a15      	ldr	r2, [pc, #84]	; (8005fec <pvPortMalloc+0x184>)
 8005f98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <pvPortMalloc+0x178>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fae:	f7fe fd35 	bl	8004a1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <pvPortMalloc+0x16a>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	60fb      	str	r3, [r7, #12]
}
 8005fce:	bf00      	nop
 8005fd0:	e7fe      	b.n	8005fd0 <pvPortMalloc+0x168>
	return pvReturn;
 8005fd2:	69fb      	ldr	r3, [r7, #28]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3728      	adds	r7, #40	; 0x28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	20001d60 	.word	0x20001d60
 8005fe0:	20001d6c 	.word	0x20001d6c
 8005fe4:	20001d64 	.word	0x20001d64
 8005fe8:	20001d58 	.word	0x20001d58
 8005fec:	20001d68 	.word	0x20001d68

08005ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d048      	beq.n	8006094 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006002:	2308      	movs	r3, #8
 8006004:	425b      	negs	r3, r3
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4413      	add	r3, r2
 800600a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	4b21      	ldr	r3, [pc, #132]	; (800609c <vPortFree+0xac>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4013      	ands	r3, r2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <vPortFree+0x44>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	60fb      	str	r3, [r7, #12]
}
 8006030:	bf00      	nop
 8006032:	e7fe      	b.n	8006032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <vPortFree+0x62>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	60bb      	str	r3, [r7, #8]
}
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	4b11      	ldr	r3, [pc, #68]	; (800609c <vPortFree+0xac>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4013      	ands	r3, r2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d019      	beq.n	8006094 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d115      	bne.n	8006094 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	4b0b      	ldr	r3, [pc, #44]	; (800609c <vPortFree+0xac>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	43db      	mvns	r3, r3
 8006072:	401a      	ands	r2, r3
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006078:	f7fe fcc2 	bl	8004a00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <vPortFree+0xb0>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4413      	add	r3, r2
 8006086:	4a06      	ldr	r2, [pc, #24]	; (80060a0 <vPortFree+0xb0>)
 8006088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800608a:	6938      	ldr	r0, [r7, #16]
 800608c:	f000 f86c 	bl	8006168 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006090:	f7fe fcc4 	bl	8004a1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006094:	bf00      	nop
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20001d6c 	.word	0x20001d6c
 80060a0:	20001d64 	.word	0x20001d64

080060a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060aa:	f241 7370 	movw	r3, #6000	; 0x1770
 80060ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060b0:	4b27      	ldr	r3, [pc, #156]	; (8006150 <prvHeapInit+0xac>)
 80060b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3307      	adds	r3, #7
 80060c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 0307 	bic.w	r3, r3, #7
 80060ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	4a1f      	ldr	r2, [pc, #124]	; (8006150 <prvHeapInit+0xac>)
 80060d4:	4413      	add	r3, r2
 80060d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060dc:	4a1d      	ldr	r2, [pc, #116]	; (8006154 <prvHeapInit+0xb0>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060e2:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <prvHeapInit+0xb0>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	4413      	add	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060f0:	2208      	movs	r2, #8
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	1a9b      	subs	r3, r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0307 	bic.w	r3, r3, #7
 80060fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4a15      	ldr	r2, [pc, #84]	; (8006158 <prvHeapInit+0xb4>)
 8006104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006106:	4b14      	ldr	r3, [pc, #80]	; (8006158 <prvHeapInit+0xb4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2200      	movs	r2, #0
 800610c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800610e:	4b12      	ldr	r3, [pc, #72]	; (8006158 <prvHeapInit+0xb4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	1ad2      	subs	r2, r2, r3
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006124:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <prvHeapInit+0xb4>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	4a0a      	ldr	r2, [pc, #40]	; (800615c <prvHeapInit+0xb8>)
 8006132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	4a09      	ldr	r2, [pc, #36]	; (8006160 <prvHeapInit+0xbc>)
 800613a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800613c:	4b09      	ldr	r3, [pc, #36]	; (8006164 <prvHeapInit+0xc0>)
 800613e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006142:	601a      	str	r2, [r3, #0]
}
 8006144:	bf00      	nop
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	200005e8 	.word	0x200005e8
 8006154:	20001d58 	.word	0x20001d58
 8006158:	20001d60 	.word	0x20001d60
 800615c:	20001d68 	.word	0x20001d68
 8006160:	20001d64 	.word	0x20001d64
 8006164:	20001d6c 	.word	0x20001d6c

08006168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006170:	4b28      	ldr	r3, [pc, #160]	; (8006214 <prvInsertBlockIntoFreeList+0xac>)
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	e002      	b.n	800617c <prvInsertBlockIntoFreeList+0x14>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	429a      	cmp	r2, r3
 8006184:	d8f7      	bhi.n	8006176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	4413      	add	r3, r2
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	429a      	cmp	r2, r3
 8006196:	d108      	bne.n	80061aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	441a      	add	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	441a      	add	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d118      	bne.n	80061f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	4b15      	ldr	r3, [pc, #84]	; (8006218 <prvInsertBlockIntoFreeList+0xb0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d00d      	beq.n	80061e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	441a      	add	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	e008      	b.n	80061f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061e6:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <prvInsertBlockIntoFreeList+0xb0>)
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	e003      	b.n	80061f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d002      	beq.n	8006206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006206:	bf00      	nop
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	20001d58 	.word	0x20001d58
 8006218:	20001d60 	.word	0x20001d60

0800621c <__libc_init_array>:
 800621c:	b570      	push	{r4, r5, r6, lr}
 800621e:	4d0d      	ldr	r5, [pc, #52]	; (8006254 <__libc_init_array+0x38>)
 8006220:	4c0d      	ldr	r4, [pc, #52]	; (8006258 <__libc_init_array+0x3c>)
 8006222:	1b64      	subs	r4, r4, r5
 8006224:	10a4      	asrs	r4, r4, #2
 8006226:	2600      	movs	r6, #0
 8006228:	42a6      	cmp	r6, r4
 800622a:	d109      	bne.n	8006240 <__libc_init_array+0x24>
 800622c:	4d0b      	ldr	r5, [pc, #44]	; (800625c <__libc_init_array+0x40>)
 800622e:	4c0c      	ldr	r4, [pc, #48]	; (8006260 <__libc_init_array+0x44>)
 8006230:	f000 f82e 	bl	8006290 <_init>
 8006234:	1b64      	subs	r4, r4, r5
 8006236:	10a4      	asrs	r4, r4, #2
 8006238:	2600      	movs	r6, #0
 800623a:	42a6      	cmp	r6, r4
 800623c:	d105      	bne.n	800624a <__libc_init_array+0x2e>
 800623e:	bd70      	pop	{r4, r5, r6, pc}
 8006240:	f855 3b04 	ldr.w	r3, [r5], #4
 8006244:	4798      	blx	r3
 8006246:	3601      	adds	r6, #1
 8006248:	e7ee      	b.n	8006228 <__libc_init_array+0xc>
 800624a:	f855 3b04 	ldr.w	r3, [r5], #4
 800624e:	4798      	blx	r3
 8006250:	3601      	adds	r6, #1
 8006252:	e7f2      	b.n	800623a <__libc_init_array+0x1e>
 8006254:	08006348 	.word	0x08006348
 8006258:	08006348 	.word	0x08006348
 800625c:	08006348 	.word	0x08006348
 8006260:	0800634c 	.word	0x0800634c

08006264 <memcpy>:
 8006264:	440a      	add	r2, r1
 8006266:	4291      	cmp	r1, r2
 8006268:	f100 33ff 	add.w	r3, r0, #4294967295
 800626c:	d100      	bne.n	8006270 <memcpy+0xc>
 800626e:	4770      	bx	lr
 8006270:	b510      	push	{r4, lr}
 8006272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800627a:	4291      	cmp	r1, r2
 800627c:	d1f9      	bne.n	8006272 <memcpy+0xe>
 800627e:	bd10      	pop	{r4, pc}

08006280 <memset>:
 8006280:	4402      	add	r2, r0
 8006282:	4603      	mov	r3, r0
 8006284:	4293      	cmp	r3, r2
 8006286:	d100      	bne.n	800628a <memset+0xa>
 8006288:	4770      	bx	lr
 800628a:	f803 1b01 	strb.w	r1, [r3], #1
 800628e:	e7f9      	b.n	8006284 <memset+0x4>

08006290 <_init>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	bf00      	nop
 8006294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006296:	bc08      	pop	{r3}
 8006298:	469e      	mov	lr, r3
 800629a:	4770      	bx	lr

0800629c <_fini>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	bf00      	nop
 80062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a2:	bc08      	pop	{r3}
 80062a4:	469e      	mov	lr, r3
 80062a6:	4770      	bx	lr
